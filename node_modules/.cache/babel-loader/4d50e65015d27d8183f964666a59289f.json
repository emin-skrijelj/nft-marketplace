{"ast":null,"code":"import { multiaddr } from '@multiformats/multiaddr';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { peerIdFromString } from '@libp2p/peer-id';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createPeers = configure(api => {\n  /**\n   * @type {SwarmAPI[\"peers\"]}\n   */\n  async function peers() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await api.post('swarm/peers', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    });\n    /** @type {{ Peers: { Peer: string, Addr: string, Muxer?: string, Latency?: string, Streams?: string[], Direction?: 0 | 1 }[] }} */\n\n    const {\n      Peers\n    } = await res.json();\n    return (Peers || []).map(peer => {\n      return {\n        addr: multiaddr(peer.Addr),\n        peer: peerIdFromString(peer.Peer),\n        muxer: peer.Muxer,\n        latency: peer.Latency,\n        streams: peer.Streams,\n        direction: peer.Direction == null ? undefined : peer.Direction === 0 ? 'inbound' : 'outbound'\n      };\n    });\n  }\n\n  return peers;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/swarm/peers.js"],"names":["multiaddr","configure","toUrlSearchParams","peerIdFromString","createPeers","api","peers","options","res","post","signal","searchParams","headers","Peers","json","map","peer","addr","Addr","Peer","muxer","Muxer","latency","Latency","streams","Streams","direction","Direction","undefined"],"mappings":"AAAA,SAASA,SAAT,QAA0B,yBAA1B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAGH,SAAS,CAACI,GAAG,IAAI;AAC1C;AACF;AACA;AACE,iBAAeC,KAAf,GAAoC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAClC,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,aAAT,EAAwB;AACxCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADwB;AAExCC,MAAAA,YAAY,EAAET,iBAAiB,CAACK,OAAD,CAFS;AAGxCK,MAAAA,OAAO,EAAEL,OAAO,CAACK;AAHuB,KAAxB,CAAlB;AAMA;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAY,MAAML,GAAG,CAACM,IAAJ,EAAxB;AAEA,WAAO,CAACD,KAAK,IAAI,EAAV,EAAcE,GAAd,CAAkBC,IAAI,IAAI;AAC/B,aAAO;AACLC,QAAAA,IAAI,EAAEjB,SAAS,CAACgB,IAAI,CAACE,IAAN,CADV;AAELF,QAAAA,IAAI,EAAEb,gBAAgB,CAACa,IAAI,CAACG,IAAN,CAFjB;AAGLC,QAAAA,KAAK,EAAEJ,IAAI,CAACK,KAHP;AAILC,QAAAA,OAAO,EAAEN,IAAI,CAACO,OAJT;AAKLC,QAAAA,OAAO,EAAER,IAAI,CAACS,OALT;AAMLC,QAAAA,SAAS,EAAEV,IAAI,CAACW,SAAL,IAAkB,IAAlB,GAAyBC,SAAzB,GAAqCZ,IAAI,CAACW,SAAL,KAAmB,CAAnB,GAAuB,SAAvB,GAAmC;AAN9E,OAAP;AAQD,KATM,CAAP;AAUD;;AACD,SAAOrB,KAAP;AACD,CA1BmC,CAA7B","sourcesContent":["import { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createPeers = configure(api => {\n  /**\n   * @type {SwarmAPI[\"peers\"]}\n   */\n  async function peers (options = {}) {\n    const res = await api.post('swarm/peers', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Peers: { Peer: string, Addr: string, Muxer?: string, Latency?: string, Streams?: string[], Direction?: 0 | 1 }[] }} */\n    const { Peers } = await res.json()\n\n    return (Peers || []).map(peer => {\n      return {\n        addr: multiaddr(peer.Addr),\n        peer: peerIdFromString(peer.Peer),\n        muxer: peer.Muxer,\n        latency: peer.Latency,\n        streams: peer.Streams,\n        direction: peer.Direction == null ? undefined : peer.Direction === 0 ? 'inbound' : 'outbound'\n      }\n    })\n  }\n  return peers\n})\n"]},"metadata":{},"sourceType":"module"}