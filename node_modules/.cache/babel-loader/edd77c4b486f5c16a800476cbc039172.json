{"ast":null,"code":"'use strict';\n\nconst isReactNative = typeof navigator !== 'undefined' && navigator.product === 'ReactNative';\n\nfunction getDefaultBase() {\n  if (isReactNative) {\n    return 'http://localhost';\n  } // in some environments i.e. cloudflare workers location is not available\n\n\n  if (!self.location) {\n    return '';\n  }\n\n  return self.location.protocol + '//' + self.location.host;\n}\n\nconst URL = self.URL;\nconst defaultBase = getDefaultBase();\n\nclass URLWithLegacySupport {\n  constructor() {\n    let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultBase;\n    this.super = new URL(url, base);\n    this.path = this.pathname + this.search;\n    this.auth = this.username && this.password ? this.username + ':' + this.password : null;\n    this.query = this.search && this.search.startsWith('?') ? this.search.slice(1) : null;\n  }\n\n  get hash() {\n    return this.super.hash;\n  }\n\n  get host() {\n    return this.super.host;\n  }\n\n  get hostname() {\n    return this.super.hostname;\n  }\n\n  get href() {\n    return this.super.href;\n  }\n\n  get origin() {\n    return this.super.origin;\n  }\n\n  get password() {\n    return this.super.password;\n  }\n\n  get pathname() {\n    return this.super.pathname;\n  }\n\n  get port() {\n    return this.super.port;\n  }\n\n  get protocol() {\n    return this.super.protocol;\n  }\n\n  get search() {\n    return this.super.search;\n  }\n\n  get searchParams() {\n    return this.super.searchParams;\n  }\n\n  get username() {\n    return this.super.username;\n  }\n\n  set hash(hash) {\n    this.super.hash = hash;\n  }\n\n  set host(host) {\n    this.super.host = host;\n  }\n\n  set hostname(hostname) {\n    this.super.hostname = hostname;\n  }\n\n  set href(href) {\n    this.super.href = href;\n  }\n\n  set password(password) {\n    this.super.password = password;\n  }\n\n  set pathname(pathname) {\n    this.super.pathname = pathname;\n  }\n\n  set port(port) {\n    this.super.port = port;\n  }\n\n  set protocol(protocol) {\n    this.super.protocol = protocol;\n  }\n\n  set search(search) {\n    this.super.search = search;\n  }\n\n  set username(username) {\n    this.super.username = username;\n  }\n  /**\n   * @param {any} o\n   */\n\n\n  static createObjectURL(o) {\n    return URL.createObjectURL(o);\n  }\n  /**\n   * @param {string} o\n   */\n\n\n  static revokeObjectURL(o) {\n    URL.revokeObjectURL(o);\n  }\n\n  toJSON() {\n    return this.super.toJSON();\n  }\n\n  toString() {\n    return this.super.toString();\n  }\n\n  format() {\n    return this.toString();\n  }\n\n}\n/**\n * @param {string | import('url').UrlObject} obj\n */\n\n\nfunction format(obj) {\n  if (typeof obj === 'string') {\n    const url = new URL(obj);\n    return url.toString();\n  }\n\n  if (!(obj instanceof URL)) {\n    const userPass = // @ts-ignore its not supported in node but we normalise\n    obj.username && obj.password // @ts-ignore its not supported in node but we normalise\n    ? `${obj.username}:${obj.password}@` : '';\n    const auth = obj.auth ? obj.auth + '@' : '';\n    const port = obj.port ? ':' + obj.port : '';\n    const protocol = obj.protocol ? obj.protocol + '//' : '';\n    const host = obj.host || '';\n    const hostname = obj.hostname || '';\n    const search = obj.search || (obj.query ? '?' + obj.query : '');\n    const hash = obj.hash || '';\n    const pathname = obj.pathname || ''; // @ts-ignore - path is not supported in node but we normalise\n\n    const path = obj.path || pathname + search;\n    return `${protocol}${userPass || auth}${host || hostname + port}${path}${hash}`;\n  }\n}\n\nmodule.exports = {\n  URLWithLegacySupport,\n  URLSearchParams: self.URLSearchParams,\n  defaultBase,\n  format\n};","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/iso-url/src/url-browser.js"],"names":["isReactNative","navigator","product","getDefaultBase","self","location","protocol","host","URL","defaultBase","URLWithLegacySupport","constructor","url","base","super","path","pathname","search","auth","username","password","query","startsWith","slice","hash","hostname","href","origin","port","searchParams","createObjectURL","o","revokeObjectURL","toJSON","toString","format","obj","userPass","module","exports","URLSearchParams"],"mappings":"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","sourcesContent":["'use strict'\n\nconst isReactNative =\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative'\n\nfunction getDefaultBase () {\n  if (isReactNative) {\n    return 'http://localhost'\n  }\n  // in some environments i.e. cloudflare workers location is not available\n  if (!self.location) {\n    return ''\n  }\n\n  return self.location.protocol + '//' + self.location.host\n}\n\nconst URL = self.URL\nconst defaultBase = getDefaultBase()\n\nclass URLWithLegacySupport {\n  constructor (url = '', base = defaultBase) {\n    this.super = new URL(url, base)\n    this.path = this.pathname + this.search\n    this.auth =\n            this.username && this.password\n              ? this.username + ':' + this.password\n              : null\n\n    this.query =\n            this.search && this.search.startsWith('?')\n              ? this.search.slice(1)\n              : null\n  }\n\n  get hash () {\n    return this.super.hash\n  }\n\n  get host () {\n    return this.super.host\n  }\n\n  get hostname () {\n    return this.super.hostname\n  }\n\n  get href () {\n    return this.super.href\n  }\n\n  get origin () {\n    return this.super.origin\n  }\n\n  get password () {\n    return this.super.password\n  }\n\n  get pathname () {\n    return this.super.pathname\n  }\n\n  get port () {\n    return this.super.port\n  }\n\n  get protocol () {\n    return this.super.protocol\n  }\n\n  get search () {\n    return this.super.search\n  }\n\n  get searchParams () {\n    return this.super.searchParams\n  }\n\n  get username () {\n    return this.super.username\n  }\n\n  set hash (hash) {\n    this.super.hash = hash\n  }\n\n  set host (host) {\n    this.super.host = host\n  }\n\n  set hostname (hostname) {\n    this.super.hostname = hostname\n  }\n\n  set href (href) {\n    this.super.href = href\n  }\n\n  set password (password) {\n    this.super.password = password\n  }\n\n  set pathname (pathname) {\n    this.super.pathname = pathname\n  }\n\n  set port (port) {\n    this.super.port = port\n  }\n\n  set protocol (protocol) {\n    this.super.protocol = protocol\n  }\n\n  set search (search) {\n    this.super.search = search\n  }\n\n  set username (username) {\n    this.super.username = username\n  }\n\n  /**\n   * @param {any} o\n   */\n  static createObjectURL (o) {\n    return URL.createObjectURL(o)\n  }\n\n  /**\n   * @param {string} o\n   */\n  static revokeObjectURL (o) {\n    URL.revokeObjectURL(o)\n  }\n\n  toJSON () {\n    return this.super.toJSON()\n  }\n\n  toString () {\n    return this.super.toString()\n  }\n\n  format () {\n    return this.toString()\n  }\n}\n\n/**\n * @param {string | import('url').UrlObject} obj\n */\nfunction format (obj) {\n  if (typeof obj === 'string') {\n    const url = new URL(obj)\n\n    return url.toString()\n  }\n\n  if (!(obj instanceof URL)) {\n    const userPass =\n            // @ts-ignore its not supported in node but we normalise\n            obj.username && obj.password\n              // @ts-ignore its not supported in node but we normalise\n              ? `${obj.username}:${obj.password}@`\n              : ''\n    const auth = obj.auth ? obj.auth + '@' : ''\n    const port = obj.port ? ':' + obj.port : ''\n    const protocol = obj.protocol ? obj.protocol + '//' : ''\n    const host = obj.host || ''\n    const hostname = obj.hostname || ''\n    const search = obj.search || (obj.query ? '?' + obj.query : '')\n    const hash = obj.hash || ''\n    const pathname = obj.pathname || ''\n    // @ts-ignore - path is not supported in node but we normalise\n    const path = obj.path || pathname + search\n\n    return `${protocol}${userPass || auth}${\n            host || hostname + port\n        }${path}${hash}`\n  }\n}\n\nmodule.exports = {\n  URLWithLegacySupport,\n  URLSearchParams: self.URLSearchParams,\n  defaultBase,\n  format\n}\n"]},"metadata":{},"sourceType":"script"}