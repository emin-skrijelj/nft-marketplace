{"ast":null,"code":"import errCode from 'err-code';\nimport { CID } from 'multiformats/cid';\n/**\n * @typedef {object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * @param {any} thing\n * @returns {thing is IterableIterator<any> & Iterator<any>}\n */\n\nfunction isIterable(thing) {\n  return Symbol.iterator in thing;\n}\n/**\n * @param {any} thing\n * @returns {thing is AsyncIterableIterator<any> & AsyncIterator<any>}\n */\n\n\nfunction isAsyncIterable(thing) {\n  return Symbol.asyncIterator in thing;\n}\n/**\n * @param {any} thing\n * @returns {thing is CID}\n */\n\n\nfunction isCID(thing) {\n  return CID.asCID(thing) != null;\n}\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\n\n\nexport async function* normaliseInput(input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n  } // CID\n\n\n  const cid = CID.asCID(input);\n\n  if (cid) {\n    yield toPin({\n      cid\n    });\n    return;\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({\n      path: input\n    });\n    return;\n  } // { cid: CID recursive, metadata }\n  // @ts-expect-error - it still could be iterable or async iterable\n\n\n  if (input.cid != null || input.path != null) {\n    // @ts-expect-error\n    return yield toPin(input);\n  } // Iterable<?>\n\n\n  if (isIterable(input)) {\n    const iterator = input[Symbol.iterator]();\n    const first = iterator.next();\n\n    if (first.done) {\n      return iterator;\n    } // Iterable<CID>\n\n\n    if (isCID(first.value)) {\n      yield toPin({\n        cid: first.value\n      });\n\n      for (const cid of iterator) {\n        yield toPin({\n          cid\n        });\n      }\n\n      return;\n    } // Iterable<String>\n\n\n    if (first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({\n        path: first.value\n      });\n\n      for (const path of iterator) {\n        yield toPin({\n          path\n        });\n      }\n\n      return;\n    } // Iterable<Pinnable>\n\n\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n\n      for (const obj of iterator) {\n        yield toPin(obj);\n      }\n\n      return;\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  } // AsyncIterable<?>\n\n\n  if (isAsyncIterable(input)) {\n    const iterator = input[Symbol.asyncIterator]();\n    const first = await iterator.next();\n    if (first.done) return iterator; // AsyncIterable<CID>\n\n    if (isCID(first.value)) {\n      yield toPin({\n        cid: first.value\n      });\n\n      for await (const cid of iterator) {\n        yield toPin({\n          cid\n        });\n      }\n\n      return;\n    } // AsyncIterable<String>\n\n\n    if (first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({\n        path: first.value\n      });\n\n      for await (const path of iterator) {\n        yield toPin({\n          path\n        });\n      }\n\n      return;\n    } // AsyncIterable<{ cid: CID|String recursive, metadata }>\n\n\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n\n      for await (const obj of iterator) {\n        yield toPin(obj);\n      }\n\n      return;\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n}\n/**\n * @param {Pinnable} input\n */\n\nfunction toPin(input) {\n  const path = input.cid || `${input.path}`;\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n  /** @type {Pin} */\n\n\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  };\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n\n  return pin;\n}","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-core-utils/src/pins/normalise-input.js"],"names":["errCode","CID","isIterable","thing","Symbol","iterator","isAsyncIterable","asyncIterator","isCID","asCID","normaliseInput","input","undefined","Error","cid","toPin","String","path","first","next","done","value","obj","pin","recursive","metadata"],"mappings":"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","sourcesContent":["import errCode from 'err-code'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * @param {any} thing\n * @returns {thing is IterableIterator<any> & Iterator<any>}\n */\nfunction isIterable (thing) {\n  return Symbol.iterator in thing\n}\n\n/**\n * @param {any} thing\n * @returns {thing is AsyncIterableIterator<any> & AsyncIterator<any>}\n */\nfunction isAsyncIterable (thing) {\n  return Symbol.asyncIterator in thing\n}\n\n/**\n * @param {any} thing\n * @returns {thing is CID}\n */\nfunction isCID (thing) {\n  return CID.asCID(thing) != null\n}\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseInput (input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // CID\n  const cid = CID.asCID(input)\n\n  if (cid) {\n    yield toPin({ cid })\n    return\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input })\n    return\n  }\n\n  // { cid: CID recursive, metadata }\n  // @ts-expect-error - it still could be iterable or async iterable\n  if (input.cid != null || input.path != null) {\n    // @ts-expect-error\n    return yield toPin(input)\n  }\n\n  // Iterable<?>\n  if (isIterable(input)) {\n    const iterator = input[Symbol.iterator]()\n    const first = iterator.next()\n\n    if (first.done) {\n      return iterator\n    }\n\n    // Iterable<CID>\n    if (isCID(first.value)) {\n      yield toPin({ cid: first.value })\n      for (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // Iterable<String>\n    if (first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ path: first.value })\n      for (const path of iterator) {\n        yield toPin({ path })\n      }\n      return\n    }\n\n    // Iterable<Pinnable>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // AsyncIterable<?>\n  if (isAsyncIterable(input)) {\n    const iterator = input[Symbol.asyncIterator]()\n    const first = await iterator.next()\n    if (first.done) return iterator\n\n    // AsyncIterable<CID>\n    if (isCID(first.value)) {\n      yield toPin({ cid: first.value })\n      for await (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // AsyncIterable<String>\n    if (first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ path: first.value })\n      for await (const path of iterator) {\n        yield toPin({ path })\n      }\n      return\n    }\n\n    // AsyncIterable<{ cid: CID|String recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for await (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {Pinnable} input\n */\nfunction toPin (input) {\n  const path = input.cid || `${input.path}`\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  /** @type {Pin} */\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  }\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata\n  }\n\n  return pin\n}\n"]},"metadata":{},"sourceType":"module"}