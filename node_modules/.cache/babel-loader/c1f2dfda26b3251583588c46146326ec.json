{"ast":null,"code":"import { Token, Type } from './token.js';\nimport * as uint from './0uint.js';\nimport { decodeErrPrefix } from './common.js';\nexport function decodeNegint8(data, pos, _minor, options) {\n  return new Token(Type.negint, -1 - uint.readUint8(data, pos + 1, options), 2);\n}\nexport function decodeNegint16(data, pos, _minor, options) {\n  return new Token(Type.negint, -1 - uint.readUint16(data, pos + 1, options), 3);\n}\nexport function decodeNegint32(data, pos, _minor, options) {\n  return new Token(Type.negint, -1 - uint.readUint32(data, pos + 1, options), 5);\n}\nconst neg1b = BigInt(-1);\nconst pos1b = BigInt(1);\nexport function decodeNegint64(data, pos, _minor, options) {\n  const int = uint.readUint64(data, pos + 1, options);\n\n  if (typeof int !== 'bigint') {\n    const value = -1 - int;\n\n    if (value >= Number.MIN_SAFE_INTEGER) {\n      return new Token(Type.negint, value, 9);\n    }\n  }\n\n  if (options.allowBigInt !== true) {\n    throw new Error(`${decodeErrPrefix} integers outside of the safe integer range are not supported`);\n  }\n\n  return new Token(Type.negint, neg1b - BigInt(int), 9);\n}\nexport function encodeNegint(buf, token) {\n  const negint = token.value;\n  const unsigned = typeof negint === 'bigint' ? negint * neg1b - pos1b : negint * -1 - 1;\n  uint.encodeUintValue(buf, token.type.majorEncoded, unsigned);\n}\n\nencodeNegint.encodedSize = function encodedSize(token) {\n  const negint = token.value;\n  const unsigned = typeof negint === 'bigint' ? negint * neg1b - pos1b : negint * -1 - 1;\n\n  if (unsigned < uint.uintBoundaries[0]) {\n    return 1;\n  }\n\n  if (unsigned < uint.uintBoundaries[1]) {\n    return 2;\n  }\n\n  if (unsigned < uint.uintBoundaries[2]) {\n    return 3;\n  }\n\n  if (unsigned < uint.uintBoundaries[3]) {\n    return 5;\n  }\n\n  return 9;\n};\n\nencodeNegint.compareTokens = function compareTokens(tok1, tok2) {\n  return tok1.value < tok2.value ? 1 : tok1.value > tok2.value ? -1 : 0;\n};","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/cborg/esm/lib/1negint.js"],"names":["Token","Type","uint","decodeErrPrefix","decodeNegint8","data","pos","_minor","options","negint","readUint8","decodeNegint16","readUint16","decodeNegint32","readUint32","neg1b","BigInt","pos1b","decodeNegint64","int","readUint64","value","Number","MIN_SAFE_INTEGER","allowBigInt","Error","encodeNegint","buf","token","unsigned","encodeUintValue","type","majorEncoded","encodedSize","uintBoundaries","compareTokens","tok1","tok2"],"mappings":"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","sourcesContent":["import {\n  Token,\n  Type\n} from './token.js';\nimport * as uint from './0uint.js';\nimport { decodeErrPrefix } from './common.js';\nexport function decodeNegint8(data, pos, _minor, options) {\n  return new Token(Type.negint, -1 - uint.readUint8(data, pos + 1, options), 2);\n}\nexport function decodeNegint16(data, pos, _minor, options) {\n  return new Token(Type.negint, -1 - uint.readUint16(data, pos + 1, options), 3);\n}\nexport function decodeNegint32(data, pos, _minor, options) {\n  return new Token(Type.negint, -1 - uint.readUint32(data, pos + 1, options), 5);\n}\nconst neg1b = BigInt(-1);\nconst pos1b = BigInt(1);\nexport function decodeNegint64(data, pos, _minor, options) {\n  const int = uint.readUint64(data, pos + 1, options);\n  if (typeof int !== 'bigint') {\n    const value = -1 - int;\n    if (value >= Number.MIN_SAFE_INTEGER) {\n      return new Token(Type.negint, value, 9);\n    }\n  }\n  if (options.allowBigInt !== true) {\n    throw new Error(`${ decodeErrPrefix } integers outside of the safe integer range are not supported`);\n  }\n  return new Token(Type.negint, neg1b - BigInt(int), 9);\n}\nexport function encodeNegint(buf, token) {\n  const negint = token.value;\n  const unsigned = typeof negint === 'bigint' ? negint * neg1b - pos1b : negint * -1 - 1;\n  uint.encodeUintValue(buf, token.type.majorEncoded, unsigned);\n}\nencodeNegint.encodedSize = function encodedSize(token) {\n  const negint = token.value;\n  const unsigned = typeof negint === 'bigint' ? negint * neg1b - pos1b : negint * -1 - 1;\n  if (unsigned < uint.uintBoundaries[0]) {\n    return 1;\n  }\n  if (unsigned < uint.uintBoundaries[1]) {\n    return 2;\n  }\n  if (unsigned < uint.uintBoundaries[2]) {\n    return 3;\n  }\n  if (unsigned < uint.uintBoundaries[3]) {\n    return 5;\n  }\n  return 9;\n};\nencodeNegint.compareTokens = function compareTokens(tok1, tok2) {\n  return tok1.value < tok2.value ? 1 : tok1.value > tok2.value ? -1 : 0;\n};"]},"metadata":{},"sourceType":"module"}