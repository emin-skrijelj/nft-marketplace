{"ast":null,"code":"/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadBaseFn}\n */\nconst LOAD_BASE = name => Promise.reject(new Error(`No base found for \"${name}\"`));\n\nexport class Multibases {\n  /**\n   * @param {object} options\n   * @param {LoadBaseFn} [options.loadBase]\n   * @param {MultibaseCodec[]} options.bases\n   */\n  constructor(options) {\n    // Object with current list of active resolvers\n\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByName = {}; // Object with current list of active resolvers\n\n    /** @type {Record<string, MultibaseCodec>}} */\n\n    this._basesByPrefix = {};\n    this._loadBase = options.loadBase || LOAD_BASE; // Enable all supplied codecs\n\n    for (const base of options.bases) {\n      this.addBase(base);\n    }\n  }\n  /**\n   * Add support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n\n\n  addBase(base) {\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n      throw new Error(`Codec already exists for codec \"${base.name}\"`);\n    }\n\n    this._basesByName[base.name] = base;\n    this._basesByPrefix[base.prefix] = base;\n  }\n  /**\n   * Remove support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n\n\n  removeBase(base) {\n    delete this._basesByName[base.name];\n    delete this._basesByPrefix[base.prefix];\n  }\n  /**\n   * @param {string} nameOrPrefix\n   */\n\n\n  async getBase(nameOrPrefix) {\n    if (this._basesByName[nameOrPrefix]) {\n      return this._basesByName[nameOrPrefix];\n    }\n\n    if (this._basesByPrefix[nameOrPrefix]) {\n      return this._basesByPrefix[nameOrPrefix];\n    } // If not supported, attempt to dynamically load this codec\n\n\n    const base = await this._loadBase(nameOrPrefix);\n\n    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n      this.addBase(base);\n    }\n\n    return base;\n  }\n\n  listBases() {\n    return Object.values(this._basesByName);\n  }\n\n}","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-core-utils/src/multibases.js"],"names":["LOAD_BASE","name","Promise","reject","Error","Multibases","constructor","options","_basesByName","_basesByPrefix","_loadBase","loadBase","base","bases","addBase","prefix","removeBase","getBase","nameOrPrefix","listBases","Object","values"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMA,SAAS,GAAIC,IAAD,IAAUC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAW,sBAAqBH,IAAK,GAArC,CAAf,CAA5B;;AAEA,OAAO,MAAMI,UAAN,CAAiB;AACtB;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAEC,OAAF,EAAW;AACpB;;AACA;AACA,SAAKC,YAAL,GAAoB,EAApB,CAHoB,CAKpB;;AACA;;AACA,SAAKC,cAAL,GAAsB,EAAtB;AAEA,SAAKC,SAAL,GAAiBH,OAAO,CAACI,QAAR,IAAoBX,SAArC,CAToB,CAWpB;;AACA,SAAK,MAAMY,IAAX,IAAmBL,OAAO,CAACM,KAA3B,EAAkC;AAChC,WAAKC,OAAL,CAAaF,IAAb;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,OAAO,CAAEF,IAAF,EAAQ;AACb,QAAI,KAAKJ,YAAL,CAAkBI,IAAI,CAACX,IAAvB,KAAgC,KAAKQ,cAAL,CAAoBG,IAAI,CAACG,MAAzB,CAApC,EAAsE;AACpE,YAAM,IAAIX,KAAJ,CAAW,mCAAkCQ,IAAI,CAACX,IAAK,GAAvD,CAAN;AACD;;AAED,SAAKO,YAAL,CAAkBI,IAAI,CAACX,IAAvB,IAA+BW,IAA/B;AACA,SAAKH,cAAL,CAAoBG,IAAI,CAACG,MAAzB,IAAmCH,IAAnC;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEI,EAAAA,UAAU,CAAEJ,IAAF,EAAQ;AAChB,WAAO,KAAKJ,YAAL,CAAkBI,IAAI,CAACX,IAAvB,CAAP;AACA,WAAO,KAAKQ,cAAL,CAAoBG,IAAI,CAACG,MAAzB,CAAP;AACD;AAED;AACF;AACA;;;AACe,QAAPE,OAAO,CAAEC,YAAF,EAAgB;AAC3B,QAAI,KAAKV,YAAL,CAAkBU,YAAlB,CAAJ,EAAqC;AACnC,aAAO,KAAKV,YAAL,CAAkBU,YAAlB,CAAP;AACD;;AAED,QAAI,KAAKT,cAAL,CAAoBS,YAApB,CAAJ,EAAuC;AACrC,aAAO,KAAKT,cAAL,CAAoBS,YAApB,CAAP;AACD,KAP0B,CAS3B;;;AACA,UAAMN,IAAI,GAAG,MAAM,KAAKF,SAAL,CAAeQ,YAAf,CAAnB;;AAEA,QAAI,KAAKV,YAAL,CAAkBI,IAAI,CAACX,IAAvB,KAAgC,IAAhC,IAAwC,KAAKQ,cAAL,CAAoBG,IAAI,CAACG,MAAzB,KAAoC,IAAhF,EAAsF;AACpF,WAAKD,OAAL,CAAaF,IAAb;AACD;;AAED,WAAOA,IAAP;AACD;;AAEDO,EAAAA,SAAS,GAAI;AACX,WAAOC,MAAM,CAACC,MAAP,CAAc,KAAKb,YAAnB,CAAP;AACD;;AAvEqB","sourcesContent":["/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadBaseFn}\n */\nconst LOAD_BASE = (name) => Promise.reject(new Error(`No base found for \"${name}\"`))\n\nexport class Multibases {\n  /**\n   * @param {object} options\n   * @param {LoadBaseFn} [options.loadBase]\n   * @param {MultibaseCodec[]} options.bases\n   */\n  constructor (options) {\n    // Object with current list of active resolvers\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByName = {}\n\n    // Object with current list of active resolvers\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByPrefix = {}\n\n    this._loadBase = options.loadBase || LOAD_BASE\n\n    // Enable all supplied codecs\n    for (const base of options.bases) {\n      this.addBase(base)\n    }\n  }\n\n  /**\n   * Add support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n  addBase (base) {\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n      throw new Error(`Codec already exists for codec \"${base.name}\"`)\n    }\n\n    this._basesByName[base.name] = base\n    this._basesByPrefix[base.prefix] = base\n  }\n\n  /**\n   * Remove support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n  removeBase (base) {\n    delete this._basesByName[base.name]\n    delete this._basesByPrefix[base.prefix]\n  }\n\n  /**\n   * @param {string} nameOrPrefix\n   */\n  async getBase (nameOrPrefix) {\n    if (this._basesByName[nameOrPrefix]) {\n      return this._basesByName[nameOrPrefix]\n    }\n\n    if (this._basesByPrefix[nameOrPrefix]) {\n      return this._basesByPrefix[nameOrPrefix]\n    }\n\n    // If not supported, attempt to dynamically load this codec\n    const base = await this._loadBase(nameOrPrefix)\n\n    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n      this.addBase(base)\n    }\n\n    return base\n  }\n\n  listBases () {\n    return Object.values(this._basesByName)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}