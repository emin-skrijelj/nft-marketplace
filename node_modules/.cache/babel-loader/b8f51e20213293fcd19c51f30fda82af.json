{"ast":null,"code":"import errCode from 'err-code';\n/**\n * @param {any} input\n */\n\nexport function parseMtime(input) {\n  if (input == null) {\n    return undefined;\n  }\n  /** @type {{ secs: number, nsecs?: number } | undefined} */\n\n\n  let mtime; // { secs, nsecs }\n\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    };\n  } // UnixFS TimeSpec\n\n\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    };\n  } // process.hrtime()\n\n\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    };\n  } // Javascript Date\n\n\n  if (input instanceof Date) {\n    const ms = input.getTime();\n    const secs = Math.floor(ms / 1000);\n    mtime = {\n      secs: secs,\n      nsecs: (ms - secs * 1000) * 1000\n    };\n  }\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n   // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n     mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined;\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errCode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');\n  }\n\n  return mtime;\n}","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/lib/parse-mtime.js"],"names":["errCode","parseMtime","input","undefined","mtime","secs","nsecs","Seconds","FractionalNanoseconds","Array","isArray","Date","ms","getTime","Math","floor","Object","prototype","hasOwnProperty","call","Error"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;AAEA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAqBC,KAArB,EAA4B;AACjC,MAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,WAAOC,SAAP;AACD;AAED;;;AACA,MAAIC,KAAJ,CANiC,CAQjC;;AACA,MAAIF,KAAK,CAACG,IAAN,IAAc,IAAlB,EAAwB;AACtBD,IAAAA,KAAK,GAAG;AACNC,MAAAA,IAAI,EAAEH,KAAK,CAACG,IADN;AAENC,MAAAA,KAAK,EAAEJ,KAAK,CAACI;AAFP,KAAR;AAID,GAdgC,CAgBjC;;;AACA,MAAIJ,KAAK,CAACK,OAAN,IAAiB,IAArB,EAA2B;AACzBH,IAAAA,KAAK,GAAG;AACNC,MAAAA,IAAI,EAAEH,KAAK,CAACK,OADN;AAEND,MAAAA,KAAK,EAAEJ,KAAK,CAACM;AAFP,KAAR;AAID,GAtBgC,CAwBjC;;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcR,KAAd,CAAJ,EAA0B;AACxBE,IAAAA,KAAK,GAAG;AACNC,MAAAA,IAAI,EAAEH,KAAK,CAAC,CAAD,CADL;AAENI,MAAAA,KAAK,EAAEJ,KAAK,CAAC,CAAD;AAFN,KAAR;AAID,GA9BgC,CAgCjC;;;AACA,MAAIA,KAAK,YAAYS,IAArB,EAA2B;AACzB,UAAMC,EAAE,GAAGV,KAAK,CAACW,OAAN,EAAX;AACA,UAAMR,IAAI,GAAGS,IAAI,CAACC,KAAL,CAAWH,EAAE,GAAG,IAAhB,CAAb;AAEAR,IAAAA,KAAK,GAAG;AACNC,MAAAA,IAAI,EAAEA,IADA;AAENC,MAAAA,KAAK,EAAE,CAACM,EAAE,GAAIP,IAAI,GAAG,IAAd,IAAuB;AAFxB,KAAR;AAID;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIE,MAAI,CAACW,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCf,KAArC,EAA4C,MAA5C,CAAL,EAA0D;AACxD,WAAOD,SAAP;AACD;;AAED,MAAIC,KAAK,IAAI,IAAT,IAAiBA,KAAK,CAACE,KAAN,IAAe,IAAhC,KAAyCF,KAAK,CAACE,KAAN,GAAc,CAAd,IAAmBF,KAAK,CAACE,KAAN,GAAc,SAA1E,CAAJ,EAA0F;AACxF,UAAMN,OAAO,CAAC,IAAIoB,KAAJ,CAAU,oDAAV,CAAD,EAAkE,yBAAlE,CAAb;AACD;;AAED,SAAOhB,KAAP;AACD","sourcesContent":["import errCode from 'err-code'\n\n/**\n * @param {any} input\n */\nexport function parseMtime (input) {\n  if (input == null) {\n    return undefined\n  }\n\n  /** @type {{ secs: number, nsecs?: number } | undefined} */\n  let mtime\n\n  // { secs, nsecs }\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    }\n  }\n\n  // UnixFS TimeSpec\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    }\n  }\n\n  // process.hrtime()\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    }\n  }\n\n  // Javascript Date\n  if (input instanceof Date) {\n    const ms = input.getTime()\n    const secs = Math.floor(ms / 1000)\n\n    mtime = {\n      secs: secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n\n  // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n\n    mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errCode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS')\n  }\n\n  return mtime\n}\n"]},"metadata":{},"sourceType":"module"}