{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createWantlistForPeer = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer(peerId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({ ...options,\n        peer: peerId.toString()\n      }),\n      headers: options.headers\n    })).json();\n    return (res.Keys || []).map((\n    /** @type {{ '/': string }} */\n    k) => CID.parse(k['/']));\n  }\n\n  return wantlistForPeer;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/bitswap/wantlist-for-peer.js"],"names":["CID","configure","toUrlSearchParams","createWantlistForPeer","api","wantlistForPeer","peerId","options","res","post","signal","searchParams","peer","toString","headers","json","Keys","map","k","parse"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,qBAAqB,GAAGF,SAAS,CAACG,GAAG,IAAI;AACpD;AACF;AACA;AACE,iBAAeC,eAAf,CAAgCC,MAAhC,EAAsD;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACpD,UAAMC,GAAG,GAAG,MAAM,CAAC,MAAMJ,GAAG,CAACK,IAAJ,CAAS,kBAAT,EAA6B;AACpDC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADoC;AAEpDC,MAAAA,YAAY,EAAET,iBAAiB,CAAC,EAC9B,GAAGK,OAD2B;AAE9BK,QAAAA,IAAI,EAAEN,MAAM,CAACO,QAAP;AAFwB,OAAD,CAFqB;AAMpDC,MAAAA,OAAO,EAAEP,OAAO,CAACO;AANmC,KAA7B,CAAP,EAOdC,IAPc,EAAlB;AASA,WAAO,CAACP,GAAG,CAACQ,IAAJ,IAAY,EAAb,EAAiBC,GAAjB,CAAqB;AAAC;AAA+BC,IAAAA,CAAhC,KAAsClB,GAAG,CAACmB,KAAJ,CAAUD,CAAC,CAAC,GAAD,CAAX,CAA3D,CAAP;AACD;;AACD,SAAOb,eAAP;AACD,CAjB6C,CAAvC","sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createWantlistForPeer = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer (peerId, options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        peer: peerId.toString()\n      }),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlistForPeer\n})\n"]},"metadata":{},"sourceType":"module"}