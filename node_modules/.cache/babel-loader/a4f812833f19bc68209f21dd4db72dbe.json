{"ast":null,"code":"import { objectToCamel } from '../lib/object-to-camel.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nexport const createLocal = configure(api => {\n  /**\n   * @type {RefsAPI[\"local\"]}\n   */\n  async function* refsLocal() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await api.post('refs/local', {\n      signal: options.signal,\n      transform: objectToCamel,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    });\n    yield* res.ndjson();\n  }\n\n  return refsLocal;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/refs/local.js"],"names":["objectToCamel","configure","toUrlSearchParams","createLocal","api","refsLocal","options","res","post","signal","transform","searchParams","headers","ndjson"],"mappings":"AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAGF,SAAS,CAACG,GAAG,IAAI;AAC1C;AACF;AACA;AACE,kBAAiBC,SAAjB,GAA0C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACxC,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,YAAT,EAAuB;AACvCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADuB;AAEvCC,MAAAA,SAAS,EAAEV,aAF4B;AAGvCW,MAAAA,YAAY,EAAET,iBAAiB,CAACI,OAAD,CAHQ;AAIvCM,MAAAA,OAAO,EAAEN,OAAO,CAACM;AAJsB,KAAvB,CAAlB;AAOA,WAAQL,GAAG,CAACM,MAAJ,EAAR;AACD;;AACD,SAAOR,SAAP;AACD,CAfmC,CAA7B","sourcesContent":["import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nexport const createLocal = configure(api => {\n  /**\n   * @type {RefsAPI[\"local\"]}\n   */\n  async function * refsLocal (options = {}) {\n    const res = await api.post('refs/local', {\n      signal: options.signal,\n      transform: objectToCamel,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    yield * res.ndjson()\n  }\n  return refsLocal\n})\n"]},"metadata":{},"sourceType":"module"}