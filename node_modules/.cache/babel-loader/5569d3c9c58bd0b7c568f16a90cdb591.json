{"ast":null,"code":"'use strict';\n\nconst {\n  TimeoutError,\n  AbortError\n} = require('./error'); // @ts-expect-error\n\n\nconst {\n  Response,\n  Request,\n  Headers,\n  default: fetch\n} = require('../fetch');\n/**\n * @typedef {import('../types').FetchOptions} FetchOptions\n * @typedef {import('../types').ProgressFn} ProgressFn\n */\n\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\n\n\nconst fetchWithProgress = function (url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const request = new XMLHttpRequest();\n  request.open(options.method || 'GET', url.toString(), true);\n  const {\n    timeout,\n    headers\n  } = options;\n\n  if (timeout && timeout > 0 && timeout < Infinity) {\n    request.timeout = timeout;\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType);\n  }\n\n  if (headers) {\n    for (const [name, value] of new Headers(headers)) {\n      request.setRequestHeader(name, value);\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = () => request.abort();\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress;\n  } // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n\n\n  request.responseType = 'arraybuffer';\n  return new Promise((resolve, reject) => {\n    /**\n     * @param {Event} event\n     */\n    const handleEvent = event => {\n      switch (event.type) {\n        case 'error':\n          {\n            resolve(Response.error());\n            break;\n          }\n\n        case 'load':\n          {\n            resolve(new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            }));\n            break;\n          }\n\n        case 'timeout':\n          {\n            reject(new TimeoutError());\n            break;\n          }\n\n        case 'abort':\n          {\n            reject(new AbortError());\n            break;\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n    };\n\n    request.onerror = handleEvent;\n    request.onload = handleEvent;\n    request.ontimeout = handleEvent;\n    request.onabort = handleEvent; // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this\n    // file is a browser override so you won't get a node readable stream so ignore the error\n\n    request.send(options.body);\n  });\n};\n\nconst fetchWithStreaming = fetch;\n/**\n * @param {string | Request} url\n * @param {FetchOptions} options\n */\n\nconst fetchWith = function (url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return options.onUploadProgress != null ? fetchWithProgress(url, options) : fetchWithStreaming(url, options);\n};\n/**\n * Parse Headers from a XMLHttpRequest\n *\n * @param {string} input\n * @returns {Headers}\n */\n\n\nconst parseHeaders = input => {\n  const headers = new Headers();\n\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ');\n\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1));\n    }\n  }\n\n  return headers;\n};\n\nclass ResponseWithURL extends Response {\n  /**\n   * @param {string} url\n   * @param {BodyInit} body\n   * @param {ResponseInit} options\n   */\n  constructor(url, body, options) {\n    super(body, options);\n    Object.defineProperty(this, 'url', {\n      value: url\n    });\n  }\n\n}\n\nmodule.exports = {\n  fetch: fetchWith,\n  Request,\n  Headers\n};","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-utils/src/http/fetch.browser.js"],"names":["TimeoutError","AbortError","require","Response","Request","Headers","default","fetch","fetchWithProgress","url","options","request","XMLHttpRequest","open","method","toString","timeout","headers","Infinity","overrideMimeType","name","value","setRequestHeader","signal","onabort","abort","onUploadProgress","upload","onprogress","responseType","Promise","resolve","reject","handleEvent","event","type","error","ResponseWithURL","responseURL","response","status","statusText","parseHeaders","getAllResponseHeaders","onerror","onload","ontimeout","send","body","fetchWithStreaming","fetchWith","input","line","trim","split","index","indexOf","set","slice","constructor","Object","defineProperty","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { TimeoutError, AbortError } = require('./error')\n// @ts-expect-error\nconst { Response, Request, Headers, default: fetch } = require('../fetch')\n\n/**\n * @typedef {import('../types').FetchOptions} FetchOptions\n * @typedef {import('../types').ProgressFn} ProgressFn\n */\n\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\nconst fetchWithProgress = (url, options = {}) => {\n  const request = new XMLHttpRequest()\n  request.open(options.method || 'GET', url.toString(), true)\n\n  const { timeout, headers } = options\n\n  if (timeout && timeout > 0 && timeout < Infinity) {\n    request.timeout = timeout\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType)\n  }\n\n  if (headers) {\n    for (const [name, value] of new Headers(headers)) {\n      request.setRequestHeader(name, value)\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = () => request.abort()\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress\n  }\n\n  // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n  request.responseType = 'arraybuffer'\n\n  return new Promise((resolve, reject) => {\n    /**\n     * @param {Event} event\n     */\n    const handleEvent = (event) => {\n      switch (event.type) {\n        case 'error': {\n          resolve(Response.error())\n          break\n        }\n        case 'load': {\n          resolve(\n            new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            })\n          )\n          break\n        }\n        case 'timeout': {\n          reject(new TimeoutError())\n          break\n        }\n        case 'abort': {\n          reject(new AbortError())\n          break\n        }\n        default: {\n          break\n        }\n      }\n    }\n    request.onerror = handleEvent\n    request.onload = handleEvent\n    request.ontimeout = handleEvent\n    request.onabort = handleEvent\n\n    // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this\n    // file is a browser override so you won't get a node readable stream so ignore the error\n    request.send(options.body)\n  })\n}\n\nconst fetchWithStreaming = fetch\n\n/**\n * @param {string | Request} url\n * @param {FetchOptions} options\n */\nconst fetchWith = (url, options = {}) =>\n  (options.onUploadProgress != null)\n    ? fetchWithProgress(url, options)\n    : fetchWithStreaming(url, options)\n\n/**\n * Parse Headers from a XMLHttpRequest\n *\n * @param {string} input\n * @returns {Headers}\n */\nconst parseHeaders = (input) => {\n  const headers = new Headers()\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ')\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1))\n    }\n  }\n\n  return headers\n}\n\nclass ResponseWithURL extends Response {\n  /**\n   * @param {string} url\n   * @param {BodyInit} body\n   * @param {ResponseInit} options\n   */\n  constructor (url, body, options) {\n    super(body, options)\n    Object.defineProperty(this, 'url', { value: url })\n  }\n}\n\nmodule.exports = {\n  fetch: fetchWith,\n  Request,\n  Headers\n}\n"]},"metadata":{},"sourceType":"script"}