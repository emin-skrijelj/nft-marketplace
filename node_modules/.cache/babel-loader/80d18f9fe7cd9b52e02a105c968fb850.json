{"ast":null,"code":"import { modeToString } from '../lib/mode-to-string.js';\nimport { parseMtime } from '../lib/parse-mtime.js';\nimport { configure } from '../lib/configure.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createWrite = configure(api => {\n  /**\n   * @type {FilesAPI[\"write\"]}\n   */\n  async function write(path, input) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('files/write', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(await multipartRequest([{\n        content: input,\n        path: 'arg',\n        mode: modeToString(options.mode),\n        mtime: parseMtime(options.mtime)\n      }], controller, options.headers))\n    });\n    await res.text();\n  }\n\n  return write;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/files/write.js"],"names":["modeToString","parseMtime","configure","multipartRequest","toUrlSearchParams","abortSignal","createWrite","api","write","path","input","options","controller","AbortController","signal","res","post","searchParams","arg","streamChannels","count","length","content","mode","mtime","headers","text"],"mappings":"AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAGJ,SAAS,CAACK,GAAG,IAAI;AAC1C;AACF;AACA;AACE,iBAAeC,KAAf,CAAsBC,IAAtB,EAA4BC,KAA5B,EAAiD;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC/C;AACA,UAAMC,UAAU,GAAG,IAAIC,eAAJ,EAAnB;AACA,UAAMC,MAAM,GAAGT,WAAW,CAACO,UAAU,CAACE,MAAZ,EAAoBH,OAAO,CAACG,MAA5B,CAA1B;AAEA,UAAMC,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,aAAT,EAAwB;AACxCF,MAAAA,MADwC;AAExCG,MAAAA,YAAY,EAAEb,iBAAiB,CAAC;AAC9Bc,QAAAA,GAAG,EAAET,IADyB;AAE9BU,QAAAA,cAAc,EAAE,IAFc;AAG9BC,QAAAA,KAAK,EAAET,OAAO,CAACU,MAHe;AAI9B,WAAGV;AAJ2B,OAAD,CAFS;AAQxC,UACE,MAAMR,gBAAgB,CAAC,CAAC;AACtBmB,QAAAA,OAAO,EAAEZ,KADa;AAEtBD,QAAAA,IAAI,EAAE,KAFgB;AAGtBc,QAAAA,IAAI,EAAEvB,YAAY,CAACW,OAAO,CAACY,IAAT,CAHI;AAItBC,QAAAA,KAAK,EAAEvB,UAAU,CAACU,OAAO,CAACa,KAAT;AAJK,OAAD,CAAD,EAKlBZ,UALkB,EAKND,OAAO,CAACc,OALF,CADxB;AARwC,KAAxB,CAAlB;AAkBA,UAAMV,GAAG,CAACW,IAAJ,EAAN;AACD;;AACD,SAAOlB,KAAP;AACD,CA9BmC,CAA7B","sourcesContent":["import { modeToString } from '../lib/mode-to-string.js'\nimport { parseMtime } from '../lib/parse-mtime.js'\nimport { configure } from '../lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createWrite = configure(api => {\n  /**\n   * @type {FilesAPI[\"write\"]}\n   */\n  async function write (path, input, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('files/write', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(\n        await multipartRequest([{\n          content: input,\n          path: 'arg',\n          mode: modeToString(options.mode),\n          mtime: parseMtime(options.mtime)\n        }], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return write\n})\n"]},"metadata":{},"sourceType":"module"}