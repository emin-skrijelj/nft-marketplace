{"ast":null,"code":"'use strict';\n\nconst HTTP = require('../http');\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {{ path: string; content?: AsyncIterable<Uint8Array> }}\n */\n\n\nconst urlSource = (url, options) => {\n  return {\n    path: decodeURIComponent(new URL(url).pathname.split('/').pop() || ''),\n    content: readURLContent(url, options)\n  };\n};\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {AsyncIterable<Uint8Array>}\n */\n\n\nasync function* readURLContent(url, options) {\n  const http = new HTTP();\n  const response = await http.get(url, options);\n  yield* response.iterator();\n}\n\nmodule.exports = urlSource;","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-utils/src/files/url-source.js"],"names":["HTTP","require","urlSource","url","options","path","decodeURIComponent","URL","pathname","split","pop","content","readURLContent","http","response","get","iterator","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,SAAS,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAClC,SAAO;AACLC,IAAAA,IAAI,EAAEC,kBAAkB,CAAC,IAAIC,GAAJ,CAAQJ,GAAR,EAAaK,QAAb,CAAsBC,KAAtB,CAA4B,GAA5B,EAAiCC,GAAjC,MAA0C,EAA3C,CADnB;AAELC,IAAAA,OAAO,EAAEC,cAAc,CAACT,GAAD,EAAMC,OAAN;AAFlB,GAAP;AAID,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;;;AACA,gBAAiBQ,cAAjB,CAAiCT,GAAjC,EAAsCC,OAAtC,EAA+C;AAC7C,QAAMS,IAAI,GAAG,IAAIb,IAAJ,EAAb;AACA,QAAMc,QAAQ,GAAG,MAAMD,IAAI,CAACE,GAAL,CAASZ,GAAT,EAAcC,OAAd,CAAvB;AAEA,SAAQU,QAAQ,CAACE,QAAT,EAAR;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBhB,SAAjB","sourcesContent":["'use strict'\n\nconst HTTP = require('../http')\n\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {{ path: string; content?: AsyncIterable<Uint8Array> }}\n */\nconst urlSource = (url, options) => {\n  return {\n    path: decodeURIComponent(new URL(url).pathname.split('/').pop() || ''),\n    content: readURLContent(url, options)\n  }\n}\n\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {AsyncIterable<Uint8Array>}\n */\nasync function * readURLContent (url, options) {\n  const http = new HTTP()\n  const response = await http.get(url, options)\n\n  yield * response.iterator()\n}\n\nmodule.exports = urlSource\n"]},"metadata":{},"sourceType":"script"}