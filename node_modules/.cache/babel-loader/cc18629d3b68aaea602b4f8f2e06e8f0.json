{"ast":null,"code":"import { createRmAll } from './rm-all.js';\nimport last from 'it-last';\nimport { configure } from '../lib/configure.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {import('../types').Options} config\n */\n\nexport const createRm = config => {\n  const all = createRmAll(config);\n  return configure(() => {\n    /**\n     * @type {PinAPI[\"rm\"]}\n     */\n    async function rm(path) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // @ts-expect-error last can return undefined\n      return last(all([{\n        path,\n        ...options\n      }], options));\n    }\n\n    return rm;\n  })(config);\n};","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/pin/rm.js"],"names":["createRmAll","last","configure","createRm","config","all","rm","path","options"],"mappings":"AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAIC,MAAD,IAAY;AAClC,QAAMC,GAAG,GAAGL,WAAW,CAACI,MAAD,CAAvB;AAEA,SAAOF,SAAS,CAAC,MAAM;AACrB;AACJ;AACA;AACI,mBAAeI,EAAf,CAAmBC,IAAnB,EAAuC;AAAA,UAAdC,OAAc,uEAAJ,EAAI;AACrC;AACA,aAAOP,IAAI,CAACI,GAAG,CAAC,CAAC;AACfE,QAAAA,IADe;AAEf,WAAGC;AAFY,OAAD,CAAD,EAGXA,OAHW,CAAJ,CAAX;AAID;;AACD,WAAOF,EAAP;AACD,GAZe,CAAT,CAYJF,MAZI,CAAP;AAaD,CAhBM","sourcesContent":["import { createRmAll } from './rm-all.js'\nimport last from 'it-last'\nimport { configure } from '../lib/configure.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {import('../types').Options} config\n */\nexport const createRm = (config) => {\n  const all = createRmAll(config)\n\n  return configure(() => {\n    /**\n     * @type {PinAPI[\"rm\"]}\n     */\n    async function rm (path, options = {}) {\n      // @ts-expect-error last can return undefined\n      return last(all([{\n        path,\n        ...options\n      }], options))\n    }\n    return rm\n  })(config)\n}\n"]},"metadata":{},"sourceType":"module"}