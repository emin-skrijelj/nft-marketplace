{"ast":null,"code":"import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { base64url } from 'multiformats/bases/base64';\n/* HTTP RPC:\n * - wraps binary data in multibase. base64url is used to avoid issues\n *   when a binary data is passed as search param in URL.\n *   Historical context: https://github.com/ipfs/go-ipfs/issues/7939\n *   Multibase wrapping introduced in: https://github.com/ipfs/go-ipfs/pull/8183\n */\n\n/**\n * @param {Array<string>} strings\n * @returns {Array<string>} strings\n */\n\nconst rpcArrayToTextArray = strings => {\n  if (Array.isArray(strings)) {\n    return strings.map(rpcToText);\n  }\n\n  return strings;\n};\n/**\n * @param {string} mb\n * @returns {string}\n */\n\n\nconst rpcToText = mb => uint8ArrayToString(rpcToBytes(mb));\n/**\n * @param {string} mb\n * @returns {Uint8Array}\n */\n\n\nconst rpcToBytes = mb => base64url.decode(mb);\n/**\n * @param {string} mb\n * @returns {bigint}\n */\n\n\nconst rpcToBigInt = mb => BigInt(`0x${uint8ArrayToString(base64url.decode(mb), 'base16')}`);\n/**\n * @param {string} text\n * @returns {string}\n */\n\n\nconst textToUrlSafeRpc = text => base64url.encode(uint8ArrayFromString(text));\n\nexport { rpcArrayToTextArray, rpcToText, rpcToBytes, rpcToBigInt, textToUrlSafeRpc };","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/lib/http-rpc-wire-format.js"],"names":["fromString","uint8ArrayFromString","toString","uint8ArrayToString","base64url","rpcArrayToTextArray","strings","Array","isArray","map","rpcToText","mb","rpcToBytes","decode","rpcToBigInt","BigInt","textToUrlSafeRpc","text","encode"],"mappings":"AAAA,SAASA,UAAU,IAAIC,oBAAvB,QAAmD,yBAAnD;AACA,SAASC,QAAQ,IAAIC,kBAArB,QAA+C,uBAA/C;AACA,SAASC,SAAT,QAA0B,2BAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,MAAMC,mBAAmB,GAAGC,OAAO,IAAI;AACrC,MAAIC,KAAK,CAACC,OAAN,CAAcF,OAAd,CAAJ,EAA4B;AAC1B,WAAOA,OAAO,CAACG,GAAR,CAAYC,SAAZ,CAAP;AACD;;AACD,SAAOJ,OAAP;AACD,CALD;AAOA;AACA;AACA;AACA;;;AACA,MAAMI,SAAS,GAAGC,EAAE,IAAIR,kBAAkB,CAACS,UAAU,CAACD,EAAD,CAAX,CAA1C;AAEA;AACA;AACA;AACA;;;AACA,MAAMC,UAAU,GAAGD,EAAE,IAAIP,SAAS,CAACS,MAAV,CAAiBF,EAAjB,CAAzB;AAEA;AACA;AACA;AACA;;;AACA,MAAMG,WAAW,GAAGH,EAAE,IAAII,MAAM,CAAE,KAAIZ,kBAAkB,CAACC,SAAS,CAACS,MAAV,CAAiBF,EAAjB,CAAD,EAAuB,QAAvB,CAAiC,EAAzD,CAAhC;AAEA;AACA;AACA;AACA;;;AACA,MAAMK,gBAAgB,GAAGC,IAAI,IAAIb,SAAS,CAACc,MAAV,CAAiBjB,oBAAoB,CAACgB,IAAD,CAArC,CAAjC;;AAEA,SAASZ,mBAAT,EAA8BK,SAA9B,EAAyCE,UAAzC,EAAqDE,WAArD,EAAkEE,gBAAlE","sourcesContent":["import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { base64url } from 'multiformats/bases/base64'\n\n/* HTTP RPC:\n * - wraps binary data in multibase. base64url is used to avoid issues\n *   when a binary data is passed as search param in URL.\n *   Historical context: https://github.com/ipfs/go-ipfs/issues/7939\n *   Multibase wrapping introduced in: https://github.com/ipfs/go-ipfs/pull/8183\n */\n\n/**\n * @param {Array<string>} strings\n * @returns {Array<string>} strings\n */\nconst rpcArrayToTextArray = strings => {\n  if (Array.isArray(strings)) {\n    return strings.map(rpcToText)\n  }\n  return strings\n}\n\n/**\n * @param {string} mb\n * @returns {string}\n */\nconst rpcToText = mb => uint8ArrayToString(rpcToBytes(mb))\n\n/**\n * @param {string} mb\n * @returns {Uint8Array}\n */\nconst rpcToBytes = mb => base64url.decode(mb)\n\n/**\n * @param {string} mb\n * @returns {bigint}\n */\nconst rpcToBigInt = mb => BigInt(`0x${uint8ArrayToString(base64url.decode(mb), 'base16')}`)\n\n/**\n * @param {string} text\n * @returns {string}\n */\nconst textToUrlSafeRpc = text => base64url.encode(uint8ArrayFromString(text))\n\nexport { rpcArrayToTextArray, rpcToText, rpcToBytes, rpcToBigInt, textToUrlSafeRpc }\n"]},"metadata":{},"sourceType":"module"}