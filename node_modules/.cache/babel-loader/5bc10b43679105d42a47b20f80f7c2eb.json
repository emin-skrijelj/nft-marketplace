{"ast":null,"code":"/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar _DefaultMultiaddr_string, _DefaultMultiaddr_tuples, _DefaultMultiaddr_stringTuples, _a;\n\nimport * as codec from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport varint from 'varint';\nimport { CID } from 'multiformats/cid';\nimport { base58btc } from 'multiformats/bases/base58';\nimport errCode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst DNS_CODES = [getProtocol('dns').code, getProtocol('dns4').code, getProtocol('dns6').code, getProtocol('dnsaddr').code];\n/**\n * All configured {@link Resolver}s\n */\n\nexport const resolvers = new Map();\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\n\nexport function fromNodeAddress(addr, transport) {\n  if (addr == null) {\n    throw new Error('requires node address object');\n  }\n\n  if (transport == null) {\n    throw new Error('requires transport protocol');\n  }\n\n  let ip;\n  let host = addr.address;\n\n  switch (addr.family) {\n    case 4:\n      ip = 'ip4';\n      break;\n\n    case 6:\n      ip = 'ip6';\n\n      if (host.includes('%')) {\n        const parts = host.split('%');\n\n        if (parts.length !== 2) {\n          throw Error('Multiple ip6 zones in multiaddr');\n        }\n\n        host = parts[0];\n        const zone = parts[1];\n        ip = `/ip6zone/${zone}/ip6`;\n      }\n\n      break;\n\n    default:\n      throw Error('Invalid addr family, should be 4 or 6.');\n  }\n\n  return new DefaultMultiaddr('/' + [ip, host, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\n\nexport function isName(addr) {\n  if (!isMultiaddr(addr)) {\n    return false;\n  } // if a part of the multiaddr is resolvable, then return true\n\n\n  return addr.protos().some(proto => proto.resolvable);\n}\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\n\nexport function isMultiaddr(value) {\n  return Boolean(value?.[symbol]);\n}\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\n\nclass DefaultMultiaddr {\n  constructor(addr) {\n    _DefaultMultiaddr_string.set(this, void 0);\n\n    _DefaultMultiaddr_tuples.set(this, void 0);\n\n    _DefaultMultiaddr_stringTuples.set(this, void 0);\n\n    this[_a] = true; // default\n\n    if (addr == null) {\n      addr = '';\n    }\n\n    if (addr instanceof Uint8Array) {\n      this.bytes = codec.fromBytes(addr);\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n      }\n\n      this.bytes = codec.fromString(addr);\n    } else if (isMultiaddr(addr)) {\n      // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr');\n    }\n  }\n\n  toString() {\n    if (__classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\") == null) {\n      __classPrivateFieldSet(this, _DefaultMultiaddr_string, codec.bytesToString(this.bytes), \"f\");\n    }\n\n    return __classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\");\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n  toOptions() {\n    let family;\n    let transport;\n    let host;\n    let port;\n    let zone = '';\n    const tcp = getProtocol('tcp');\n    const udp = getProtocol('udp');\n    const ip4 = getProtocol('ip4');\n    const ip6 = getProtocol('ip6');\n    const dns6 = getProtocol('dns6');\n    const ip6zone = getProtocol('ip6zone');\n\n    for (const [code, value] of this.stringTuples()) {\n      if (code === ip6zone.code) {\n        zone = `%${value ?? ''}`;\n      } // default to https when protocol & port are omitted from DNS addrs\n\n\n      if (DNS_CODES.includes(code)) {\n        transport = tcp.name;\n        port = 443;\n        host = `${value ?? ''}${zone}`;\n        family = code === dns6.code ? 6 : 4;\n      }\n\n      if (code === tcp.code || code === udp.code) {\n        transport = getProtocol(code).name;\n        port = parseInt(value ?? '');\n      }\n\n      if (code === ip4.code || code === ip6.code) {\n        transport = getProtocol(code).name;\n        host = `${value ?? ''}${zone}`;\n        family = code === ip6.code ? 6 : 4;\n      }\n    }\n\n    if (family == null || transport == null || host == null || port == null) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n    }\n\n    const opts = {\n      family,\n      host,\n      transport,\n      port\n    };\n    return opts;\n  }\n\n  protos() {\n    return this.protoCodes().map(code => Object.assign({}, getProtocol(code)));\n  }\n\n  protoCodes() {\n    const codes = [];\n    const buf = this.bytes;\n    let i = 0;\n\n    while (i < buf.length) {\n      const code = varint.decode(buf, i);\n      const n = varint.decode.bytes ?? 0;\n      const p = getProtocol(code);\n      const size = codec.sizeForAddr(p, buf.slice(i + n));\n      i += size + n;\n      codes.push(code);\n    }\n\n    return codes;\n  }\n\n  protoNames() {\n    return this.protos().map(proto => proto.name);\n  }\n\n  tuples() {\n    if (__classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\") == null) {\n      __classPrivateFieldSet(this, _DefaultMultiaddr_tuples, codec.bytesToTuples(this.bytes), \"f\");\n    }\n\n    return __classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\");\n  }\n\n  stringTuples() {\n    if (__classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\") == null) {\n      __classPrivateFieldSet(this, _DefaultMultiaddr_stringTuples, codec.tuplesToStringTuples(this.tuples()), \"f\");\n    }\n\n    return __classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\");\n  }\n\n  encapsulate(addr) {\n    addr = new DefaultMultiaddr(addr);\n    return new DefaultMultiaddr(this.toString() + addr.toString());\n  }\n\n  decapsulate(addr) {\n    const addrString = addr.toString();\n    const s = this.toString();\n    const i = s.lastIndexOf(addrString);\n\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n    }\n\n    return new DefaultMultiaddr(s.slice(0, i));\n  }\n\n  decapsulateCode(code) {\n    const tuples = this.tuples();\n\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n      }\n    }\n\n    return this;\n  }\n\n  getPeerId() {\n    try {\n      const tuples = this.stringTuples().filter(tuple => {\n        if (tuple[0] === names.ipfs.code) {\n          return true;\n        }\n\n        return false;\n      }); // Get the last ipfs tuple ['ipfs', 'peerid string']\n\n      const tuple = tuples.pop();\n\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1]; // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n        } // try to parse peer id as CID\n\n\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n      }\n\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  getPath() {\n    let path = null;\n\n    try {\n      path = this.stringTuples().filter(tuple => {\n        const proto = getProtocol(tuple[0]);\n\n        if (proto.path === true) {\n          return true;\n        }\n\n        return false;\n      })[0][1];\n\n      if (path == null) {\n        path = null;\n      }\n    } catch {\n      path = null;\n    }\n\n    return path;\n  }\n\n  equals(addr) {\n    return uint8ArrayEquals(this.bytes, addr.bytes);\n  }\n\n  async resolve(options) {\n    const resolvableProto = this.protos().find(p => p.resolvable); // Multiaddr is not resolvable?\n\n    if (resolvableProto == null) {\n      return [this];\n    }\n\n    const resolver = resolvers.get(resolvableProto.name);\n\n    if (resolver == null) {\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER');\n    }\n\n    const addresses = await resolver(this, options);\n    return addresses.map(a => new DefaultMultiaddr(a));\n  }\n\n  nodeAddress() {\n    const options = this.toOptions();\n\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n    }\n\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    };\n  }\n\n  isThinWaistAddress(addr) {\n    const protos = (addr ?? this).protos();\n\n    if (protos.length !== 2) {\n      return false;\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false;\n    }\n\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Returns Multiaddr as a human-readable string\n   * https://nodejs.org/api/util.html#utilinspectcustom\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n   * ```\n   */\n\n\n  [(_DefaultMultiaddr_string = new WeakMap(), _DefaultMultiaddr_tuples = new WeakMap(), _DefaultMultiaddr_stringTuples = new WeakMap(), _a = symbol, inspect)]() {\n    return `Multiaddr(${codec.bytesToString(this.bytes)})`;\n  }\n\n}\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\n\n\nexport function multiaddr(addr) {\n  return new DefaultMultiaddr(addr);\n}\nexport { getProtocol as protocols };","map":{"version":3,"mappings":"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","names":["codec","getProtocol","names","varint","CID","base58btc","errCode","toString","uint8ArrayToString","equals","uint8ArrayEquals","inspect","Symbol","for","DNS_CODES","code","resolvers","Map","symbol","fromNodeAddress","addr","transport","Error","ip","host","address","family","includes","parts","split","length","zone","DefaultMultiaddr","port","join","isName","isMultiaddr","protos","some","proto","resolvable","value","Boolean","constructor","_DefaultMultiaddr_string","_DefaultMultiaddr_tuples","_DefaultMultiaddr_stringTuples","Uint8Array","bytes","fromBytes","charAt","fromString","__classPrivateFieldGet","__classPrivateFieldSet","bytesToString","toJSON","toOptions","tcp","udp","ip4","ip6","dns6","ip6zone","stringTuples","name","parseInt","opts","protoCodes","map","Object","assign","codes","buf","i","decode","n","p","size","sizeForAddr","slice","push","protoNames","tuples","bytesToTuples","tuplesToStringTuples","encapsulate","decapsulate","addrString","s","lastIndexOf","decapsulateCode","tuplesToBytes","getPeerId","filter","tuple","ipfs","pop","peerIdStr","parse","multihash","e","getPath","path","resolve","options","resolvableProto","find","resolver","get","addresses","a","nodeAddress","isThinWaistAddress","multiaddr","protocols"],"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-core-utils/node_modules/@multiformats/multiaddr/src/index.ts"],"sourcesContent":["/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\n\nimport * as codec from './codec.js'\nimport { getProtocol, names } from './protocols-table.js'\nimport varint from 'varint'\nimport { CID } from 'multiformats/cid'\nimport { base58btc } from 'multiformats/bases/base58'\nimport errCode from 'err-code'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\n\nconst DNS_CODES = [\n  getProtocol('dns').code,\n  getProtocol('dns4').code,\n  getProtocol('dns6').code,\n  getProtocol('dnsaddr').code\n]\n\n/**\n * Protocols are present in the protocol table\n */\nexport interface Protocol {\n  code: number\n  size: number\n  name: string\n  resolvable?: boolean | undefined\n  path?: boolean | undefined\n}\n\n/**\n * A plain JavaScript object representation of a {@link Multiaddr}\n */\nexport interface MultiaddrObject {\n  family: 4 | 6\n  host: string\n  transport: string\n  port: number\n}\n\n/**\n * A NodeAddress is an IPv4/IPv6 address/TCP port combination\n */\nexport interface NodeAddress {\n  family: 4 | 6\n  address: string\n  port: number\n}\n\n/**\n * These types can be parsed into a {@link Multiaddr} object\n */\nexport type MultiaddrInput = string | Multiaddr | Uint8Array | null\n\n/**\n * A Resolver is a function that takes a {@link Multiaddr} and resolves it into one\n * or more string representations of that {@link Multiaddr}.\n */\nexport interface Resolver { (addr: Multiaddr, options?: AbortOptions): Promise<string[]> }\n\n/**\n * A code/value pair\n */\nexport type Tuple = [number, Uint8Array?]\n\n/**\n * A code/value pair with the value as a string\n */\nexport type StringTuple = [number, string?]\n\n/**\n * Allows aborting long-lived operations\n */\nexport interface AbortOptions {\n  signal?: AbortSignal\n}\n\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map<string, Resolver>()\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr')\n\nexport interface Multiaddr {\n  bytes: Uint8Array\n\n  /**\n   * Returns Multiaddr as a String\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toString: () => string\n\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * JSON.stringify(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toJSON: () => string\n\n  /**\n   * Returns Multiaddr as a convinient options object to be used with net.createConnection\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\n   * ```\n   */\n  toOptions: () => MultiaddrObject\n\n  /**\n   * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n   * left-to-right order. Each object contains the protocol code, protocol name,\n   * and the size of its address space in bits.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n   * // [ { code: 4, size: 32, name: 'ip4' },\n   * //   { code: 6, size: 16, name: 'tcp' } ]\n   * ```\n   */\n  protos: () => Protocol[]\n\n  /**\n   * Returns the codes of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n   * // [ 4, 6 ]\n   * ```\n   */\n  protoCodes: () => number[]\n\n  /**\n   * Returns the names of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n   * // [ 'ip4', 'tcp' ]\n   * ```\n   */\n  protoNames: () => string[]\n\n  /**\n   * Returns a tuple of parts\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').tuples()\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n   * ```\n   */\n  tuples: () => Tuple[]\n\n  /**\n   * Returns a tuple of string/number parts\n   * - tuples[][0] = code of protocol\n   * - tuples[][1] = contents of address\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').stringTuples()\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\n   * ```\n   */\n  stringTuples: () => StringTuple[]\n\n  /**\n   * Encapsulates a Multiaddr in another Multiaddr\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh3.toString()\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n   * ```\n   *\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\n   */\n  encapsulate: (addr: MultiaddrInput) => Multiaddr\n\n  /**\n   * Decapsulates a Multiaddr from another Multiaddr\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh3.decapsulate(mh2).toString()\n   * // '/ip4/8.8.8.8/tcp/1080'\n   * ```\n   *\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\n   */\n  decapsulate: (addr: Multiaddr | string) => Multiaddr\n\n  /**\n   * A more reliable version of `decapsulate` if you are targeting a\n   * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\n   * If the code is not present, the original `Multiaddr` is returned.\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const addr = multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n   * // Multiaddr(/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC)\n   *\n   * addr.decapsulateCode(421).toString()\n   * // '/ip4/0.0.0.0/tcp/8080'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n   * // '/ip4/127.0.0.1/tcp/8080'\n   * ```\n   */\n  decapsulateCode: (code: number) => Multiaddr\n\n  /**\n   * Extract the peerId if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string)\n   *\n   * // should return QmValidBase58string or null if the id is missing or invalid\n   * const peerId = mh1.getPeerId()\n   * ```\n   */\n  getPeerId: () => string | null\n\n  /**\n   * Extract the path if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock)\n   *\n   * // should return utf8 string or null if the id is missing or invalid\n   * const path = mh1.getPath()\n   * ```\n   */\n  getPath: () => string | null\n\n  /**\n   * Checks if two Multiaddrs are the same\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh1.equals(mh1)\n   * // true\n   *\n   * mh1.equals(mh2)\n   * // false\n   * ```\n   */\n  equals: (addr: { bytes: Uint8Array }) => boolean\n\n  /**\n   * Resolve multiaddr if containing resolvable hostname.\n   *\n   * @example\n   * ```js\n   * import { multiaddr, resolvers } from '@multiformats/multiaddr'\n   *\n   * resolvers.set('dnsaddr', resolverFunction)\n   * const mh1 = multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\n   * const resolvedMultiaddrs = await mh1.resolve()\n   * // [\n   * //   Multiaddr(/ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb),\n   * //   Multiaddr(/ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb),\n   * //   Multiaddr(/ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb)\n   * // ]\n   * ```\n   */\n  resolve: (options?: AbortOptions) => Promise<Multiaddr[]>\n\n  /**\n   * Gets a Multiaddrs node-friendly address object. Note that protocol information\n   * is left out: in Node (and most network systems) the protocol is unknowable\n   * given only the address.\n   *\n   * Has to be a ThinWaist Address, otherwise throws error\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n   * // {family: 4, address: '127.0.0.1', port: 4001}\n   * ```\n   */\n  nodeAddress: () => NodeAddress\n\n  /**\n   * Returns if a Multiaddr is a Thin Waist address or not.\n   *\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\n   *\n   * `{IPv4, IPv6}/{TCP, UDP}`\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   * const mh2 = multiaddr('/ip4/192.168.2.1/tcp/5001')\n   * // Multiaddr(/ip4/192.168.2.1/tcp/5001)\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001)\n   * const mh4 = multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a)\n   * mh1.isThinWaistAddress()\n   * // true\n   * mh2.isThinWaistAddress()\n   * // true\n   * mh3.isThinWaistAddress()\n   * // false\n   * mh4.isThinWaistAddress()\n   * // false\n   * ```\n   */\n  isThinWaistAddress: (addr?: Multiaddr) => boolean\n}\n\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress (addr: NodeAddress, transport: string): Multiaddr {\n  if (addr == null) {\n    throw new Error('requires node address object')\n  }\n  if (transport == null) {\n    throw new Error('requires transport protocol')\n  }\n  let ip: string | undefined\n  let host = addr.address\n  switch (addr.family) {\n    case 4:\n      ip = 'ip4'\n      break\n    case 6:\n      ip = 'ip6'\n\n      if (host.includes('%')) {\n        const parts = host.split('%')\n\n        if (parts.length !== 2) {\n          throw Error('Multiple ip6 zones in multiaddr')\n        }\n\n        host = parts[0]\n        const zone = parts[1]\n        ip = `/ip6zone/${zone}/ip6`\n      }\n      break\n    default:\n      throw Error('Invalid addr family, should be 4 or 6.')\n  }\n  return new DefaultMultiaddr('/' + [ip, host, transport, addr.port].join('/'))\n}\n\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName (addr: Multiaddr): boolean {\n  if (!isMultiaddr(addr)) {\n    return false\n  }\n\n  // if a part of the multiaddr is resolvable, then return true\n  return addr.protos().some((proto) => proto.resolvable)\n}\n\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr (value: any): value is Multiaddr {\n  return Boolean(value?.[symbol])\n}\n\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nclass DefaultMultiaddr implements Multiaddr {\n  public bytes: Uint8Array\n  #string?: string\n  #tuples?: Tuple[]\n  #stringTuples?: StringTuple[]\n\n  [symbol]: boolean = true\n\n  constructor (addr?: MultiaddrInput) {\n    // default\n    if (addr == null) {\n      addr = ''\n    }\n\n    if (addr instanceof Uint8Array) {\n      this.bytes = codec.fromBytes(addr)\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\n      }\n      this.bytes = codec.fromString(addr)\n    } else if (isMultiaddr(addr)) { // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes) // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr')\n    }\n  }\n\n  toString (): string {\n    if (this.#string == null) {\n      this.#string = codec.bytesToString(this.bytes)\n    }\n\n    return this.#string\n  }\n\n  toJSON (): string {\n    return this.toString()\n  }\n\n  toOptions (): MultiaddrObject {\n    let family: 4 | 6 | undefined\n    let transport: string | undefined\n    let host: string | undefined\n    let port: number | undefined\n    let zone = ''\n\n    const tcp = getProtocol('tcp')\n    const udp = getProtocol('udp')\n    const ip4 = getProtocol('ip4')\n    const ip6 = getProtocol('ip6')\n    const dns6 = getProtocol('dns6')\n    const ip6zone = getProtocol('ip6zone')\n\n    for (const [code, value] of this.stringTuples()) {\n      if (code === ip6zone.code) {\n        zone = `%${value ?? ''}`\n      }\n\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(code)) {\n        transport = tcp.name\n        port = 443\n        host = `${value ?? ''}${zone}`\n        family = code === dns6.code ? 6 : 4\n      }\n\n      if (code === tcp.code || code === udp.code) {\n        transport = getProtocol(code).name\n        port = parseInt(value ?? '')\n      }\n\n      if (code === ip4.code || code === ip6.code) {\n        transport = getProtocol(code).name\n        host = `${value ?? ''}${zone}`\n        family = code === ip6.code ? 6 : 4\n      }\n    }\n\n    if (family == null || transport == null || host == null || port == null) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".')\n    }\n\n    const opts: MultiaddrObject = {\n      family,\n      host,\n      transport,\n      port\n    }\n\n    return opts\n  }\n\n  protos (): Protocol[] {\n    return this.protoCodes().map(code => Object.assign({}, getProtocol(code)))\n  }\n\n  protoCodes (): number[] {\n    const codes: number[] = []\n    const buf = this.bytes\n    let i = 0\n    while (i < buf.length) {\n      const code = varint.decode(buf, i)\n      const n = varint.decode.bytes ?? 0\n\n      const p = getProtocol(code)\n      const size = codec.sizeForAddr(p, buf.slice(i + n))\n\n      i += (size + n)\n      codes.push(code)\n    }\n\n    return codes\n  }\n\n  protoNames (): string[] {\n    return this.protos().map(proto => proto.name)\n  }\n\n  tuples (): Array<[number, Uint8Array?]> {\n    if (this.#tuples == null) {\n      this.#tuples = codec.bytesToTuples(this.bytes)\n    }\n\n    return this.#tuples\n  }\n\n  stringTuples (): Array<[number, string?]> {\n    if (this.#stringTuples == null) {\n      this.#stringTuples = codec.tuplesToStringTuples(this.tuples())\n    }\n\n    return this.#stringTuples\n  }\n\n  encapsulate (addr: MultiaddrInput): Multiaddr {\n    addr = new DefaultMultiaddr(addr)\n    return new DefaultMultiaddr(this.toString() + addr.toString())\n  }\n\n  decapsulate (addr: Multiaddr | string): Multiaddr {\n    const addrString = addr.toString()\n    const s = this.toString()\n    const i = s.lastIndexOf(addrString)\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`)\n    }\n    return new DefaultMultiaddr(s.slice(0, i))\n  }\n\n  decapsulateCode (code: number): Multiaddr {\n    const tuples = this.tuples()\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)))\n      }\n    }\n    return this\n  }\n\n  getPeerId (): string | null {\n    try {\n      const tuples = this.stringTuples().filter((tuple) => {\n        if (tuple[0] === names.ipfs.code) {\n          return true\n        }\n        return false\n      })\n\n      // Get the last ipfs tuple ['ipfs', 'peerid string']\n      const tuple = tuples.pop()\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1]\n\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc')\n        }\n\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc')\n      }\n\n      return null\n    } catch (e) {\n      return null\n    }\n  }\n\n  getPath (): string | null {\n    let path = null\n    try {\n      path = this.stringTuples().filter((tuple) => {\n        const proto = getProtocol(tuple[0])\n        if (proto.path === true) {\n          return true\n        }\n        return false\n      })[0][1]\n\n      if (path == null) {\n        path = null\n      }\n    } catch {\n      path = null\n    }\n    return path\n  }\n\n  equals (addr: { bytes: Uint8Array }): boolean {\n    return uint8ArrayEquals(this.bytes, addr.bytes)\n  }\n\n  async resolve (options?: AbortOptions): Promise<Multiaddr[]> {\n    const resolvableProto = this.protos().find((p) => p.resolvable)\n\n    // Multiaddr is not resolvable?\n    if (resolvableProto == null) {\n      return [this]\n    }\n\n    const resolver = resolvers.get(resolvableProto.name)\n    if (resolver == null) {\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER')\n    }\n\n    const addresses = await resolver(this, options)\n    return addresses.map((a) => new DefaultMultiaddr(a))\n  }\n\n  nodeAddress (): NodeAddress {\n    const options = this.toOptions()\n\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`)\n    }\n\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    }\n  }\n\n  isThinWaistAddress (addr?: Multiaddr): boolean {\n    const protos = (addr ?? this).protos()\n\n    if (protos.length !== 2) {\n      return false\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string\n   * https://nodejs.org/api/util.html#utilinspectcustom\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n   * ```\n   */\n  [inspect] (): string {\n    return `Multiaddr(${codec.bytesToString(this.bytes)})`\n  }\n}\n\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr (addr?: MultiaddrInput): Multiaddr {\n  return new DefaultMultiaddr(addr)\n}\n\nexport { getProtocol as protocols }\n"]},"metadata":{},"sourceType":"module"}