{"ast":null,"code":"import { objectToCamel } from '../lib/object-to-camel.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createRename = configure(api => {\n  /**\n   * @type {KeyAPI[\"rename\"]}\n   */\n  async function rename(oldName, newName) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const res = await api.post('key/rename', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [oldName, newName],\n        ...options\n      }),\n      headers: options.headers\n    }); // @ts-expect-error server output is not typed\n\n    return objectToCamel(await res.json());\n  }\n\n  return rename;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/key/rename.js"],"names":["objectToCamel","configure","toUrlSearchParams","createRename","api","rename","oldName","newName","options","res","post","signal","searchParams","arg","headers","json"],"mappings":"AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAGF,SAAS,CAACG,GAAG,IAAI;AAC3C;AACF;AACA;AACE,iBAAeC,MAAf,CAAuBC,OAAvB,EAAgCC,OAAhC,EAAuD;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACrD,UAAMC,GAAG,GAAG,MAAML,GAAG,CAACM,IAAJ,CAAS,YAAT,EAAuB;AACvCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADuB;AAEvCC,MAAAA,YAAY,EAAEV,iBAAiB,CAAC;AAC9BW,QAAAA,GAAG,EAAE,CACHP,OADG,EAEHC,OAFG,CADyB;AAK9B,WAAGC;AAL2B,OAAD,CAFQ;AASvCM,MAAAA,OAAO,EAAEN,OAAO,CAACM;AATsB,KAAvB,CAAlB,CADqD,CAarD;;AACA,WAAOd,aAAa,CAAC,MAAMS,GAAG,CAACM,IAAJ,EAAP,CAApB;AACD;;AACD,SAAOV,MAAP;AACD,CArBoC,CAA9B","sourcesContent":["import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createRename = configure(api => {\n  /**\n   * @type {KeyAPI[\"rename\"]}\n   */\n  async function rename (oldName, newName, options = {}) {\n    const res = await api.post('key/rename', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          oldName,\n          newName\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return rename\n})\n"]},"metadata":{},"sourceType":"module"}