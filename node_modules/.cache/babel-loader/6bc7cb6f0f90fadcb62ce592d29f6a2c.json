{"ast":null,"code":"var _jsxFileName = \"/home/legasi/nft-marketplace/src/frontend/components/Create.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport { Row, Form, Button } from 'react-bootstrap';\nimport { create } from 'pinata-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pinataApiKey = 'a0c524e05dec455b2804'; // Replace with your Pinata API Key\n\nconst pinataSecretApiKey = 'bbd485dfa74d344556e14ebda05813bec33a1da54b16420f59f166d5420321d3'; // Replace with your Pinata Secret API Key\n\nconst client = create(pinataApiKey, pinataSecretApiKey);\n\nconst Create = _ref => {\n  _s();\n\n  let {\n    marketplace,\n    nft\n  } = _ref;\n  const [image, setImage] = useState('');\n  const [price, setPrice] = useState(null);\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n\n  const uploadToPinata = async file => {\n    try {\n      const result = await client.pinFileToIPFS(file);\n      console.log(result);\n      setImage(result.ipfsUrl);\n    } catch (error) {\n      console.log('Pinata image upload error:', error);\n    }\n  };\n\n  const createNFT = async () => {\n    if (!image || !price || !name || !description) return;\n\n    try {\n      const metadata = {\n        name,\n        description,\n        image,\n        price\n      };\n      const result = await client.pinJSONToIPFS(metadata);\n      const metadataURI = `https://gateway.pinata.cloud/ipfs/${result.IpfsHash}`;\n      await mintThenList(metadataURI);\n    } catch (error) {\n      console.log('Pinata metadata upload error:', error);\n    }\n  };\n\n  const mintThenList = async result => {\n    const uri = `https://ipfs.infura.io/ipfs/${result.path}`;\n    await (await nft.mint(uri)).wait();\n    const id = await nft.tokenCount();\n    await (await nft.setApprovalForAll(marketplace.address, true)).wait();\n    const listingPrice = ethers.utils.parseEther(price.toString());\n    await (await marketplace.makeItem(nft.address, id, listingPrice)).wait();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 mx-auto\",\n        style: {\n          maxWidth: '1000px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content mx-auto\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"g-4\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"file\",\n              required: true,\n              name: \"file\",\n              onChange: uploadToIPFS\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setName(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"text\",\n              placeholder: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setDescription(e.target.value),\n              size: \"lg\",\n              required: true,\n              as: \"textarea\",\n              placeholder: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setPrice(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"number\",\n              placeholder: \"Price in ETH\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-grid px-0\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: createNFT,\n                variant: \"primary\",\n                size: \"lg\",\n                children: \"Create & List NFT!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Create, \"CejF301mm3S45QBEXO/SVXCwDzQ=\");\n\n_c = Create;\nexport default Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"sources":["/home/legasi/nft-marketplace/src/frontend/components/Create.js"],"names":["useState","ethers","Row","Form","Button","create","pinataApiKey","pinataSecretApiKey","client","Create","marketplace","nft","image","setImage","price","setPrice","name","setName","description","setDescription","uploadToPinata","file","result","pinFileToIPFS","console","log","ipfsUrl","error","createNFT","metadata","pinJSONToIPFS","metadataURI","IpfsHash","mintThenList","uri","path","mint","wait","id","tokenCount","setApprovalForAll","address","listingPrice","utils","parseEther","toString","makeItem","maxWidth","uploadToIPFS","e","target","value"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { ethers } from 'ethers';\nimport { Row, Form, Button } from 'react-bootstrap';\nimport { create } from 'pinata-client';\n\nconst pinataApiKey = 'a0c524e05dec455b2804'; // Replace with your Pinata API Key\nconst pinataSecretApiKey = 'bbd485dfa74d344556e14ebda05813bec33a1da54b16420f59f166d5420321d3'; // Replace with your Pinata Secret API Key\nconst client = create(pinataApiKey, pinataSecretApiKey);\n\nconst Create = ({ marketplace, nft }) => {\n  const [image, setImage] = useState('');\n  const [price, setPrice] = useState(null);\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n\n  const uploadToPinata = async (file) => {\n    try {\n      const result = await client.pinFileToIPFS(file);\n      console.log(result);\n      setImage(result.ipfsUrl);\n    } catch (error) {\n      console.log('Pinata image upload error:', error);\n    }\n  };\n\n  const createNFT = async () => {\n    if (!image || !price || !name || !description) return;\n\n    try {\n      const metadata = {\n        name,\n        description,\n        image,\n        price,\n      };\n\n      const result = await client.pinJSONToIPFS(metadata);\n      const metadataURI = `https://gateway.pinata.cloud/ipfs/${result.IpfsHash}`;\n      await mintThenList(metadataURI);\n    } catch (error) {\n      console.log('Pinata metadata upload error:', error);\n    }\n  };\n  const mintThenList = async (result) => {\n    const uri = `https://ipfs.infura.io/ipfs/${result.path}`\n    await(await nft.mint(uri)).wait()\n    const id = await nft.tokenCount()\n    await(await nft.setApprovalForAll(marketplace.address, true)).wait()\n    const listingPrice = ethers.utils.parseEther(price.toString())\n    await(await marketplace.makeItem(nft.address, id, listingPrice)).wait()\n  }\n  return (\n    <div className=\"container-fluid mt-5\">\n      <div className=\"row\">\n        <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: '1000px' }}>\n          <div className=\"content mx-auto\">\n            <Row className=\"g-4\">\n              <Form.Control\n                type=\"file\"\n                required\n                name=\"file\"\n                onChange={uploadToIPFS}\n              />\n              <Form.Control onChange={(e) => setName(e.target.value)} size=\"lg\" required type=\"text\" placeholder=\"Name\" />\n              <Form.Control onChange={(e) => setDescription(e.target.value)} size=\"lg\" required as=\"textarea\" placeholder=\"Description\" />\n              <Form.Control onChange={(e) => setPrice(e.target.value)} size=\"lg\" required type=\"number\" placeholder=\"Price in ETH\" />\n              <div className=\"d-grid px-0\">\n                <Button onClick={createNFT} variant=\"primary\" size=\"lg\">\n                  Create & List NFT!\n                </Button>\n              </div>\n            </Row>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Create"]},"metadata":{},"sourceType":"module"}