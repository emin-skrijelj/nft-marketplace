{"ast":null,"code":"import bases from './util/bases.js';\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\n\nexport function toString(array) {\n  let encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';\n  const base = bases[encoding];\n\n  if (base == null) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`);\n  }\n\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8');\n  } // strip multibase prefix\n\n\n  return base.encoder.encode(array).substring(1);\n}","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAA+C,iBAA/C;AAIA;;;;;;;;AAOA,OAAM,SAAUC,QAAV,CAAoBC,KAApB,EAA4E;AAAA,MAArCC,QAAqC,uEAAN,MAAM;AAChF,QAAMC,IAAI,GAAGJ,KAAK,CAACG,QAAD,CAAlB;;AAEA,MAAIC,IAAI,IAAI,IAAZ,EAAkB;AAChB,UAAM,IAAIC,KAAJ,CAAU,yBAAyBF,QAAQ,GAA3C,CAAN;AACD;;AAED,MAAI,CAACA,QAAQ,KAAK,MAAb,IAAuBA,QAAQ,KAAK,OAArC,KAAiDG,UAAU,CAACC,MAAX,IAAqB,IAAtE,IAA8ED,UAAU,CAACC,MAAX,CAAkBC,IAAlB,IAA0B,IAA5G,EAAkH;AAChH,WAAOF,UAAU,CAACC,MAAX,CAAkBC,IAAlB,CAAuBN,KAAK,CAACO,MAA7B,EAAqCP,KAAK,CAACQ,UAA3C,EAAuDR,KAAK,CAACS,UAA7D,EAAyEV,QAAzE,CAAkF,MAAlF,CAAP;AACD,GAT+E,CAWhF;;;AACA,SAAOG,IAAI,CAACQ,OAAL,CAAaC,MAAb,CAAoBX,KAApB,EAA2BY,SAA3B,CAAqC,CAArC,CAAP;AACD","names":["bases","toString","array","encoding","base","Error","globalThis","Buffer","from","buffer","byteOffset","byteLength","encoder","encode","substring"],"sources":["/home/legasi/nft-marketplace/node_modules/uint8arrays/src/to-string.ts"],"sourcesContent":["import bases, { type SupportedEncodings } from './util/bases.js'\n\nexport type { SupportedEncodings }\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function toString (array: Uint8Array, encoding: SupportedEncodings = 'utf8'): string {\n  const base = bases[encoding]\n\n  if (base == null) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8')\n  }\n\n  // strip multibase prefix\n  return base.encoder.encode(array).substring(1)\n}\n"]},"metadata":{},"sourceType":"module"}