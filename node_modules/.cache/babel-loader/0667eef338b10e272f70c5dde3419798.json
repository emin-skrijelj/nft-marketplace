{"ast":null,"code":"import { configure } from './lib/configure.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createCat = configure(api => {\n  /**\n   * @type {RootAPI[\"cat\"]}\n   */\n  async function* cat(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('cat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n    yield* res.iterator();\n  }\n\n  return cat;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/cat.js"],"names":["configure","toUrlSearchParams","createCat","api","cat","path","options","res","post","signal","searchParams","arg","toString","headers","iterator"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAGF,SAAS,CAACG,GAAG,IAAI;AACxC;AACF;AACA;AACE,kBAAiBC,GAAjB,CAAsBC,IAAtB,EAA0C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACxC,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,KAAT,EAAgB;AAChCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADgB;AAEhCC,MAAAA,YAAY,EAAET,iBAAiB,CAAC;AAC9BU,QAAAA,GAAG,EAAEN,IAAI,CAACO,QAAL,EADyB;AAE9B,WAAGN;AAF2B,OAAD,CAFC;AAMhCO,MAAAA,OAAO,EAAEP,OAAO,CAACO;AANe,KAAhB,CAAlB;AASA,WAAQN,GAAG,CAACO,QAAJ,EAAR;AACD;;AAED,SAAOV,GAAP;AACD,CAlBiC,CAA3B","sourcesContent":["import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createCat = configure(api => {\n  /**\n   * @type {RootAPI[\"cat\"]}\n   */\n  async function * cat (path, options = {}) {\n    const res = await api.post('cat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return cat\n})\n"]},"metadata":{},"sourceType":"module"}