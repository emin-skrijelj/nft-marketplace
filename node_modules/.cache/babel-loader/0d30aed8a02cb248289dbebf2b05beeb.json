{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createSet = configure(api => {\n  /**\n   * @type {ConfigAPI[\"set\"]}\n   */\n  const set = async function (key, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type');\n    }\n\n    const params = { ...options,\n      ...encodeParam(key, value)\n    };\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    });\n    await res.text();\n  };\n\n  return set;\n});\n/**\n * @param {*} key\n * @param {*} value\n */\n\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return {\n        arg: [key, value.toString()],\n        bool: true\n      };\n\n    case 'string':\n      return {\n        arg: [key, value]\n      };\n\n    default:\n      return {\n        arg: [key, JSON.stringify(value)],\n        json: true\n      };\n  }\n};","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/config/set.js"],"names":["configure","toUrlSearchParams","createSet","api","set","key","value","options","Error","params","encodeParam","res","post","signal","searchParams","headers","text","arg","toString","bool","JSON","stringify","json"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAGF,SAAS,CAACG,GAAG,IAAI;AACxC;AACF;AACA;AACE,QAAMC,GAAG,GAAG,gBAAOC,GAAP,EAAYC,KAAZ,EAAoC;AAAA,QAAjBC,OAAiB,uEAAP,EAAO;;AAC9C,QAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;AAC3B,YAAM,IAAIG,KAAJ,CAAU,kBAAV,CAAN;AACD;;AAED,UAAMC,MAAM,GAAG,EACb,GAAGF,OADU;AAEb,SAAGG,WAAW,CAACL,GAAD,EAAMC,KAAN;AAFD,KAAf;AAKA,UAAMK,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,QAAT,EAAmB;AACnCC,MAAAA,MAAM,EAAEN,OAAO,CAACM,MADmB;AAEnCC,MAAAA,YAAY,EAAEb,iBAAiB,CAACQ,MAAD,CAFI;AAGnCM,MAAAA,OAAO,EAAER,OAAO,CAACQ;AAHkB,KAAnB,CAAlB;AAMA,UAAMJ,GAAG,CAACK,IAAJ,EAAN;AACD,GAjBD;;AAmBA,SAAOZ,GAAP;AACD,CAxBiC,CAA3B;AA0BP;AACA;AACA;AACA;;AACA,MAAMM,WAAW,GAAG,CAACL,GAAD,EAAMC,KAAN,KAAgB;AAClC,UAAQ,OAAOA,KAAf;AACE,SAAK,SAAL;AACE,aAAO;AAAEW,QAAAA,GAAG,EAAE,CAACZ,GAAD,EAAMC,KAAK,CAACY,QAAN,EAAN,CAAP;AAAgCC,QAAAA,IAAI,EAAE;AAAtC,OAAP;;AACF,SAAK,QAAL;AACE,aAAO;AAAEF,QAAAA,GAAG,EAAE,CAACZ,GAAD,EAAMC,KAAN;AAAP,OAAP;;AACF;AACE,aAAO;AAAEW,QAAAA,GAAG,EAAE,CAACZ,GAAD,EAAMe,IAAI,CAACC,SAAL,CAAef,KAAf,CAAN,CAAP;AAAqCgB,QAAAA,IAAI,EAAE;AAA3C,OAAP;AANJ;AAQD,CATD","sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createSet = configure(api => {\n  /**\n   * @type {ConfigAPI[\"set\"]}\n   */\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type')\n    }\n\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    }\n\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n\n  return set\n})\n\n/**\n * @param {*} key\n * @param {*} value\n */\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return { arg: [key, value.toString()], bool: true }\n    case 'string':\n      return { arg: [key, value] }\n    default:\n      return { arg: [key, JSON.stringify(value)], json: true }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}