{"ast":null,"code":"import { asUint8Array } from './util/as-uint8array.js';\nimport bases from './util/bases.js';\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\n\nexport function fromString(string) {\n  let encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';\n  const base = bases[encoding];\n\n  if (base == null) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`);\n  }\n\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return asUint8Array(globalThis.Buffer.from(string, 'utf-8'));\n  } // add multibase prefix\n\n\n  return base.decoder.decode(`${base.prefix}${string}`); // eslint-disable-line @typescript-eslint/restrict-template-expressions\n}","map":{"version":3,"mappings":"AAAA,SAASA,YAAT,QAA6B,yBAA7B;AACA,OAAOC,KAAP,MAA+C,iBAA/C;AAIA;;;;;;;;AAOA,OAAM,SAAUC,UAAV,CAAsBC,MAAtB,EAA2E;AAAA,MAArCC,QAAqC,uEAAN,MAAM;AAC/E,QAAMC,IAAI,GAAGJ,KAAK,CAACG,QAAD,CAAlB;;AAEA,MAAIC,IAAI,IAAI,IAAZ,EAAkB;AAChB,UAAM,IAAIC,KAAJ,CAAU,yBAAyBF,QAAQ,GAA3C,CAAN;AACD;;AAED,MAAI,CAACA,QAAQ,KAAK,MAAb,IAAuBA,QAAQ,KAAK,OAArC,KAAiDG,UAAU,CAACC,MAAX,IAAqB,IAAtE,IAA8ED,UAAU,CAACC,MAAX,CAAkBC,IAAlB,IAA0B,IAA5G,EAAkH;AAChH,WAAOT,YAAY,CAACO,UAAU,CAACC,MAAX,CAAkBC,IAAlB,CAAuBN,MAAvB,EAA+B,OAA/B,CAAD,CAAnB;AACD,GAT8E,CAW/E;;;AACA,SAAOE,IAAI,CAACK,OAAL,CAAaC,MAAb,CAAoB,GAAGN,IAAI,CAACO,MAAM,GAAGT,MAAM,EAA3C,CAAP,CAZ+E,CAYzB;AACvD","names":["asUint8Array","bases","fromString","string","encoding","base","Error","globalThis","Buffer","from","decoder","decode","prefix"],"sources":["/home/legasi/nft-marketplace/node_modules/uint8arrays/src/from-string.ts"],"sourcesContent":["import { asUint8Array } from './util/as-uint8array.js'\nimport bases, { type SupportedEncodings } from './util/bases.js'\n\nexport type { SupportedEncodings }\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function fromString (string: string, encoding: SupportedEncodings = 'utf8'): Uint8Array {\n  const base = bases[encoding]\n\n  if (base == null) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return asUint8Array(globalThis.Buffer.from(string, 'utf-8'))\n  }\n\n  // add multibase prefix\n  return base.decoder.decode(`${base.prefix}${string}`) // eslint-disable-line @typescript-eslint/restrict-template-expressions\n}\n"]},"metadata":{},"sourceType":"module"}