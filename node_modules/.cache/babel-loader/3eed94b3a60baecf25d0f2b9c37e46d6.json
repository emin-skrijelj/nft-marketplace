{"ast":null,"code":"import { fromBase64url, toBase64url } from './utils.js';\nimport { CID } from 'multiformats/cid';\nexport function fromSplit(split) {\n  const [protectedHeader, payload, signature] = split;\n  return {\n    payload,\n    signatures: [{\n      protected: protectedHeader,\n      signature\n    }],\n    link: CID.decode(fromBase64url(payload))\n  };\n}\n\nfunction encodeSignature(signature) {\n  const encoded = {\n    signature: fromBase64url(signature.signature)\n  };\n  if (signature.header) encoded.header = signature.header;\n  if (signature.protected) encoded.protected = fromBase64url(signature.protected);\n  return encoded;\n}\n\nexport function encode(jws) {\n  const payload = fromBase64url(jws.payload);\n\n  try {\n    CID.decode(payload);\n  } catch (e) {\n    throw new Error('Not a valid DagJWS');\n  }\n\n  return {\n    payload,\n    signatures: jws.signatures.map(encodeSignature)\n  };\n}\n\nfunction decodeSignature(encoded) {\n  const sign = {\n    signature: toBase64url(encoded.signature)\n  };\n  if (encoded.header) sign.header = encoded.header;\n  if (encoded.protected) sign.protected = toBase64url(encoded.protected);\n  return sign;\n}\n\nexport function decode(encoded) {\n  const decoded = {\n    payload: toBase64url(encoded.payload),\n    signatures: encoded.signatures.map(decodeSignature)\n  };\n  decoded.link = CID.decode(new Uint8Array(encoded.payload));\n  return decoded;\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,EAAwBC,WAAxB,QAA2C,YAA3C;AACA,SAASC,GAAT,QAAoB,kBAApB;AAiCA,OAAM,SAAUC,SAAV,CAAoBC,KAApB,EAAwC;AAC5C,QAAM,CAACC,eAAD,EAAkBC,OAAlB,EAA2BC,SAA3B,IAAwCH,KAA9C;AACA,SAAO;AACLE,WADK;AAELE,cAAU,EAAE,CAAC;AAAEC,eAAS,EAAEJ,eAAb;AAA8BE;AAA9B,KAAD,CAFP;AAGLG,QAAI,EAAER,GAAG,CAACS,MAAJ,CAAWX,aAAa,CAACM,OAAD,CAAxB;AAHD,GAAP;AAKD;;AAED,SAASM,eAAT,CAAyBL,SAAzB,EAAgD;AAC9C,QAAMM,OAAO,GAAqB;AAChCN,aAAS,EAAEP,aAAa,CAACO,SAAS,CAACA,SAAX;AADQ,GAAlC;AAGA,MAAIA,SAAS,CAACO,MAAd,EAAsBD,OAAO,CAACC,MAAR,GAAiBP,SAAS,CAACO,MAA3B;AACtB,MAAIP,SAAS,CAACE,SAAd,EAAyBI,OAAO,CAACJ,SAAR,GAAoBT,aAAa,CAACO,SAAS,CAACE,SAAX,CAAjC;AACzB,SAAOI,OAAP;AACD;;AAED,OAAM,SAAUE,MAAV,CAAiBC,GAAjB,EAA4B;AAChC,QAAMV,OAAO,GAAGN,aAAa,CAACgB,GAAG,CAACV,OAAL,CAA7B;;AACA,MAAI;AACFJ,OAAG,CAACS,MAAJ,CAAWL,OAAX;AACD,GAFD,CAEE,OAAOW,CAAP,EAAU;AACV,UAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACD;;AACD,SAAO;AACLZ,WADK;AAELE,cAAU,EAAEQ,GAAG,CAACR,UAAJ,CAAeW,GAAf,CAAmBP,eAAnB;AAFP,GAAP;AAID;;AAED,SAASQ,eAAT,CAAyBP,OAAzB,EAAkD;AAChD,QAAMQ,IAAI,GAAiB;AACzBd,aAAS,EAAEN,WAAW,CAACY,OAAO,CAACN,SAAT;AADG,GAA3B;AAGA,MAAIM,OAAO,CAACC,MAAZ,EAAoBO,IAAI,CAACP,MAAL,GAAcD,OAAO,CAACC,MAAtB;AACpB,MAAID,OAAO,CAACJ,SAAZ,EAAuBY,IAAI,CAACZ,SAAL,GAAiBR,WAAW,CAACY,OAAO,CAACJ,SAAT,CAA5B;AACvB,SAAOY,IAAP;AACD;;AAED,OAAM,SAAUV,MAAV,CAAiBE,OAAjB,EAAoC;AACxC,QAAMS,OAAO,GAAW;AACtBhB,WAAO,EAAEL,WAAW,CAACY,OAAO,CAACP,OAAT,CADE;AAEtBE,cAAU,EAAEK,OAAO,CAACL,UAAR,CAAmBW,GAAnB,CAAuBC,eAAvB;AAFU,GAAxB;AAIAE,SAAO,CAACZ,IAAR,GAAeR,GAAG,CAACS,MAAJ,CAAW,IAAIY,UAAJ,CAAeV,OAAO,CAACP,OAAvB,CAAX,CAAf;AACA,SAAOgB,OAAP;AACD","names":["fromBase64url","toBase64url","CID","fromSplit","split","protectedHeader","payload","signature","signatures","protected","link","decode","encodeSignature","encoded","header","encode","jws","e","Error","map","decodeSignature","sign","decoded","Uint8Array"],"sources":["../src/signing.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}