{"ast":null,"code":"const textDecoder = new TextDecoder();\n/**\n * @typedef {import('./interface.js').RawPBLink} RawPBLink\n */\n\n/**\n * @typedef {import('./interface.js').RawPBNode} RawPBNode\n */\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} offset\n * @returns {[number, number]}\n */\n\nfunction decodeVarint(bytes, offset) {\n  let v = 0;\n\n  for (let shift = 0;; shift += 7) {\n    /* c8 ignore next 3 */\n    if (shift >= 64) {\n      throw new Error('protobuf: varint overflow');\n    }\n    /* c8 ignore next 3 */\n\n\n    if (offset >= bytes.length) {\n      throw new Error('protobuf: unexpected end of data');\n    }\n\n    const b = bytes[offset++];\n    v += shift < 28 ? (b & 0x7f) << shift : (b & 0x7f) * 2 ** shift;\n\n    if (b < 0x80) {\n      break;\n    }\n  }\n\n  return [v, offset];\n}\n/**\n * @param {Uint8Array} bytes\n * @param {number} offset\n * @returns {[Uint8Array, number]}\n */\n\n\nfunction decodeBytes(bytes, offset) {\n  let byteLen;\n  [byteLen, offset] = decodeVarint(bytes, offset);\n  const postOffset = offset + byteLen;\n  /* c8 ignore next 3 */\n\n  if (byteLen < 0 || postOffset < 0) {\n    throw new Error('protobuf: invalid length');\n  }\n  /* c8 ignore next 3 */\n\n\n  if (postOffset > bytes.length) {\n    throw new Error('protobuf: unexpected end of data');\n  }\n\n  return [bytes.subarray(offset, postOffset), postOffset];\n}\n/**\n * @param {Uint8Array} bytes\n * @param {number} index\n * @returns {[number, number, number]}\n */\n\n\nfunction decodeKey(bytes, index) {\n  let wire;\n  [wire, index] = decodeVarint(bytes, index); // [wireType, fieldNum, newIndex]\n\n  return [wire & 0x7, wire >> 3, index];\n}\n/**\n * @param {Uint8Array} bytes\n * @returns {RawPBLink}\n */\n\n\nfunction decodeLink(bytes) {\n  /** @type {RawPBLink} */\n  const link = {};\n  const l = bytes.length;\n  let index = 0;\n\n  while (index < l) {\n    let wireType, fieldNum;\n    [wireType, fieldNum, index] = decodeKey(bytes, index);\n\n    if (fieldNum === 1) {\n      if (link.Hash) {\n        throw new Error('protobuf: (PBLink) duplicate Hash section');\n      }\n\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Hash`);\n      }\n\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Name before Hash');\n      }\n\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Hash');\n      }\n\n      [link.Hash, index] = decodeBytes(bytes, index);\n    } else if (fieldNum === 2) {\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Name section');\n      }\n\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Name`);\n      }\n\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Name');\n      }\n\n      let byts;\n      [byts, index] = decodeBytes(bytes, index);\n      link.Name = textDecoder.decode(byts);\n    } else if (fieldNum === 3) {\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Tsize section');\n      }\n\n      if (wireType !== 0) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Tsize`);\n      }\n\n      [link.Tsize, index] = decodeVarint(bytes, index);\n    } else {\n      throw new Error(`protobuf: (PBLink) invalid fieldNumber, expected 1, 2 or 3, got ${fieldNum}`);\n    }\n  }\n  /* c8 ignore next 3 */\n\n\n  if (index > l) {\n    throw new Error('protobuf: (PBLink) unexpected end of data');\n  }\n\n  return link;\n}\n/**\n * @param {Uint8Array} bytes\n * @returns {RawPBNode}\n */\n\n\nexport function decodeNode(bytes) {\n  const l = bytes.length;\n  let index = 0;\n  /** @type {RawPBLink[]|void} */\n\n  let links;\n  let linksBeforeData = false;\n  /** @type {Uint8Array|void} */\n\n  let data;\n\n  while (index < l) {\n    let wireType, fieldNum;\n    [wireType, fieldNum, index] = decodeKey(bytes, index);\n\n    if (wireType !== 2) {\n      throw new Error(`protobuf: (PBNode) invalid wireType, expected 2, got ${wireType}`);\n    }\n\n    if (fieldNum === 1) {\n      if (data) {\n        throw new Error('protobuf: (PBNode) duplicate Data section');\n      }\n\n      [data, index] = decodeBytes(bytes, index);\n\n      if (links) {\n        linksBeforeData = true;\n      }\n    } else if (fieldNum === 2) {\n      if (linksBeforeData) {\n        // interleaved Links/Data/Links\n        throw new Error('protobuf: (PBNode) duplicate Links section');\n      } else if (!links) {\n        links = [];\n      }\n\n      let byts;\n      [byts, index] = decodeBytes(bytes, index);\n      links.push(decodeLink(byts));\n    } else {\n      throw new Error(`protobuf: (PBNode) invalid fieldNumber, expected 1 or 2, got ${fieldNum}`);\n    }\n  }\n  /* c8 ignore next 3 */\n\n\n  if (index > l) {\n    throw new Error('protobuf: (PBNode) unexpected end of data');\n  }\n  /** @type {RawPBNode} */\n\n\n  const node = {};\n\n  if (data) {\n    node.Data = data;\n  }\n\n  node.Links = links || [];\n  return node;\n}","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/@ipld/dag-pb/src/pb-decode.js"],"names":["textDecoder","TextDecoder","decodeVarint","bytes","offset","v","shift","Error","length","b","decodeBytes","byteLen","postOffset","subarray","decodeKey","index","wire","decodeLink","link","l","wireType","fieldNum","Hash","Name","undefined","Tsize","byts","decode","decodeNode","links","linksBeforeData","data","push","node","Data","Links"],"mappings":"AAAA,MAAMA,WAAW,GAAG,IAAIC,WAAJ,EAApB;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAuBC,KAAvB,EAA8BC,MAA9B,EAAsC;AACpC,MAAIC,CAAC,GAAG,CAAR;;AAEA,OAAK,IAAIC,KAAK,GAAG,CAAjB,GAAsBA,KAAK,IAAI,CAA/B,EAAkC;AAChC;AACA,QAAIA,KAAK,IAAI,EAAb,EAAiB;AACf,YAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACD;AACD;;;AACA,QAAIH,MAAM,IAAID,KAAK,CAACK,MAApB,EAA4B;AAC1B,YAAM,IAAID,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAED,UAAME,CAAC,GAAGN,KAAK,CAACC,MAAM,EAAP,CAAf;AACAC,IAAAA,CAAC,IAAIC,KAAK,GAAG,EAAR,GAAa,CAACG,CAAC,GAAG,IAAL,KAAcH,KAA3B,GAAmC,CAACG,CAAC,GAAG,IAAL,IAAc,KAAKH,KAA3D;;AACA,QAAIG,CAAC,GAAG,IAAR,EAAc;AACZ;AACD;AACF;;AACD,SAAO,CAACJ,CAAD,EAAID,MAAJ,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASM,WAAT,CAAsBP,KAAtB,EAA6BC,MAA7B,EAAqC;AACnC,MAAIO,OAAJ;AACC,GAACA,OAAD,EAAUP,MAAV,IAAoBF,YAAY,CAACC,KAAD,EAAQC,MAAR,CAAhC;AACD,QAAMQ,UAAU,GAAGR,MAAM,GAAGO,OAA5B;AAEA;;AACA,MAAIA,OAAO,GAAG,CAAV,IAAeC,UAAU,GAAG,CAAhC,EAAmC;AACjC,UAAM,IAAIL,KAAJ,CAAU,0BAAV,CAAN;AACD;AACD;;;AACA,MAAIK,UAAU,GAAGT,KAAK,CAACK,MAAvB,EAA+B;AAC7B,UAAM,IAAID,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAED,SAAO,CAACJ,KAAK,CAACU,QAAN,CAAeT,MAAf,EAAuBQ,UAAvB,CAAD,EAAqCA,UAArC,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASE,SAAT,CAAoBX,KAApB,EAA2BY,KAA3B,EAAkC;AAChC,MAAIC,IAAJ;AACC,GAACA,IAAD,EAAOD,KAAP,IAAgBb,YAAY,CAACC,KAAD,EAAQY,KAAR,CAA5B,CAF+B,CAGhC;;AACA,SAAO,CAACC,IAAI,GAAG,GAAR,EAAaA,IAAI,IAAI,CAArB,EAAwBD,KAAxB,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASE,UAAT,CAAqBd,KAArB,EAA4B;AAC1B;AACA,QAAMe,IAAI,GAAG,EAAb;AACA,QAAMC,CAAC,GAAGhB,KAAK,CAACK,MAAhB;AACA,MAAIO,KAAK,GAAG,CAAZ;;AAEA,SAAOA,KAAK,GAAGI,CAAf,EAAkB;AAChB,QAAIC,QAAJ,EAAcC,QAAd;AACC,KAACD,QAAD,EAAWC,QAAX,EAAqBN,KAArB,IAA8BD,SAAS,CAACX,KAAD,EAAQY,KAAR,CAAvC;;AAED,QAAIM,QAAQ,KAAK,CAAjB,EAAoB;AAClB,UAAIH,IAAI,CAACI,IAAT,EAAe;AACb,cAAM,IAAIf,KAAJ,CAAU,2CAAV,CAAN;AACD;;AACD,UAAIa,QAAQ,KAAK,CAAjB,EAAoB;AAClB,cAAM,IAAIb,KAAJ,CAAW,sCAAqCa,QAAS,YAAzD,CAAN;AACD;;AACD,UAAIF,IAAI,CAACK,IAAL,KAAcC,SAAlB,EAA6B;AAC3B,cAAM,IAAIjB,KAAJ,CAAU,0DAAV,CAAN;AACD;;AACD,UAAIW,IAAI,CAACO,KAAL,KAAeD,SAAnB,EAA8B;AAC5B,cAAM,IAAIjB,KAAJ,CAAU,2DAAV,CAAN;AACD;;AAED,OAACW,IAAI,CAACI,IAAN,EAAYP,KAAZ,IAAqBL,WAAW,CAACP,KAAD,EAAQY,KAAR,CAAhC;AACD,KAfD,MAeO,IAAIM,QAAQ,KAAK,CAAjB,EAAoB;AACzB,UAAIH,IAAI,CAACK,IAAL,KAAcC,SAAlB,EAA6B;AAC3B,cAAM,IAAIjB,KAAJ,CAAU,2CAAV,CAAN;AACD;;AACD,UAAIa,QAAQ,KAAK,CAAjB,EAAoB;AAClB,cAAM,IAAIb,KAAJ,CAAW,sCAAqCa,QAAS,YAAzD,CAAN;AACD;;AACD,UAAIF,IAAI,CAACO,KAAL,KAAeD,SAAnB,EAA8B;AAC5B,cAAM,IAAIjB,KAAJ,CAAU,2DAAV,CAAN;AACD;;AAED,UAAImB,IAAJ;AACC,OAACA,IAAD,EAAOX,KAAP,IAAgBL,WAAW,CAACP,KAAD,EAAQY,KAAR,CAA3B;AACDG,MAAAA,IAAI,CAACK,IAAL,GAAYvB,WAAW,CAAC2B,MAAZ,CAAmBD,IAAnB,CAAZ;AACD,KAdM,MAcA,IAAIL,QAAQ,KAAK,CAAjB,EAAoB;AACzB,UAAIH,IAAI,CAACO,KAAL,KAAeD,SAAnB,EAA8B;AAC5B,cAAM,IAAIjB,KAAJ,CAAU,4CAAV,CAAN;AACD;;AACD,UAAIa,QAAQ,KAAK,CAAjB,EAAoB;AAClB,cAAM,IAAIb,KAAJ,CAAW,sCAAqCa,QAAS,aAAzD,CAAN;AACD;;AAED,OAACF,IAAI,CAACO,KAAN,EAAaV,KAAb,IAAsBb,YAAY,CAACC,KAAD,EAAQY,KAAR,CAAlC;AACD,KATM,MASA;AACL,YAAM,IAAIR,KAAJ,CAAW,mEAAkEc,QAAS,EAAtF,CAAN;AACD;AACF;AAED;;;AACA,MAAIN,KAAK,GAAGI,CAAZ,EAAe;AACb,UAAM,IAAIZ,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAED,SAAOW,IAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,OAAO,SAASU,UAAT,CAAqBzB,KAArB,EAA4B;AACjC,QAAMgB,CAAC,GAAGhB,KAAK,CAACK,MAAhB;AACA,MAAIO,KAAK,GAAG,CAAZ;AACA;;AACA,MAAIc,KAAJ;AACA,MAAIC,eAAe,GAAG,KAAtB;AACA;;AACA,MAAIC,IAAJ;;AAEA,SAAOhB,KAAK,GAAGI,CAAf,EAAkB;AAChB,QAAIC,QAAJ,EAAcC,QAAd;AACC,KAACD,QAAD,EAAWC,QAAX,EAAqBN,KAArB,IAA8BD,SAAS,CAACX,KAAD,EAAQY,KAAR,CAAvC;;AAED,QAAIK,QAAQ,KAAK,CAAjB,EAAoB;AAClB,YAAM,IAAIb,KAAJ,CAAW,wDAAuDa,QAAS,EAA3E,CAAN;AACD;;AAED,QAAIC,QAAQ,KAAK,CAAjB,EAAoB;AAClB,UAAIU,IAAJ,EAAU;AACR,cAAM,IAAIxB,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAED,OAACwB,IAAD,EAAOhB,KAAP,IAAgBL,WAAW,CAACP,KAAD,EAAQY,KAAR,CAA3B;;AACA,UAAIc,KAAJ,EAAW;AACTC,QAAAA,eAAe,GAAG,IAAlB;AACD;AACF,KATD,MASO,IAAIT,QAAQ,KAAK,CAAjB,EAAoB;AACzB,UAAIS,eAAJ,EAAqB;AAAE;AACrB,cAAM,IAAIvB,KAAJ,CAAU,4CAAV,CAAN;AACD,OAFD,MAEO,IAAI,CAACsB,KAAL,EAAY;AACjBA,QAAAA,KAAK,GAAG,EAAR;AACD;;AACD,UAAIH,IAAJ;AACC,OAACA,IAAD,EAAOX,KAAP,IAAgBL,WAAW,CAACP,KAAD,EAAQY,KAAR,CAA3B;AACDc,MAAAA,KAAK,CAACG,IAAN,CAAWf,UAAU,CAACS,IAAD,CAArB;AACD,KATM,MASA;AACL,YAAM,IAAInB,KAAJ,CAAW,gEAA+Dc,QAAS,EAAnF,CAAN;AACD;AACF;AAED;;;AACA,MAAIN,KAAK,GAAGI,CAAZ,EAAe;AACb,UAAM,IAAIZ,KAAJ,CAAU,2CAAV,CAAN;AACD;AAED;;;AACA,QAAM0B,IAAI,GAAG,EAAb;;AACA,MAAIF,IAAJ,EAAU;AACRE,IAAAA,IAAI,CAACC,IAAL,GAAYH,IAAZ;AACD;;AACDE,EAAAA,IAAI,CAACE,KAAL,GAAaN,KAAK,IAAI,EAAtB;AACA,SAAOI,IAAP;AACD","sourcesContent":["const textDecoder = new TextDecoder()\n\n/**\n * @typedef {import('./interface.js').RawPBLink} RawPBLink\n */\n\n/**\n * @typedef {import('./interface.js').RawPBNode} RawPBNode\n */\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} offset\n * @returns {[number, number]}\n */\nfunction decodeVarint (bytes, offset) {\n  let v = 0\n\n  for (let shift = 0; ; shift += 7) {\n    /* c8 ignore next 3 */\n    if (shift >= 64) {\n      throw new Error('protobuf: varint overflow')\n    }\n    /* c8 ignore next 3 */\n    if (offset >= bytes.length) {\n      throw new Error('protobuf: unexpected end of data')\n    }\n\n    const b = bytes[offset++]\n    v += shift < 28 ? (b & 0x7f) << shift : (b & 0x7f) * (2 ** shift)\n    if (b < 0x80) {\n      break\n    }\n  }\n  return [v, offset]\n}\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} offset\n * @returns {[Uint8Array, number]}\n */\nfunction decodeBytes (bytes, offset) {\n  let byteLen\n  ;[byteLen, offset] = decodeVarint(bytes, offset)\n  const postOffset = offset + byteLen\n\n  /* c8 ignore next 3 */\n  if (byteLen < 0 || postOffset < 0) {\n    throw new Error('protobuf: invalid length')\n  }\n  /* c8 ignore next 3 */\n  if (postOffset > bytes.length) {\n    throw new Error('protobuf: unexpected end of data')\n  }\n\n  return [bytes.subarray(offset, postOffset), postOffset]\n}\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} index\n * @returns {[number, number, number]}\n */\nfunction decodeKey (bytes, index) {\n  let wire\n  ;[wire, index] = decodeVarint(bytes, index)\n  // [wireType, fieldNum, newIndex]\n  return [wire & 0x7, wire >> 3, index]\n}\n\n/**\n * @param {Uint8Array} bytes\n * @returns {RawPBLink}\n */\nfunction decodeLink (bytes) {\n  /** @type {RawPBLink} */\n  const link = {}\n  const l = bytes.length\n  let index = 0\n\n  while (index < l) {\n    let wireType, fieldNum\n    ;[wireType, fieldNum, index] = decodeKey(bytes, index)\n\n    if (fieldNum === 1) {\n      if (link.Hash) {\n        throw new Error('protobuf: (PBLink) duplicate Hash section')\n      }\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Hash`)\n      }\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Name before Hash')\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Hash')\n      }\n\n      [link.Hash, index] = decodeBytes(bytes, index)\n    } else if (fieldNum === 2) {\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Name section')\n      }\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Name`)\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Name')\n      }\n\n      let byts\n      ;[byts, index] = decodeBytes(bytes, index)\n      link.Name = textDecoder.decode(byts)\n    } else if (fieldNum === 3) {\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Tsize section')\n      }\n      if (wireType !== 0) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Tsize`)\n      }\n\n      [link.Tsize, index] = decodeVarint(bytes, index)\n    } else {\n      throw new Error(`protobuf: (PBLink) invalid fieldNumber, expected 1, 2 or 3, got ${fieldNum}`)\n    }\n  }\n\n  /* c8 ignore next 3 */\n  if (index > l) {\n    throw new Error('protobuf: (PBLink) unexpected end of data')\n  }\n\n  return link\n}\n\n/**\n * @param {Uint8Array} bytes\n * @returns {RawPBNode}\n */\nexport function decodeNode (bytes) {\n  const l = bytes.length\n  let index = 0\n  /** @type {RawPBLink[]|void} */\n  let links\n  let linksBeforeData = false\n  /** @type {Uint8Array|void} */\n  let data\n\n  while (index < l) {\n    let wireType, fieldNum\n    ;[wireType, fieldNum, index] = decodeKey(bytes, index)\n\n    if (wireType !== 2) {\n      throw new Error(`protobuf: (PBNode) invalid wireType, expected 2, got ${wireType}`)\n    }\n\n    if (fieldNum === 1) {\n      if (data) {\n        throw new Error('protobuf: (PBNode) duplicate Data section')\n      }\n\n      [data, index] = decodeBytes(bytes, index)\n      if (links) {\n        linksBeforeData = true\n      }\n    } else if (fieldNum === 2) {\n      if (linksBeforeData) { // interleaved Links/Data/Links\n        throw new Error('protobuf: (PBNode) duplicate Links section')\n      } else if (!links) {\n        links = []\n      }\n      let byts\n      ;[byts, index] = decodeBytes(bytes, index)\n      links.push(decodeLink(byts))\n    } else {\n      throw new Error(`protobuf: (PBNode) invalid fieldNumber, expected 1 or 2, got ${fieldNum}`)\n    }\n  }\n\n  /* c8 ignore next 3 */\n  if (index > l) {\n    throw new Error('protobuf: (PBNode) unexpected end of data')\n  }\n\n  /** @type {RawPBNode} */\n  const node = {}\n  if (data) {\n    node.Data = data\n  }\n  node.Links = links || []\n  return node\n}\n"]},"metadata":{},"sourceType":"module"}