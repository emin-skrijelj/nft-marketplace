{"ast":null,"code":"import errCode from 'err-code';\nimport itPeekable from 'it-peekable';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport all from 'it-all';\nimport { isBytes, isBlob, isReadableStream } from './utils.js';\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\n\nexport async function normaliseContent(input) {\n  // Bytes\n  if (isBytes(input)) {\n    return new Blob([input]);\n  } // String\n\n\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()]);\n  } // Blob | File\n\n\n  if (isBlob(input)) {\n    return input;\n  } // Browser stream\n\n\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  } // (Async)Iterator<?>\n\n\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input);\n    /** @type {any} value **/\n\n    const {\n      value,\n      done\n    } = await peekable.peek();\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return itToBlob(peekable);\n    }\n\n    peekable.push(value); // (Async)Iterable<Number>\n\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from(await all(peekable))]);\n    } // (Async)Iterable<Bytes|String>\n\n\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable);\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n}\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\n\nasync function itToBlob(stream) {\n  const parts = [];\n\n  for await (const chunk of stream) {\n    parts.push(chunk);\n  }\n\n  return new Blob(parts);\n}","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-core-utils/src/files/normalise-content.browser.js"],"names":["errCode","itPeekable","browserStreamToIt","all","isBytes","isBlob","isReadableStream","normaliseContent","input","Blob","String","toString","Symbol","iterator","asyncIterator","peekable","value","done","peek","itToBlob","push","Number","isInteger","Uint8Array","from","Error","stream","parts","chunk"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SACEC,OADF,EAEEC,MAFF,EAGEC,gBAHF,QAIO,YAJP;AAMA;AACA;AACA;;AACA,OAAO,eAAeC,gBAAf,CAAiCC,KAAjC,EAAwC;AAC7C;AACA,MAAIJ,OAAO,CAACI,KAAD,CAAX,EAAoB;AAClB,WAAO,IAAIC,IAAJ,CAAS,CAACD,KAAD,CAAT,CAAP;AACD,GAJ4C,CAM7C;;;AACA,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,YAAYE,MAAlD,EAA0D;AACxD,WAAO,IAAID,IAAJ,CAAS,CAACD,KAAK,CAACG,QAAN,EAAD,CAAT,CAAP;AACD,GAT4C,CAW7C;;;AACA,MAAIN,MAAM,CAACG,KAAD,CAAV,EAAmB;AACjB,WAAOA,KAAP;AACD,GAd4C,CAgB7C;;;AACA,MAAIF,gBAAgB,CAACE,KAAD,CAApB,EAA6B;AAC3BA,IAAAA,KAAK,GAAGN,iBAAiB,CAACM,KAAD,CAAzB;AACD,GAnB4C,CAqB7C;;;AACA,MAAII,MAAM,CAACC,QAAP,IAAmBL,KAAnB,IAA4BI,MAAM,CAACE,aAAP,IAAwBN,KAAxD,EAA+D;AAC7D;AACA,UAAMO,QAAQ,GAAGd,UAAU,CAACO,KAAD,CAA3B;AAEA;;AACA,UAAM;AAAEQ,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkB,MAAMF,QAAQ,CAACG,IAAT,EAA9B;;AAEA,QAAID,IAAJ,EAAU;AACR;AACA,aAAOE,QAAQ,CAACJ,QAAD,CAAf;AACD;;AAEDA,IAAAA,QAAQ,CAACK,IAAT,CAAcJ,KAAd,EAZ6D,CAc7D;;AACA,QAAIK,MAAM,CAACC,SAAP,CAAiBN,KAAjB,CAAJ,EAA6B;AAC3B,aAAO,IAAIP,IAAJ,CAAS,CAACc,UAAU,CAACC,IAAX,CAAgB,MAAMrB,GAAG,CAACY,QAAD,CAAzB,CAAD,CAAT,CAAP;AACD,KAjB4D,CAmB7D;;;AACA,QAAIX,OAAO,CAACY,KAAD,CAAP,IAAkB,OAAOA,KAAP,KAAiB,QAAnC,IAA+CA,KAAK,YAAYN,MAApE,EAA4E;AAC1E,aAAOS,QAAQ,CAACJ,QAAD,CAAf;AACD;AACF;;AAED,QAAMf,OAAO,CAAC,IAAIyB,KAAJ,CAAW,qBAAoBjB,KAAM,EAArC,CAAD,EAA0C,sBAA1C,CAAb;AACD;AAED;AACA;AACA;;AACA,eAAeW,QAAf,CAAyBO,MAAzB,EAAiC;AAC/B,QAAMC,KAAK,GAAG,EAAd;;AAEA,aAAW,MAAMC,KAAjB,IAA0BF,MAA1B,EAAkC;AAChCC,IAAAA,KAAK,CAACP,IAAN,CAAWQ,KAAX;AACD;;AAED,SAAO,IAAInB,IAAJ,CAASkB,KAAT,CAAP;AACD","sourcesContent":["import errCode from 'err-code'\nimport itPeekable from 'it-peekable'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport all from 'it-all'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream\n} from './utils.js'\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport async function normaliseContent (input) {\n  // Bytes\n  if (isBytes(input)) {\n    return new Blob([input])\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()])\n  }\n\n  // Blob | File\n  if (isBlob(input)) {\n    return input\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return itToBlob(peekable)\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from(await all(peekable))])\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\nasync function itToBlob (stream) {\n  const parts = []\n\n  for await (const chunk of stream) {\n    parts.push(chunk)\n  }\n\n  return new Blob(parts)\n}\n"]},"metadata":{},"sourceType":"module"}