{"ast":null,"code":"import errCode from 'err-code';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport itPeekable from 'it-peekable';\nimport map from 'it-map';\nimport { isBytes, isBlob, isReadableStream, isFileObject } from './utils.js';\nimport { parseMtime, parseMode } from 'ipfs-unixfs';\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidateStream} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\n\nexport async function* normaliseCandidateMultiple(input, normaliseContent) {\n  // String\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  // fs.ReadStream\n  // @ts-expect-error _readableState is a property of a node fs.ReadStream\n  if (typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n  } // Browser ReadableStream\n\n\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  } // Iterable<?>\n\n\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n    const {\n      value,\n      done\n    } = await peekable.peek();\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield* [];\n      return;\n    }\n\n    peekable.push(value); // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n\n    if (Number.isInteger(value)) {\n      throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n    } // (Async)Iterable<fs.ReadStream>\n    // @ts-expect-error private field\n\n\n    if (value._readableState) {\n      // @ts-expect-error Node fs.ReadStreams have a `.path` property so we need to pass it as the content\n      yield* map(peekable, (\n      /** @type {ImportCandidate} */\n      value) => toFileObject({\n        content: value\n      }, normaliseContent));\n      return;\n    }\n\n    if (isBytes(value)) {\n      // @ts-expect-error peekable is still an iterable of ImportCandidates\n      yield toFileObject({\n        content: peekable\n      }, normaliseContent);\n      return;\n    } // (Async)Iterable<(Async)Iterable<?>>\n    // (Async)Iterable<ReadableStream<?>>\n    // ReadableStream<(Async)Iterable<?>>\n    // ReadableStream<ReadableStream<?>>\n\n\n    if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value)) {\n      yield* map(peekable, (\n      /** @type {ImportCandidate} */\n      value) => toFileObject(value, normaliseContent));\n      return;\n    }\n  } // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n\n\n  if (isFileObject(input)) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n}\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n\nasync function toFileObject(input, normaliseContent) {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const {\n    path,\n    mode,\n    mtime,\n    content\n  } = input;\n  /** @type {ImporterImportCandidate} */\n\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  };\n\n  if (content) {\n    file.content = await normaliseContent(content);\n  } else if (!path) {\n    // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input);\n  }\n\n  return file;\n}","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-core-utils/src/files/normalise-candidate-multiple.js"],"names":["errCode","browserStreamToIt","itPeekable","map","isBytes","isBlob","isReadableStream","isFileObject","parseMtime","parseMode","normaliseCandidateMultiple","input","normaliseContent","String","_readableState","Error","Symbol","iterator","asyncIterator","peekable","value","done","peek","push","Number","isInteger","toFileObject","content","path","mode","mtime","file"],"mappings":"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","sourcesContent":["import errCode from 'err-code'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport itPeekable from 'it-peekable'\nimport map from 'it-map'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js'\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidateStream} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseCandidateMultiple (input, normaliseContent) {\n  // String\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  // fs.ReadStream\n  // @ts-expect-error _readableState is a property of a node fs.ReadStream\n  if (typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input)\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield * []\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    if (Number.isInteger(value)) {\n      throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n    }\n\n    // (Async)Iterable<fs.ReadStream>\n    // @ts-expect-error private field\n    if (value._readableState) {\n      // @ts-expect-error Node fs.ReadStreams have a `.path` property so we need to pass it as the content\n      yield * map(peekable, (/** @type {ImportCandidate} */ value) => toFileObject({ content: value }, normaliseContent))\n      return\n    }\n\n    if (isBytes(value)) {\n      // @ts-expect-error peekable is still an iterable of ImportCandidates\n      yield toFileObject({ content: peekable }, normaliseContent)\n      return\n    }\n\n    // (Async)Iterable<(Async)Iterable<?>>\n    // (Async)Iterable<ReadableStream<?>>\n    // ReadableStream<(Async)Iterable<?>>\n    // ReadableStream<ReadableStream<?>>\n    if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value)) {\n      yield * map(peekable, (/** @type {ImportCandidate} */ value) => toFileObject(value, normaliseContent))\n      return\n    }\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\nasync function toFileObject (input, normaliseContent) {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const { path, mode, mtime, content } = input\n\n  /** @type {ImporterImportCandidate} */\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  }\n\n  if (content) {\n    file.content = await normaliseContent(content)\n  } else if (!path) { // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input)\n  }\n\n  return file\n}\n"]},"metadata":{},"sourceType":"module"}