{"ast":null,"code":"import { CID } from 'multiformats/cid';\n/**\n * @typedef {import('./interface.js').PBLink} PBLink\n * @typedef {import('./interface.js').PBNode} PBNode\n */\n\nconst pbNodeProperties = ['Data', 'Links'];\nconst pbLinkProperties = ['Hash', 'Name', 'Tsize'];\nconst textEncoder = new TextEncoder();\n/**\n * @param {PBLink} a\n * @param {PBLink} b\n * @returns {number}\n */\n\nfunction linkComparator(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  const abuf = a.Name ? textEncoder.encode(a.Name) : [];\n  const bbuf = b.Name ? textEncoder.encode(b.Name) : [];\n  let x = abuf.length;\n  let y = bbuf.length;\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (abuf[i] !== bbuf[i]) {\n      x = abuf[i];\n      y = bbuf[i];\n      break;\n    }\n  }\n\n  return x < y ? -1 : y < x ? 1 : 0;\n}\n/**\n * @param {any} node\n * @param {string[]} properties\n * @returns {boolean}\n */\n\n\nfunction hasOnlyProperties(node, properties) {\n  return !Object.keys(node).some(p => !properties.includes(p));\n}\n/**\n * Converts a CID, or a PBLink-like object to a PBLink\n *\n * @param {any} link\n * @returns {PBLink}\n */\n\n\nfunction asLink(link) {\n  if (typeof link.asCID === 'object') {\n    const Hash = CID.asCID(link);\n\n    if (!Hash) {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n\n    return {\n      Hash\n    };\n  }\n\n  if (typeof link !== 'object' || Array.isArray(link)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n\n  const pbl = {};\n\n  if (link.Hash) {\n    let cid = CID.asCID(link.Hash);\n\n    try {\n      if (!cid) {\n        if (typeof link.Hash === 'string') {\n          cid = CID.parse(link.Hash);\n        } else if (link.Hash instanceof Uint8Array) {\n          cid = CID.decode(link.Hash);\n        }\n      }\n    } catch (\n    /** @type {any} */\n    e) {\n      throw new TypeError(`Invalid DAG-PB form: ${e.message}`);\n    }\n\n    if (cid) {\n      pbl.Hash = cid;\n    }\n  }\n\n  if (!pbl.Hash) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n\n  if (typeof link.Name === 'string') {\n    pbl.Name = link.Name;\n  }\n\n  if (typeof link.Tsize === 'number') {\n    pbl.Tsize = link.Tsize;\n  }\n\n  return pbl;\n}\n/**\n * @param {any} node\n * @returns {PBNode}\n */\n\n\nexport function prepare(node) {\n  if (node instanceof Uint8Array || typeof node === 'string') {\n    node = {\n      Data: node\n    };\n  }\n\n  if (typeof node !== 'object' || Array.isArray(node)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  /** @type {PBNode} */\n\n\n  const pbn = {};\n\n  if (node.Data !== undefined) {\n    if (typeof node.Data === 'string') {\n      pbn.Data = textEncoder.encode(node.Data);\n    } else if (node.Data instanceof Uint8Array) {\n      pbn.Data = node.Data;\n    } else {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n  }\n\n  if (node.Links !== undefined) {\n    if (Array.isArray(node.Links)) {\n      pbn.Links = node.Links.map(asLink);\n      pbn.Links.sort(linkComparator);\n    } else {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n  } else {\n    pbn.Links = [];\n  }\n\n  return pbn;\n}\n/**\n * @param {PBNode} node\n */\n\nexport function validate(node) {\n  /*\n  type PBLink struct {\n    Hash optional Link\n    Name optional String\n    Tsize optional Int\n  }\n   type PBNode struct {\n    Links [PBLink]\n    Data optional Bytes\n  }\n  */\n  // @ts-ignore private property for TS\n  if (!node || typeof node !== 'object' || Array.isArray(node) || node instanceof Uint8Array || node['/'] && node['/'] === node.bytes) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n\n  if (!hasOnlyProperties(node, pbNodeProperties)) {\n    throw new TypeError('Invalid DAG-PB form (extraneous properties)');\n  }\n\n  if (node.Data !== undefined && !(node.Data instanceof Uint8Array)) {\n    throw new TypeError('Invalid DAG-PB form (Data must be bytes)');\n  }\n\n  if (!Array.isArray(node.Links)) {\n    throw new TypeError('Invalid DAG-PB form (Links must be a list)');\n  }\n\n  for (let i = 0; i < node.Links.length; i++) {\n    const link = node.Links[i]; // @ts-ignore private property for TS\n\n    if (!link || typeof link !== 'object' || Array.isArray(link) || link instanceof Uint8Array || link['/'] && link['/'] === link.bytes) {\n      throw new TypeError('Invalid DAG-PB form (bad link)');\n    }\n\n    if (!hasOnlyProperties(link, pbLinkProperties)) {\n      throw new TypeError('Invalid DAG-PB form (extraneous properties on link)');\n    }\n\n    if (link.Hash === undefined) {\n      throw new TypeError('Invalid DAG-PB form (link must have a Hash)');\n    } // @ts-ignore private property for TS\n\n\n    if (link.Hash == null || !link.Hash['/'] || link.Hash['/'] !== link.Hash.bytes) {\n      throw new TypeError('Invalid DAG-PB form (link Hash must be a CID)');\n    }\n\n    if (link.Name !== undefined && typeof link.Name !== 'string') {\n      throw new TypeError('Invalid DAG-PB form (link Name must be a string)');\n    }\n\n    if (link.Tsize !== undefined) {\n      if (typeof link.Tsize !== 'number' || link.Tsize % 1 !== 0) {\n        throw new TypeError('Invalid DAG-PB form (link Tsize must be an integer)');\n      }\n\n      if (link.Tsize < 0) {\n        throw new TypeError('Invalid DAG-PB form (link Tsize cannot be negative)');\n      }\n    }\n\n    if (i > 0 && linkComparator(link, node.Links[i - 1]) === -1) {\n      throw new TypeError('Invalid DAG-PB form (links must be sorted by Name bytes)');\n    }\n  }\n}\n/**\n * @param {Uint8Array} data\n * @param {PBLink[]} [links=[]]\n * @returns {PBNode}\n */\n\nexport function createNode(data) {\n  let links = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return prepare({\n    Data: data,\n    Links: links\n  });\n}\n/**\n * @param {string} name\n * @param {number} size\n * @param {CID} cid\n * @returns {PBLink}\n */\n\nexport function createLink(name, size, cid) {\n  return asLink({\n    Hash: cid,\n    Name: name,\n    Tsize: size\n  });\n}","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/@ipld/dag-pb/src/util.js"],"names":["CID","pbNodeProperties","pbLinkProperties","textEncoder","TextEncoder","linkComparator","a","b","abuf","Name","encode","bbuf","x","length","y","i","len","Math","min","hasOnlyProperties","node","properties","Object","keys","some","p","includes","asLink","link","asCID","Hash","TypeError","Array","isArray","pbl","cid","parse","Uint8Array","decode","e","message","Tsize","prepare","Data","pbn","undefined","Links","map","sort","validate","bytes","createNode","data","links","createLink","name","size"],"mappings":"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","sourcesContent":["import { CID } from 'multiformats/cid'\n\n/**\n * @typedef {import('./interface.js').PBLink} PBLink\n * @typedef {import('./interface.js').PBNode} PBNode\n */\n\nconst pbNodeProperties = ['Data', 'Links']\nconst pbLinkProperties = ['Hash', 'Name', 'Tsize']\n\nconst textEncoder = new TextEncoder()\n\n/**\n * @param {PBLink} a\n * @param {PBLink} b\n * @returns {number}\n */\nfunction linkComparator (a, b) {\n  if (a === b) {\n    return 0\n  }\n\n  const abuf = a.Name ? textEncoder.encode(a.Name) : []\n  const bbuf = b.Name ? textEncoder.encode(b.Name) : []\n\n  let x = abuf.length\n  let y = bbuf.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (abuf[i] !== bbuf[i]) {\n      x = abuf[i]\n      y = bbuf[i]\n      break\n    }\n  }\n\n  return x < y ? -1 : y < x ? 1 : 0\n}\n\n/**\n * @param {any} node\n * @param {string[]} properties\n * @returns {boolean}\n */\nfunction hasOnlyProperties (node, properties) {\n  return !Object.keys(node).some((p) => !properties.includes(p))\n}\n\n/**\n * Converts a CID, or a PBLink-like object to a PBLink\n *\n * @param {any} link\n * @returns {PBLink}\n */\nfunction asLink (link) {\n  if (typeof link.asCID === 'object') {\n    const Hash = CID.asCID(link)\n    if (!Hash) {\n      throw new TypeError('Invalid DAG-PB form')\n    }\n    return { Hash }\n  }\n\n  if (typeof link !== 'object' || Array.isArray(link)) {\n    throw new TypeError('Invalid DAG-PB form')\n  }\n\n  const pbl = {}\n\n  if (link.Hash) {\n    let cid = CID.asCID(link.Hash)\n    try {\n      if (!cid) {\n        if (typeof link.Hash === 'string') {\n          cid = CID.parse(link.Hash)\n        } else if (link.Hash instanceof Uint8Array) {\n          cid = CID.decode(link.Hash)\n        }\n      }\n    } catch (/** @type {any} */ e) {\n      throw new TypeError(`Invalid DAG-PB form: ${e.message}`)\n    }\n\n    if (cid) {\n      pbl.Hash = cid\n    }\n  }\n\n  if (!pbl.Hash) {\n    throw new TypeError('Invalid DAG-PB form')\n  }\n\n  if (typeof link.Name === 'string') {\n    pbl.Name = link.Name\n  }\n\n  if (typeof link.Tsize === 'number') {\n    pbl.Tsize = link.Tsize\n  }\n\n  return pbl\n}\n\n/**\n * @param {any} node\n * @returns {PBNode}\n */\nexport function prepare (node) {\n  if (node instanceof Uint8Array || typeof node === 'string') {\n    node = { Data: node }\n  }\n\n  if (typeof node !== 'object' || Array.isArray(node)) {\n    throw new TypeError('Invalid DAG-PB form')\n  }\n\n  /** @type {PBNode} */\n  const pbn = {}\n\n  if (node.Data !== undefined) {\n    if (typeof node.Data === 'string') {\n      pbn.Data = textEncoder.encode(node.Data)\n    } else if (node.Data instanceof Uint8Array) {\n      pbn.Data = node.Data\n    } else {\n      throw new TypeError('Invalid DAG-PB form')\n    }\n  }\n\n  if (node.Links !== undefined) {\n    if (Array.isArray(node.Links)) {\n      pbn.Links = node.Links.map(asLink)\n      pbn.Links.sort(linkComparator)\n    } else {\n      throw new TypeError('Invalid DAG-PB form')\n    }\n  } else {\n    pbn.Links = []\n  }\n\n  return pbn\n}\n\n/**\n * @param {PBNode} node\n */\nexport function validate (node) {\n  /*\n  type PBLink struct {\n    Hash optional Link\n    Name optional String\n    Tsize optional Int\n  }\n\n  type PBNode struct {\n    Links [PBLink]\n    Data optional Bytes\n  }\n  */\n  // @ts-ignore private property for TS\n  if (!node || typeof node !== 'object' || Array.isArray(node) || node instanceof Uint8Array || (node['/'] && node['/'] === node.bytes)) {\n    throw new TypeError('Invalid DAG-PB form')\n  }\n\n  if (!hasOnlyProperties(node, pbNodeProperties)) {\n    throw new TypeError('Invalid DAG-PB form (extraneous properties)')\n  }\n\n  if (node.Data !== undefined && !(node.Data instanceof Uint8Array)) {\n    throw new TypeError('Invalid DAG-PB form (Data must be bytes)')\n  }\n\n  if (!Array.isArray(node.Links)) {\n    throw new TypeError('Invalid DAG-PB form (Links must be a list)')\n  }\n\n  for (let i = 0; i < node.Links.length; i++) {\n    const link = node.Links[i]\n    // @ts-ignore private property for TS\n    if (!link || typeof link !== 'object' || Array.isArray(link) || link instanceof Uint8Array || (link['/'] && link['/'] === link.bytes)) {\n      throw new TypeError('Invalid DAG-PB form (bad link)')\n    }\n\n    if (!hasOnlyProperties(link, pbLinkProperties)) {\n      throw new TypeError('Invalid DAG-PB form (extraneous properties on link)')\n    }\n\n    if (link.Hash === undefined) {\n      throw new TypeError('Invalid DAG-PB form (link must have a Hash)')\n    }\n\n    // @ts-ignore private property for TS\n    if (link.Hash == null || !link.Hash['/'] || link.Hash['/'] !== link.Hash.bytes) {\n      throw new TypeError('Invalid DAG-PB form (link Hash must be a CID)')\n    }\n\n    if (link.Name !== undefined && typeof link.Name !== 'string') {\n      throw new TypeError('Invalid DAG-PB form (link Name must be a string)')\n    }\n\n    if (link.Tsize !== undefined) {\n      if (typeof link.Tsize !== 'number' || link.Tsize % 1 !== 0) {\n        throw new TypeError('Invalid DAG-PB form (link Tsize must be an integer)')\n      }\n      if (link.Tsize < 0) {\n        throw new TypeError('Invalid DAG-PB form (link Tsize cannot be negative)')\n      }\n    }\n\n    if (i > 0 && linkComparator(link, node.Links[i - 1]) === -1) {\n      throw new TypeError('Invalid DAG-PB form (links must be sorted by Name bytes)')\n    }\n  }\n}\n\n/**\n * @param {Uint8Array} data\n * @param {PBLink[]} [links=[]]\n * @returns {PBNode}\n */\nexport function createNode (data, links = []) {\n  return prepare({ Data: data, Links: links })\n}\n\n/**\n * @param {string} name\n * @param {number} size\n * @param {CID} cid\n * @returns {PBLink}\n */\nexport function createLink (name, size, cid) {\n  return asLink({ Hash: cid, Name: name, Tsize: size })\n}\n"]},"metadata":{},"sourceType":"module"}