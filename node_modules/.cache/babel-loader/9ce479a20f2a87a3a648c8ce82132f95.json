{"ast":null,"code":"import { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport varint from 'varint';\nimport { convertToBytes, convertToString } from './convert.js';\nimport { getProtocol } from './protocols-table.js';\n/**\n * string -> [[str name, str addr]... ]\n */\n\nexport function stringToStringTuples(str) {\n  const tuples = [];\n  const parts = str.split('/').slice(1); // skip first empty elem\n\n  if (parts.length === 1 && parts[0] === '') {\n    return [];\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p];\n    const proto = getProtocol(part);\n\n    if (proto.size === 0) {\n      tuples.push([part]); // eslint-disable-next-line no-continue\n\n      continue;\n    }\n\n    p++; // advance addr part\n\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str);\n    } // if it's a path proto, take the rest\n\n\n    if (proto.path === true) {\n      tuples.push([part, // should we need to check each path part to see if it's a proto?\n      // This would allow for other protocols to be added after a unix path,\n      // however it would have issues if the path had a protocol name in the path\n      cleanPath(parts.slice(p).join('/'))]);\n      break;\n    }\n\n    tuples.push([part, parts[p]]);\n  }\n\n  return tuples;\n}\n/**\n * [[str name, str addr]... ] -> string\n */\n\nexport function stringTuplesToString(tuples) {\n  const parts = [];\n  tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n    parts.push(proto.name);\n\n    if (tup.length > 1 && tup[1] != null) {\n      parts.push(tup[1]);\n    }\n\n    return null;\n  });\n  return cleanPath(parts.join('/'));\n}\n/**\n * [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n */\n\nexport function stringTuplesToTuples(tuples) {\n  return tuples.map(tup => {\n    if (!Array.isArray(tup)) {\n      tup = [tup];\n    }\n\n    const proto = protoFromTuple(tup);\n\n    if (tup.length > 1) {\n      return [proto.code, convertToBytes(proto.code, tup[1])];\n    }\n\n    return [proto.code];\n  });\n}\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n */\n\nexport function tuplesToStringTuples(tuples) {\n  return tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n\n    if (tup[1] != null) {\n      return [proto.code, convertToString(proto.code, tup[1])];\n    }\n\n    return [proto.code];\n  });\n}\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\n\nexport function tuplesToBytes(tuples) {\n  return fromBytes(uint8ArrayConcat(tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n    let buf = Uint8Array.from(varint.encode(proto.code));\n\n    if (tup.length > 1 && tup[1] != null) {\n      buf = uint8ArrayConcat([buf, tup[1]]); // add address buffer\n    }\n\n    return buf;\n  })));\n}\n/**\n * For the passed address, return the serialized size\n */\n\nexport function sizeForAddr(p, addr) {\n  if (p.size > 0) {\n    return p.size / 8;\n  } else if (p.size === 0) {\n    return 0;\n  } else {\n    const size = varint.decode(addr);\n    return size + (varint.decode.bytes ?? 0);\n  }\n}\nexport function bytesToTuples(buf) {\n  const tuples = [];\n  let i = 0;\n\n  while (i < buf.length) {\n    const code = varint.decode(buf, i);\n    const n = varint.decode.bytes ?? 0;\n    const p = getProtocol(code);\n    const size = sizeForAddr(p, buf.slice(i + n));\n\n    if (size === 0) {\n      tuples.push([code]);\n      i += n; // eslint-disable-next-line no-continue\n\n      continue;\n    }\n\n    const addr = buf.slice(i + n, i + n + size);\n    i += size + n;\n\n    if (i > buf.length) {\n      // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'));\n    } // ok, tuple seems good.\n\n\n    tuples.push([code, addr]);\n  }\n\n  return tuples;\n}\n/**\n * Uint8Array -> String\n */\n\nexport function bytesToString(buf) {\n  const a = bytesToTuples(buf);\n  const b = tuplesToStringTuples(a);\n  return stringTuplesToString(b);\n}\n/**\n * String -> Uint8Array\n */\n\nexport function stringToBytes(str) {\n  str = cleanPath(str);\n  const a = stringToStringTuples(str);\n  const b = stringTuplesToTuples(a);\n  return tuplesToBytes(b);\n}\n/**\n * String -> Uint8Array\n */\n\nexport function fromString(str) {\n  return stringToBytes(str);\n}\n/**\n * Uint8Array -> Uint8Array\n */\n\nexport function fromBytes(buf) {\n  const err = validateBytes(buf);\n\n  if (err != null) {\n    throw err;\n  }\n\n  return Uint8Array.from(buf); // copy\n}\nexport function validateBytes(buf) {\n  try {\n    bytesToTuples(buf); // try to parse. will throw if breaks\n  } catch (err) {\n    return err;\n  }\n}\nexport function isValidBytes(buf) {\n  return validateBytes(buf) === undefined;\n}\nexport function cleanPath(str) {\n  return '/' + str.trim().split('/').filter(a => a).join('/');\n}\nexport function ParseError(str) {\n  return new Error('Error parsing address: ' + str);\n}\nexport function protoFromTuple(tup) {\n  const proto = getProtocol(tup[0]);\n  return proto;\n}","map":{"version":3,"mappings":"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","names":["concat","uint8ArrayConcat","toString","uint8ArrayToString","varint","convertToBytes","convertToString","getProtocol","stringToStringTuples","str","tuples","parts","split","slice","length","p","part","proto","size","push","ParseError","path","cleanPath","join","stringTuplesToString","map","tup","protoFromTuple","name","stringTuplesToTuples","Array","isArray","code","tuplesToStringTuples","tuplesToBytes","fromBytes","buf","Uint8Array","from","encode","sizeForAddr","addr","decode","bytes","bytesToTuples","i","n","bytesToString","a","b","stringToBytes","fromString","err","validateBytes","isValidBytes","undefined","trim","filter","Error"],"sources":["/home/legasi/nft-marketplace/node_modules/@multiformats/multiaddr/src/codec.ts"],"sourcesContent":["import { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport varint from 'varint'\nimport { convertToBytes, convertToString } from './convert.js'\nimport { getProtocol } from './protocols-table.js'\nimport type { StringTuple, Tuple, Protocol } from './index.js'\n\n/**\n * string -> [[str name, str addr]... ]\n */\nexport function stringToStringTuples (str: string): string[][] {\n  const tuples = []\n  const parts = str.split('/').slice(1) // skip first empty elem\n  if (parts.length === 1 && parts[0] === '') {\n    return []\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = getProtocol(part)\n\n    if (proto.size === 0) {\n      tuples.push([part])\n      // eslint-disable-next-line no-continue\n      continue\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str)\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path === true) {\n      tuples.push([\n        part,\n        // should we need to check each path part to see if it's a proto?\n        // This would allow for other protocols to be added after a unix path,\n        // however it would have issues if the path had a protocol name in the path\n        cleanPath(parts.slice(p).join('/'))\n      ])\n      break\n    }\n\n    tuples.push([part, parts[p]])\n  }\n\n  return tuples\n}\n\n/**\n * [[str name, str addr]... ] -> string\n */\nexport function stringTuplesToString (tuples: StringTuple[]): string {\n  const parts: string[] = []\n  tuples.map((tup) => {\n    const proto = protoFromTuple(tup)\n    parts.push(proto.name)\n    if (tup.length > 1 && tup[1] != null) {\n      parts.push(tup[1])\n    }\n    return null\n  })\n\n  return cleanPath(parts.join('/'))\n}\n\n/**\n * [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n */\nexport function stringTuplesToTuples (tuples: Array<string[] | string>): Tuple[] {\n  return tuples.map((tup) => {\n    if (!Array.isArray(tup)) {\n      tup = [tup]\n    }\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convertToBytes(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n */\nexport function tuplesToStringTuples (tuples: Tuple[]): StringTuple[] {\n  return tuples.map(tup => {\n    const proto = protoFromTuple(tup)\n    if (tup[1] != null) {\n      return [proto.code, convertToString(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes (tuples: Tuple[]): Uint8Array {\n  return fromBytes(uint8ArrayConcat(tuples.map((tup) => {\n    const proto = protoFromTuple(tup)\n    let buf = Uint8Array.from(varint.encode(proto.code))\n\n    if (tup.length > 1 && tup[1] != null) {\n      buf = uint8ArrayConcat([buf, tup[1]]) // add address buffer\n    }\n\n    return buf\n  })))\n}\n\n/**\n * For the passed address, return the serialized size\n */\nexport function sizeForAddr (p: Protocol, addr: Uint8Array | number[]): number {\n  if (p.size > 0) {\n    return p.size / 8\n  } else if (p.size === 0) {\n    return 0\n  } else {\n    const size = varint.decode(addr)\n    return size + (varint.decode.bytes ?? 0)\n  }\n}\n\nexport function bytesToTuples (buf: Uint8Array): Tuple[] {\n  const tuples: Array<[number, Uint8Array?]> = []\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.decode.bytes ?? 0\n\n    const p = getProtocol(code)\n\n    const size = sizeForAddr(p, buf.slice(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      i += n\n      // eslint-disable-next-line no-continue\n      continue\n    }\n\n    const addr = buf.slice(i + n, i + n + size)\n\n    i += (size + n)\n\n    if (i > buf.length) { // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n  }\n\n  return tuples\n}\n\n/**\n * Uint8Array -> String\n */\nexport function bytesToString (buf: Uint8Array): string {\n  const a = bytesToTuples(buf)\n  const b = tuplesToStringTuples(a)\n  return stringTuplesToString(b)\n}\n\n/**\n * String -> Uint8Array\n */\nexport function stringToBytes (str: string): Uint8Array {\n  str = cleanPath(str)\n  const a = stringToStringTuples(str)\n  const b = stringTuplesToTuples(a)\n\n  return tuplesToBytes(b)\n}\n\n/**\n * String -> Uint8Array\n */\nexport function fromString (str: string): Uint8Array {\n  return stringToBytes(str)\n}\n\n/**\n * Uint8Array -> Uint8Array\n */\nexport function fromBytes (buf: Uint8Array): Uint8Array {\n  const err = validateBytes(buf)\n  if (err != null) {\n    throw err\n  }\n  return Uint8Array.from(buf) // copy\n}\n\nexport function validateBytes (buf: Uint8Array): Error | undefined {\n  try {\n    bytesToTuples(buf) // try to parse. will throw if breaks\n  } catch (err: any) {\n    return err\n  }\n}\n\nexport function isValidBytes (buf: Uint8Array): boolean {\n  return validateBytes(buf) === undefined\n}\n\nexport function cleanPath (str: string): string {\n  return '/' + str.trim().split('/').filter((a) => a).join('/')\n}\n\nexport function ParseError (str: string): Error {\n  return new Error('Error parsing address: ' + str)\n}\n\nexport function protoFromTuple (tup: any[]): Protocol {\n  const proto = getProtocol(tup[0])\n  return proto\n}\n"]},"metadata":{},"sourceType":"module"}