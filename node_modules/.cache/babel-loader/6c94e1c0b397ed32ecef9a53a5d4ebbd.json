{"ast":null,"code":"import { logger } from '@libp2p/logger';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { textToUrlSafeRpc, rpcToText, rpcToBytes, rpcToBigInt } from '../lib/http-rpc-wire-format.js';\nimport { peerIdFromString } from '@libp2p/peer-id';\nconst log = logger('ipfs-http-client:pubsub:subscribe');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('@libp2p/interface-pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker').SubscriptionTracker} subsTracker\n */\n\nexport const createSubscribe = (options, subsTracker) => {\n  return configure(api => {\n    /**\n     * @type {PubsubAPI[\"subscribe\"]}\n     */\n    async function subscribe(topic, handler) {\n      let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      // eslint-disable-line require-await\n      options.signal = subsTracker.subscribe(topic, handler, options.signal);\n      /** @type {(value?: any) => void} */\n\n      let done;\n      /** @type {(error: Error) => void} */\n\n      let fail;\n      const result = new Promise((resolve, reject) => {\n        done = resolve;\n        fail = reject;\n      }); // In Firefox, the initial call to fetch does not resolve until some data\n      // is received. If this doesn't happen within 1 second assume success\n\n      const ffWorkaround = setTimeout(() => done(), 1000); // Do this async to not block Firefox\n\n      api.post('pubsub/sub', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: textToUrlSafeRpc(topic),\n          ...options\n        }),\n        headers: options.headers\n      }).catch(err => {\n        // Initial subscribe fail, ensure we clean up\n        subsTracker.unsubscribe(topic, handler);\n        fail(err);\n      }).then(response => {\n        clearTimeout(ffWorkaround);\n\n        if (!response) {\n          // if there was no response, the subscribe failed\n          return;\n        }\n\n        readMessages(response, {\n          onMessage: message => {\n            if (!handler) {\n              return;\n            }\n\n            if (typeof handler === 'function') {\n              handler(message);\n              return;\n            }\n\n            if (typeof handler.handleEvent === 'function') {\n              handler.handleEvent(message);\n            }\n          },\n          onEnd: () => subsTracker.unsubscribe(topic, handler),\n          onError: options.onError\n        });\n        done();\n      });\n      return result;\n    }\n\n    return subscribe;\n  })(options);\n};\n/**\n * @param {import('ipfs-utils/src/types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\n\nasync function readMessages(response, _ref) {\n  let {\n    onMessage,\n    onEnd,\n    onError\n  } = _ref;\n  onError = onError || log;\n\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue;\n        }\n\n        if (msg.from != null && msg.seqno != null) {\n          onMessage({\n            type: 'signed',\n            from: peerIdFromString(msg.from),\n            data: rpcToBytes(msg.data),\n            sequenceNumber: rpcToBigInt(msg.seqno),\n            topic: rpcToText(msg.topicIDs[0]),\n            key: rpcToBytes(msg.key ?? 'u'),\n            signature: rpcToBytes(msg.signature ?? 'u')\n          });\n        } else {\n          onMessage({\n            type: 'unsigned',\n            data: rpcToBytes(msg.data),\n            topic: rpcToText(msg.topicIDs[0])\n          });\n        }\n      } catch (\n      /** @type {any} */\n      err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`;\n        onError(err, false, msg); // Not fatal\n      }\n    }\n  } catch (\n  /** @type {any} */\n  err) {\n    if (!isAbortError(err)) {\n      onError(err, true); // Fatal\n    }\n  } finally {\n    onEnd();\n  }\n}\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\n\n\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true;\n    // It is `abort` in Electron instead of `aborted`\n\n    case 'abort':\n      return true;\n\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError';\n  }\n};","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/pubsub/subscribe.js"],"names":["logger","configure","toUrlSearchParams","textToUrlSafeRpc","rpcToText","rpcToBytes","rpcToBigInt","peerIdFromString","log","createSubscribe","options","subsTracker","api","subscribe","topic","handler","signal","done","fail","result","Promise","resolve","reject","ffWorkaround","setTimeout","post","searchParams","arg","headers","catch","err","unsubscribe","then","response","clearTimeout","readMessages","onMessage","message","handleEvent","onEnd","onError","msg","ndjson","from","seqno","type","data","sequenceNumber","topicIDs","key","signature","isAbortError","error","name"],"mappings":"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","sourcesContent":["import { logger } from '@libp2p/logger'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { textToUrlSafeRpc, rpcToText, rpcToBytes, rpcToBigInt } from '../lib/http-rpc-wire-format.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\nconst log = logger('ipfs-http-client:pubsub:subscribe')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('@libp2p/interface-pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker').SubscriptionTracker} subsTracker\n */\nexport const createSubscribe = (options, subsTracker) => {\n  return configure((api) => {\n    /**\n     * @type {PubsubAPI[\"subscribe\"]}\n     */\n    async function subscribe (topic, handler, options = {}) { // eslint-disable-line require-await\n      options.signal = subsTracker.subscribe(topic, handler, options.signal)\n\n      /** @type {(value?: any) => void} */\n      let done\n      /** @type {(error: Error) => void} */\n      let fail\n\n      const result = new Promise((resolve, reject) => {\n        done = resolve\n        fail = reject\n      })\n\n      // In Firefox, the initial call to fetch does not resolve until some data\n      // is received. If this doesn't happen within 1 second assume success\n      const ffWorkaround = setTimeout(() => done(), 1000)\n\n      // Do this async to not block Firefox\n      api.post('pubsub/sub', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: textToUrlSafeRpc(topic),\n          ...options\n        }),\n        headers: options.headers\n      })\n        .catch((err) => {\n          // Initial subscribe fail, ensure we clean up\n          subsTracker.unsubscribe(topic, handler)\n\n          fail(err)\n        })\n        .then((response) => {\n          clearTimeout(ffWorkaround)\n\n          if (!response) {\n            // if there was no response, the subscribe failed\n            return\n          }\n\n          readMessages(response, {\n            onMessage: (message) => {\n              if (!handler) {\n                return\n              }\n\n              if (typeof handler === 'function') {\n                handler(message)\n                return\n              }\n\n              if (typeof handler.handleEvent === 'function') {\n                handler.handleEvent(message)\n              }\n            },\n            onEnd: () => subsTracker.unsubscribe(topic, handler),\n            onError: options.onError\n          })\n\n          done()\n        })\n\n      return result\n    }\n    return subscribe\n  })(options)\n}\n\n/**\n * @param {import('ipfs-utils/src/types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\nasync function readMessages (response, { onMessage, onEnd, onError }) {\n  onError = onError || log\n\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue\n        }\n\n        if (msg.from != null && msg.seqno != null) {\n          onMessage({\n            type: 'signed',\n            from: peerIdFromString(msg.from),\n            data: rpcToBytes(msg.data),\n            sequenceNumber: rpcToBigInt(msg.seqno),\n            topic: rpcToText(msg.topicIDs[0]),\n            key: rpcToBytes(msg.key ?? 'u'),\n            signature: rpcToBytes(msg.signature ?? 'u')\n          })\n        } else {\n          onMessage({\n            type: 'unsigned',\n            data: rpcToBytes(msg.data),\n            topic: rpcToText(msg.topicIDs[0])\n          })\n        }\n      } catch (/** @type {any} */ err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`\n        onError(err, false, msg) // Not fatal\n      }\n    }\n  } catch (/** @type {any} */ err) {\n    if (!isAbortError(err)) {\n      onError(err, true) // Fatal\n    }\n  } finally {\n    onEnd()\n  }\n}\n\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true\n    // It is `abort` in Electron instead of `aborted`\n    case 'abort':\n      return true\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError'\n  }\n}\n"]},"metadata":{},"sourceType":"module"}