{"ast":null,"code":"import { objectToCamel } from './lib/object-to-camel.js';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { configure } from './lib/configure.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\nimport { peerIdFromString } from '@libp2p/peer-id';\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createId = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  async function id() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await api.post('id', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    const output = { ...objectToCamel(data)\n    };\n    output.id = peerIdFromString(output.id);\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map((\n      /** @type {string} */\n      ma) => multiaddr(ma));\n    } // @ts-expect-error server output is not typed\n\n\n    return output;\n  }\n\n  return id;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/id.js"],"names":["objectToCamel","multiaddr","configure","toUrlSearchParams","peerIdFromString","createId","api","id","options","res","post","signal","searchParams","arg","peerId","toString","undefined","headers","data","json","output","addresses","map","ma"],"mappings":"AAAA,SAASA,aAAT,QAA8B,0BAA9B;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAGH,SAAS,CAACI,GAAG,IAAI;AACvC;AACF;AACA;AACE,iBAAeC,EAAf,GAAiC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC/B,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,IAAT,EAAe;AAC/BC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADe;AAE/BC,MAAAA,YAAY,EAAET,iBAAiB,CAAC;AAC9BU,QAAAA,GAAG,EAAEL,OAAO,CAACM,MAAR,GAAiBN,OAAO,CAACM,MAAR,CAAeC,QAAf,EAAjB,GAA6CC,SADpB;AAE9B,WAAGR;AAF2B,OAAD,CAFA;AAM/BS,MAAAA,OAAO,EAAET,OAAO,CAACS;AANc,KAAf,CAAlB;AAQA,UAAMC,IAAI,GAAG,MAAMT,GAAG,CAACU,IAAJ,EAAnB;AAEA,UAAMC,MAAM,GAAG,EACb,GAAGpB,aAAa,CAACkB,IAAD;AADH,KAAf;AAIAE,IAAAA,MAAM,CAACb,EAAP,GAAYH,gBAAgB,CAACgB,MAAM,CAACb,EAAR,CAA5B;;AAEA,QAAIa,MAAM,CAACC,SAAX,EAAsB;AACpBD,MAAAA,MAAM,CAACC,SAAP,GAAmBD,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqB;AAAC;AAAsBC,MAAAA,EAAvB,KAA8BtB,SAAS,CAACsB,EAAD,CAA5D,CAAnB;AACD,KAnB8B,CAqB/B;;;AACA,WAAOH,MAAP;AACD;;AACD,SAAOb,EAAP;AACD,CA7BgC,CAA1B","sourcesContent":["import { objectToCamel } from './lib/object-to-camel.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createId = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  async function id (options = {}) {\n    const res = await api.post('id', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    const output = {\n      ...objectToCamel(data)\n    }\n\n    output.id = peerIdFromString(output.id)\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map((/** @type {string} */ ma) => multiaddr(ma))\n    }\n\n    // @ts-expect-error server output is not typed\n    return output\n  }\n  return id\n})\n"]},"metadata":{},"sourceType":"module"}