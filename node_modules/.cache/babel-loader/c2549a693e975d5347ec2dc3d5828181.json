{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'; // @ts-expect-error no types\n\nimport toIterable from 'stream-to-it/source.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createRead = configure(api => {\n  /**\n   * @type {FilesAPI[\"read\"]}\n   */\n  async function* read(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('files/read', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        count: options.length,\n        ...options\n      }),\n      headers: options.headers\n    });\n    yield* toIterable(res.body);\n  }\n\n  return read;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/files/read.js"],"names":["configure","toUrlSearchParams","toIterable","createRead","api","read","path","options","res","post","signal","searchParams","arg","count","length","headers","body"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC,C,CACA;;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAGH,SAAS,CAACI,GAAG,IAAI;AACzC;AACF;AACA;AACE,kBAAiBC,IAAjB,CAAuBC,IAAvB,EAA2C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACzC,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,YAAT,EAAuB;AACvCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADuB;AAEvCC,MAAAA,YAAY,EAAEV,iBAAiB,CAAC;AAC9BW,QAAAA,GAAG,EAAEN,IADyB;AAE9BO,QAAAA,KAAK,EAAEN,OAAO,CAACO,MAFe;AAG9B,WAAGP;AAH2B,OAAD,CAFQ;AAOvCQ,MAAAA,OAAO,EAAER,OAAO,CAACQ;AAPsB,KAAvB,CAAlB;AAUA,WAAQb,UAAU,CAACM,GAAG,CAACQ,IAAL,CAAlB;AACD;;AACD,SAAOX,IAAP;AACD,CAlBkC,CAA5B","sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n// @ts-expect-error no types\nimport toIterable from 'stream-to-it/source.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createRead = configure(api => {\n  /**\n   * @type {FilesAPI[\"read\"]}\n   */\n  async function * read (path, options = {}) {\n    const res = await api.post('files/read', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        count: options.length,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    yield * toIterable(res.body)\n  }\n  return read\n})\n"]},"metadata":{},"sourceType":"module"}