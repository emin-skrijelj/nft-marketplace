{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js';\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n */\n\n/**\n * @param {object} json\n * @param {string} json.Name\n * @param {string} json.Cid\n * @param {Status} json.Status\n * @returns {Pin}\n */\n\nexport const decodePin = _ref => {\n  let {\n    Name: name,\n    Status: status,\n    Cid: cid\n  } = _ref;\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  };\n};\n/**\n * @param {any} service\n * @returns {string}\n */\n\nexport const encodeService = service => {\n  if (typeof service === 'string' && service !== '') {\n    return service;\n  } else {\n    throw new TypeError('service name must be passed');\n  }\n};\n/**\n * @param {any} cid\n * @returns {string}\n */\n\nexport const encodeCID = cid => {\n  if (CID.asCID(cid)) {\n    return cid.toString();\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid}`);\n  }\n};\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\n\nexport const encodeQuery = _ref2 => {\n  let {\n    service,\n    cid,\n    name,\n    status,\n    all\n  } = _ref2;\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  });\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value));\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value);\n    }\n  }\n\n  return query;\n};\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\n\nexport const encodeAddParams = _ref3 => {\n  let {\n    cid,\n    service,\n    background,\n    name,\n    origins\n  } = _ref3;\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  });\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString());\n    }\n  }\n\n  return params;\n};","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/pin/remote/utils.js"],"names":["CID","toUrlSearchParams","decodePin","Name","name","Status","status","Cid","cid","parse","encodeService","service","TypeError","encodeCID","asCID","toString","encodeQuery","all","query","force","undefined","value","append","encodeAddParams","background","origins","params","arg","origin"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,iBAAT,QAAkC,mCAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,SAAS,GAAG,QAA8C;AAAA,MAA7C;AAAEC,IAAAA,IAAI,EAAEC,IAAR;AAAcC,IAAAA,MAAM,EAAEC,MAAtB;AAA8BC,IAAAA,GAAG,EAAEC;AAAnC,GAA6C;AACrE,SAAO;AACLA,IAAAA,GAAG,EAAER,GAAG,CAACS,KAAJ,CAAUD,GAAV,CADA;AAELJ,IAAAA,IAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD,CANM;AAQP;AACA;AACA;AACA;;AACA,OAAO,MAAMI,aAAa,GAAIC,OAAD,IAAa;AACxC,MAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,EAA/C,EAAmD;AACjD,WAAOA,OAAP;AACD,GAFD,MAEO;AACL,UAAM,IAAIC,SAAJ,CAAc,6BAAd,CAAN;AACD;AACF,CANM;AAQP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,SAAS,GAAIL,GAAD,IAAS;AAChC,MAAIR,GAAG,CAACc,KAAJ,CAAUN,GAAV,CAAJ,EAAoB;AAClB,WAAOA,GAAG,CAACO,QAAJ,EAAP;AACD,GAFD,MAEO;AACL,UAAM,IAAIH,SAAJ,CAAe,oCAAmC,OAAOJ,GAAI,EAA7D,CAAN;AACD;AACF,CANM;AAQP;AACA;AACA;AACA;;AACA,OAAO,MAAMQ,WAAW,GAAG,SAAyC;AAAA,MAAxC;AAAEL,IAAAA,OAAF;AAAWH,IAAAA,GAAX;AAAgBJ,IAAAA,IAAhB;AAAsBE,IAAAA,MAAtB;AAA8BW,IAAAA;AAA9B,GAAwC;AAClE,QAAMC,KAAK,GAAGjB,iBAAiB,CAAC;AAC9BU,IAAAA,OAAO,EAAED,aAAa,CAACC,OAAD,CADQ;AAE9BP,IAAAA,IAF8B;AAG9Be,IAAAA,KAAK,EAAEF,GAAG,GAAG,IAAH,GAAUG;AAHU,GAAD,CAA/B;;AAMA,MAAIZ,GAAJ,EAAS;AACP,SAAK,MAAMa,KAAX,IAAoBb,GAApB,EAAyB;AACvBU,MAAAA,KAAK,CAACI,MAAN,CAAa,KAAb,EAAoBT,SAAS,CAACQ,KAAD,CAA7B;AACD;AACF;;AAED,MAAIf,MAAJ,EAAY;AACV,SAAK,MAAMe,KAAX,IAAoBf,MAApB,EAA4B;AAC1BY,MAAAA,KAAK,CAACI,MAAN,CAAa,QAAb,EAAuBD,KAAvB;AACD;AACF;;AAED,SAAOH,KAAP;AACD,CApBM;AAsBP;AACA;AACA;AACA;;AACA,OAAO,MAAMK,eAAe,GAAG,SAAiD;AAAA,MAAhD;AAAEf,IAAAA,GAAF;AAAOG,IAAAA,OAAP;AAAgBa,IAAAA,UAAhB;AAA4BpB,IAAAA,IAA5B;AAAkCqB,IAAAA;AAAlC,GAAgD;AAC9E,QAAMC,MAAM,GAAGzB,iBAAiB,CAAC;AAC/B0B,IAAAA,GAAG,EAAEd,SAAS,CAACL,GAAD,CADiB;AAE/BG,IAAAA,OAAO,EAAED,aAAa,CAACC,OAAD,CAFS;AAG/BP,IAAAA,IAH+B;AAI/BoB,IAAAA,UAAU,EAAEA,UAAU,GAAG,IAAH,GAAUJ;AAJD,GAAD,CAAhC;;AAOA,MAAIK,OAAJ,EAAa;AACX,SAAK,MAAMG,MAAX,IAAqBH,OAArB,EAA8B;AAC5BC,MAAAA,MAAM,CAACJ,MAAP,CAAc,QAAd,EAAwBM,MAAM,CAACb,QAAP,EAAxB;AACD;AACF;;AAED,SAAOW,MAAP;AACD,CAfM","sourcesContent":["import { CID } from 'multiformats/cid'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n */\n\n/**\n * @param {object} json\n * @param {string} json.Name\n * @param {string} json.Cid\n * @param {Status} json.Status\n * @returns {Pin}\n */\nexport const decodePin = ({ Name: name, Status: status, Cid: cid }) => {\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  }\n}\n\n/**\n * @param {any} service\n * @returns {string}\n */\nexport const encodeService = (service) => {\n  if (typeof service === 'string' && service !== '') {\n    return service\n  } else {\n    throw new TypeError('service name must be passed')\n  }\n}\n\n/**\n * @param {any} cid\n * @returns {string}\n */\nexport const encodeCID = (cid) => {\n  if (CID.asCID(cid)) {\n    return cid.toString()\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid}`)\n  }\n}\n\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\nexport const encodeQuery = ({ service, cid, name, status, all }) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  })\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value))\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value)\n    }\n  }\n\n  return query\n}\n\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\nexport const encodeAddParams = ({ cid, service, background, name, origins }) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  })\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString())\n    }\n  }\n\n  return params\n}\n"]},"metadata":{},"sourceType":"module"}