{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { rpcArrayToTextArray } from '../lib/http-rpc-wire-format.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nexport const createLs = configure(api => {\n  /**\n   * @type {PubsubAPI[\"ls\"]}\n   */\n  async function ls() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      Strings\n    } = await (await api.post('pubsub/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json();\n    return rpcArrayToTextArray(Strings) || [];\n  }\n\n  return ls;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/pubsub/ls.js"],"names":["configure","toUrlSearchParams","rpcArrayToTextArray","createLs","api","ls","options","Strings","post","signal","searchParams","headers","json"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,mBAAT,QAAoC,gCAApC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAGH,SAAS,CAACI,GAAG,IAAI;AACvC;AACF;AACA;AACE,iBAAeC,EAAf,GAAiC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC/B,UAAM;AAAEC,MAAAA;AAAF,QAAc,MAAM,CAAC,MAAMH,GAAG,CAACI,IAAJ,CAAS,WAAT,EAAsB;AACrDC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADqC;AAErDC,MAAAA,YAAY,EAAET,iBAAiB,CAACK,OAAD,CAFsB;AAGrDK,MAAAA,OAAO,EAAEL,OAAO,CAACK;AAHoC,KAAtB,CAAP,EAItBC,IAJsB,EAA1B;AAMA,WAAOV,mBAAmB,CAACK,OAAD,CAAnB,IAAgC,EAAvC;AACD;;AACD,SAAOF,EAAP;AACD,CAdgC,CAA1B","sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { rpcArrayToTextArray } from '../lib/http-rpc-wire-format.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nexport const createLs = configure(api => {\n  /**\n   * @type {PubsubAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    const { Strings } = await (await api.post('pubsub/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return rpcArrayToTextArray(Strings) || []\n  }\n  return ls\n})\n"]},"metadata":{},"sourceType":"module"}