{"ast":null,"code":"import { encodeAddParams, decodePin } from './utils.js';\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n/**\n * @param {import('../../lib/core').Client} client\n */\n\nexport function createAdd(client) {\n  /**\n   * @type {RemotePiningAPI[\"add\"]}\n   */\n  async function add(cid, _ref) {\n    let {\n      timeout,\n      signal,\n      headers,\n      ...query\n    } = _ref;\n    const response = await client.post('pin/remote/add', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeAddParams({\n        cid,\n        ...query\n      })\n    });\n    return decodePin(await response.json());\n  }\n\n  return add;\n}","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/pin/remote/add.js"],"names":["encodeAddParams","decodePin","createAdd","client","add","cid","timeout","signal","headers","query","response","post","searchParams","json"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,SAA1B,QAA2C,YAA3C;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAoBC,MAApB,EAA4B;AACjC;AACF;AACA;AACE,iBAAeC,GAAf,CAAoBC,GAApB,QAAiE;AAAA,QAAxC;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,MAAX;AAAmBC,MAAAA,OAAnB;AAA4B,SAAGC;AAA/B,KAAwC;AAC/D,UAAMC,QAAQ,GAAG,MAAMP,MAAM,CAACQ,IAAP,CAAY,gBAAZ,EAA8B;AACnDL,MAAAA,OADmD;AAEnDC,MAAAA,MAFmD;AAGnDC,MAAAA,OAHmD;AAInDI,MAAAA,YAAY,EAAEZ,eAAe,CAAC;AAAEK,QAAAA,GAAF;AAAO,WAAGI;AAAV,OAAD;AAJsB,KAA9B,CAAvB;AAOA,WAAOR,SAAS,CAAC,MAAMS,QAAQ,CAACG,IAAT,EAAP,CAAhB;AACD;;AAED,SAAOT,GAAP;AACD","sourcesContent":["import { encodeAddParams, decodePin } from './utils.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createAdd (client) {\n  /**\n   * @type {RemotePiningAPI[\"add\"]}\n   */\n  async function add (cid, { timeout, signal, headers, ...query }) {\n    const response = await client.post('pin/remote/add', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeAddParams({ cid, ...query })\n    })\n\n    return decodePin(await response.json())\n  }\n\n  return add\n}\n"]},"metadata":{},"sourceType":"module"}