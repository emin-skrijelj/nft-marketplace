{"ast":null,"code":"import debug from 'debug';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base64 } from 'multiformats/bases/base64'; // Add a formatter for converting to a base58 string\n\ndebug.formatters.b = v => {\n  return v == null ? 'undefined' : base58btc.baseEncode(v);\n}; // Add a formatter for converting to a base32 string\n\n\ndebug.formatters.t = v => {\n  return v == null ? 'undefined' : base32.baseEncode(v);\n}; // Add a formatter for converting to a base64 string\n\n\ndebug.formatters.m = v => {\n  return v == null ? 'undefined' : base64.baseEncode(v);\n}; // Add a formatter for stringifying peer ids\n\n\ndebug.formatters.p = v => {\n  return v == null ? 'undefined' : v.toString();\n}; // Add a formatter for stringifying CIDs\n\n\ndebug.formatters.c = v => {\n  return v == null ? 'undefined' : v.toString();\n}; // Add a formatter for stringifying Datastore keys\n\n\ndebug.formatters.k = v => {\n  return v == null ? 'undefined' : v.toString();\n}; // Add a formatter for stringifying Multiaddrs\n\n\ndebug.formatters.a = v => {\n  return v == null ? 'undefined' : v.toString();\n};\n\nfunction createDisabledLogger(namespace) {\n  const logger = () => {};\n\n  logger.enabled = false;\n  logger.color = '';\n  logger.diff = 0;\n\n  logger.log = () => {};\n\n  logger.namespace = namespace;\n\n  logger.destroy = () => true;\n\n  logger.extend = () => logger;\n\n  return logger;\n}\n\nexport function logger(name) {\n  // trace logging is a no-op by default\n  let trace = createDisabledLogger(`${name}:trace`); // look at all the debug names and see if trace logging has explicitly been enabled\n\n  if (debug.enabled(`${name}:trace`) && debug.names.map(r => r.toString()).find(n => n.includes(':trace')) != null) {\n    trace = debug(`${name}:trace`);\n  }\n\n  return Object.assign(debug(name), {\n    error: debug(`${name}:error`),\n    trace\n  });\n}\nexport function disable() {\n  debug.disable();\n}\nexport function enable(namespaces) {\n  debug.enable(namespaces);\n}\nexport function enabled(namespaces) {\n  return debug.enabled(namespaces);\n}","map":{"version":3,"mappings":"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","names":["debug","base58btc","base32","base64","formatters","b","v","baseEncode","t","m","p","toString","c","k","a","createDisabledLogger","namespace","logger","enabled","color","diff","log","destroy","extend","name","trace","names","map","r","find","n","includes","Object","assign","error","disable","enable","namespaces"],"sources":["/home/legasi/nft-marketplace/node_modules/@libp2p/logger/src/index.ts"],"sourcesContent":["import debug from 'debug'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { base32 } from 'multiformats/bases/base32'\nimport { base64 } from 'multiformats/bases/base64'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { CID } from 'multiformats/cid'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { Key } from 'interface-datastore'\n\n// Add a formatter for converting to a base58 string\ndebug.formatters.b = (v?: Uint8Array): string => {\n  return v == null ? 'undefined' : base58btc.baseEncode(v)\n}\n\n// Add a formatter for converting to a base32 string\ndebug.formatters.t = (v?: Uint8Array): string => {\n  return v == null ? 'undefined' : base32.baseEncode(v)\n}\n\n// Add a formatter for converting to a base64 string\ndebug.formatters.m = (v?: Uint8Array): string => {\n  return v == null ? 'undefined' : base64.baseEncode(v)\n}\n\n// Add a formatter for stringifying peer ids\ndebug.formatters.p = (v?: PeerId): string => {\n  return v == null ? 'undefined' : v.toString()\n}\n\n// Add a formatter for stringifying CIDs\ndebug.formatters.c = (v?: CID): string => {\n  return v == null ? 'undefined' : v.toString()\n}\n\n// Add a formatter for stringifying Datastore keys\ndebug.formatters.k = (v: Key): string => {\n  return v == null ? 'undefined' : v.toString()\n}\n\n// Add a formatter for stringifying Multiaddrs\ndebug.formatters.a = (v?: Multiaddr): string => {\n  return v == null ? 'undefined' : v.toString()\n}\n\nexport interface Logger {\n  (formatter: any, ...args: any[]): void\n  error: (formatter: any, ...args: any[]) => void\n  trace: (formatter: any, ...args: any[]) => void\n  enabled: boolean\n}\n\nfunction createDisabledLogger (namespace: string): debug.Debugger {\n  const logger = (): void => {}\n  logger.enabled = false\n  logger.color = ''\n  logger.diff = 0\n  logger.log = (): void => {}\n  logger.namespace = namespace\n  logger.destroy = () => true\n  logger.extend = () => logger\n\n  return logger\n}\n\nexport function logger (name: string): Logger {\n  // trace logging is a no-op by default\n  let trace: debug.Debugger = createDisabledLogger(`${name}:trace`)\n\n  // look at all the debug names and see if trace logging has explicitly been enabled\n  if (debug.enabled(`${name}:trace`) && debug.names.map(r => r.toString()).find(n => n.includes(':trace')) != null) {\n    trace = debug(`${name}:trace`)\n  }\n\n  return Object.assign(debug(name), {\n    error: debug(`${name}:error`),\n    trace\n  })\n}\n\nexport function disable (): void {\n  debug.disable()\n}\n\nexport function enable (namespaces: string): void {\n  debug.enable(namespaces)\n}\n\nexport function enabled (namespaces: string): boolean {\n  return debug.enabled(namespaces)\n}\n"]},"metadata":{},"sourceType":"module"}