{"ast":null,"code":"import errcode from 'err-code';\nimport * as Pb from './unixfs.js';\nconst PBData = Pb.Data;\n/**\n * @typedef {import('./types').Mtime} Mtime\n * @typedef {import('./types').MtimeLike} MtimeLike\n */\n\nconst types = ['raw', 'directory', 'file', 'metadata', 'symlink', 'hamt-sharded-directory'];\nconst dirTypes = ['directory', 'hamt-sharded-directory'];\nconst DEFAULT_FILE_MODE = parseInt('0644', 8);\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8);\n/**\n * @param {string | number | undefined} [mode]\n */\n\nexport function parseMode(mode) {\n  if (mode == null) {\n    return undefined;\n  }\n\n  if (typeof mode === 'number') {\n    return mode & 0xFFF;\n  }\n\n  mode = mode.toString();\n\n  if (mode.substring(0, 1) === '0') {\n    // octal string\n    return parseInt(mode, 8) & 0xFFF;\n  } // decimal string\n\n\n  return parseInt(mode, 10) & 0xFFF;\n}\n/**\n * @param {any} input\n */\n\nexport function parseMtime(input) {\n  if (input == null) {\n    return undefined;\n  }\n  /** @type {Mtime | undefined} */\n\n\n  let mtime; // { secs, nsecs }\n\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    };\n  } // UnixFS TimeSpec\n\n\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    };\n  } // process.hrtime()\n\n\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    };\n  } // Javascript Date\n\n\n  if (input instanceof Date) {\n    const ms = input.getTime();\n    const secs = Math.floor(ms / 1000);\n    mtime = {\n      secs: secs,\n      nsecs: (ms - secs * 1000) * 1000\n    };\n  }\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n   // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n     mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined;\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');\n  }\n\n  return mtime;\n}\n\nclass UnixFS {\n  /**\n   * Decode from protobuf https://github.com/ipfs/specs/blob/master/UNIXFS.md\n   *\n   * @param {Uint8Array} marshaled\n   */\n  static unmarshal(marshaled) {\n    const message = PBData.decode(marshaled);\n    const decoded = PBData.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    });\n    const data = new UnixFS({\n      type: types[decoded.Type],\n      data: decoded.Data,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.mode,\n      mtime: decoded.mtime ? {\n        secs: decoded.mtime.Seconds,\n        nsecs: decoded.mtime.FractionalNanoseconds\n      } : undefined\n    }); // make sure we honour the original mode\n\n    data._originalMode = decoded.mode || 0;\n    return data;\n  }\n  /**\n   * @param {object} [options]\n   * @param {string} [options.type='file']\n   * @param {Uint8Array} [options.data]\n   * @param {number[]} [options.blockSizes]\n   * @param {number} [options.hashType]\n   * @param {number} [options.fanout]\n   * @param {MtimeLike | null} [options.mtime]\n   * @param {number | string} [options.mode]\n   */\n\n\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      type: 'file'\n    };\n    const {\n      type,\n      data,\n      blockSizes,\n      hashType,\n      fanout,\n      mtime,\n      mode\n    } = options;\n\n    if (type && !types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n\n    this.type = type || 'file';\n    this.data = data;\n    this.hashType = hashType;\n    this.fanout = fanout;\n    /** @type {number[]} */\n\n    this.blockSizes = blockSizes || [];\n    this._originalMode = 0;\n    this.mode = parseMode(mode);\n\n    if (mtime) {\n      this.mtime = parseMtime(mtime);\n\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0;\n      }\n    }\n  }\n  /**\n   * @param {number | undefined} mode\n   */\n\n\n  set mode(mode) {\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE;\n    const parsedMode = parseMode(mode);\n\n    if (parsedMode !== undefined) {\n      this._mode = parsedMode;\n    }\n  }\n  /**\n   * @returns {number | undefined}\n   */\n\n\n  get mode() {\n    return this._mode;\n  }\n\n  isDirectory() {\n    return Boolean(this.type && dirTypes.includes(this.type));\n  }\n  /**\n   * @param {number} size\n   */\n\n\n  addBlockSize(size) {\n    this.blockSizes.push(size);\n  }\n  /**\n   * @param {number} index\n   */\n\n\n  removeBlockSize(index) {\n    this.blockSizes.splice(index, 1);\n  }\n  /**\n   * Returns `0` for directories or `data.length + sum(blockSizes)` for everything else\n   */\n\n\n  fileSize() {\n    if (this.isDirectory()) {\n      // dirs don't have file size\n      return 0;\n    }\n\n    let sum = 0;\n    this.blockSizes.forEach(size => {\n      sum += size;\n    });\n\n    if (this.data) {\n      sum += this.data.length;\n    }\n\n    return sum;\n  }\n  /**\n   * encode to protobuf Uint8Array\n   */\n\n\n  marshal() {\n    let type;\n\n    switch (this.type) {\n      case 'raw':\n        type = PBData.DataType.Raw;\n        break;\n\n      case 'directory':\n        type = PBData.DataType.Directory;\n        break;\n\n      case 'file':\n        type = PBData.DataType.File;\n        break;\n\n      case 'metadata':\n        type = PBData.DataType.Metadata;\n        break;\n\n      case 'symlink':\n        type = PBData.DataType.Symlink;\n        break;\n\n      case 'hamt-sharded-directory':\n        type = PBData.DataType.HAMTShard;\n        break;\n\n      default:\n        throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n\n    let data = this.data;\n\n    if (!this.data || !this.data.length) {\n      data = undefined;\n    }\n\n    let mode;\n\n    if (this.mode != null) {\n      mode = this._originalMode & 0xFFFFF000 | (parseMode(this.mode) || 0);\n\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n        mode = undefined;\n      }\n\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined;\n      }\n    }\n\n    let mtime;\n\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime);\n\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        };\n\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds;\n        }\n      }\n    }\n\n    const pbData = {\n      Type: type,\n      Data: data,\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\n      blocksizes: this.blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    };\n    return PBData.encode(pbData).finish();\n  }\n\n}\n\nexport { UnixFS };","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-unixfs/src/index.js"],"names":["errcode","Pb","PBData","Data","types","dirTypes","DEFAULT_FILE_MODE","parseInt","DEFAULT_DIRECTORY_MODE","parseMode","mode","undefined","toString","substring","parseMtime","input","mtime","secs","nsecs","Seconds","FractionalNanoseconds","Array","isArray","Date","ms","getTime","Math","floor","Object","prototype","hasOwnProperty","call","Error","UnixFS","unmarshal","marshaled","message","decode","decoded","toObject","defaults","arrays","longs","Number","objects","data","type","Type","blockSizes","blocksizes","_originalMode","constructor","options","hashType","fanout","includes","_mode","isDirectory","parsedMode","Boolean","addBlockSize","size","push","removeBlockSize","index","splice","fileSize","sum","forEach","length","marshal","DataType","Raw","Directory","File","Metadata","Symlink","HAMTShard","parsed","pbData","filesize","encode","finish"],"mappings":"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","sourcesContent":["import errcode from 'err-code'\nimport * as Pb from './unixfs.js'\nconst PBData = Pb.Data\n\n/**\n * @typedef {import('./types').Mtime} Mtime\n * @typedef {import('./types').MtimeLike} MtimeLike\n */\n\nconst types = [\n  'raw',\n  'directory',\n  'file',\n  'metadata',\n  'symlink',\n  'hamt-sharded-directory'\n]\n\nconst dirTypes = [\n  'directory',\n  'hamt-sharded-directory'\n]\n\nconst DEFAULT_FILE_MODE = parseInt('0644', 8)\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8)\n\n/**\n * @param {string | number | undefined} [mode]\n */\nexport function parseMode (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'number') {\n    return mode & 0xFFF\n  }\n\n  mode = mode.toString()\n\n  if (mode.substring(0, 1) === '0') {\n    // octal string\n    return parseInt(mode, 8) & 0xFFF\n  }\n\n  // decimal string\n  return parseInt(mode, 10) & 0xFFF\n}\n\n/**\n * @param {any} input\n */\nexport function parseMtime (input) {\n  if (input == null) {\n    return undefined\n  }\n\n  /** @type {Mtime | undefined} */\n  let mtime\n\n  // { secs, nsecs }\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    }\n  }\n\n  // UnixFS TimeSpec\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    }\n  }\n\n  // process.hrtime()\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    }\n  }\n\n  // Javascript Date\n  if (input instanceof Date) {\n    const ms = input.getTime()\n    const secs = Math.floor(ms / 1000)\n\n    mtime = {\n      secs: secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n\n  // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n\n    mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS')\n  }\n\n  return mtime\n}\n\nclass UnixFS {\n  /**\n   * Decode from protobuf https://github.com/ipfs/specs/blob/master/UNIXFS.md\n   *\n   * @param {Uint8Array} marshaled\n   */\n  static unmarshal (marshaled) {\n    const message = PBData.decode(marshaled)\n    const decoded = PBData.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    })\n\n    const data = new UnixFS({\n      type: types[decoded.Type],\n      data: decoded.Data,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.mode,\n      mtime: decoded.mtime\n        ? {\n            secs: decoded.mtime.Seconds,\n            nsecs: decoded.mtime.FractionalNanoseconds\n          }\n        : undefined\n    })\n\n    // make sure we honour the original mode\n    data._originalMode = decoded.mode || 0\n\n    return data\n  }\n\n  /**\n   * @param {object} [options]\n   * @param {string} [options.type='file']\n   * @param {Uint8Array} [options.data]\n   * @param {number[]} [options.blockSizes]\n   * @param {number} [options.hashType]\n   * @param {number} [options.fanout]\n   * @param {MtimeLike | null} [options.mtime]\n   * @param {number | string} [options.mode]\n   */\n  constructor (options = {\n    type: 'file'\n  }) {\n    const {\n      type,\n      data,\n      blockSizes,\n      hashType,\n      fanout,\n      mtime,\n      mode\n    } = options\n\n    if (type && !types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    this.type = type || 'file'\n    this.data = data\n    this.hashType = hashType\n    this.fanout = fanout\n\n    /** @type {number[]} */\n    this.blockSizes = blockSizes || []\n    this._originalMode = 0\n    this.mode = parseMode(mode)\n\n    if (mtime) {\n      this.mtime = parseMtime(mtime)\n\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0\n      }\n    }\n  }\n\n  /**\n   * @param {number | undefined} mode\n   */\n  set mode (mode) {\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE\n\n    const parsedMode = parseMode(mode)\n\n    if (parsedMode !== undefined) {\n      this._mode = parsedMode\n    }\n  }\n\n  /**\n   * @returns {number | undefined}\n   */\n  get mode () {\n    return this._mode\n  }\n\n  isDirectory () {\n    return Boolean(this.type && dirTypes.includes(this.type))\n  }\n\n  /**\n   * @param {number} size\n   */\n  addBlockSize (size) {\n    this.blockSizes.push(size)\n  }\n\n  /**\n   * @param {number} index\n   */\n  removeBlockSize (index) {\n    this.blockSizes.splice(index, 1)\n  }\n\n  /**\n   * Returns `0` for directories or `data.length + sum(blockSizes)` for everything else\n   */\n  fileSize () {\n    if (this.isDirectory()) {\n      // dirs don't have file size\n      return 0\n    }\n\n    let sum = 0\n    this.blockSizes.forEach((size) => {\n      sum += size\n    })\n\n    if (this.data) {\n      sum += this.data.length\n    }\n\n    return sum\n  }\n\n  /**\n   * encode to protobuf Uint8Array\n   */\n  marshal () {\n    let type\n\n    switch (this.type) {\n      case 'raw': type = PBData.DataType.Raw; break\n      case 'directory': type = PBData.DataType.Directory; break\n      case 'file': type = PBData.DataType.File; break\n      case 'metadata': type = PBData.DataType.Metadata; break\n      case 'symlink': type = PBData.DataType.Symlink; break\n      case 'hamt-sharded-directory': type = PBData.DataType.HAMTShard; break\n      default:\n        throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    let data = this.data\n\n    if (!this.data || !this.data.length) {\n      data = undefined\n    }\n\n    let mode\n\n    if (this.mode != null) {\n      mode = (this._originalMode & 0xFFFFF000) | (parseMode(this.mode) || 0)\n\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n        mode = undefined\n      }\n\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined\n      }\n    }\n\n    let mtime\n\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime)\n\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        }\n\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds\n        }\n      }\n    }\n\n    const pbData = {\n      Type: type,\n      Data: data,\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\n      blocksizes: this.blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    }\n\n    return PBData.encode(pbData).finish()\n  }\n}\n\nexport { UnixFS }\n"]},"metadata":{},"sourceType":"module"}