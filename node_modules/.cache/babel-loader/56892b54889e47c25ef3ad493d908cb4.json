{"ast":null,"code":"'use strict';\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n * @template T\n * @param {ReadableStream<T>} stream\n * @param {Object} [options]\n * @param {boolean} [options.preventCancel=boolean]\n * @returns {AsyncIterable<T>}\n */\n\nasync function* browserReadableStreamToIt(stream) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const reader = stream.getReader();\n\n  try {\n    while (true) {\n      const result = await reader.read();\n\n      if (result.done) {\n        return;\n      }\n\n      yield result.value;\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      reader.cancel();\n    }\n\n    reader.releaseLock();\n  }\n}\n\nmodule.exports = browserReadableStreamToIt;","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-utils/node_modules/browser-readablestream-to-it/index.js"],"names":["browserReadableStreamToIt","stream","options","reader","getReader","result","read","done","value","preventCancel","cancel","releaseLock","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAiBA,yBAAjB,CAA4CC,MAA5C,EAAkE;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAChE,QAAMC,MAAM,GAAGF,MAAM,CAACG,SAAP,EAAf;;AAEA,MAAI;AACF,WAAO,IAAP,EAAa;AACX,YAAMC,MAAM,GAAG,MAAMF,MAAM,CAACG,IAAP,EAArB;;AAEA,UAAID,MAAM,CAACE,IAAX,EAAiB;AACf;AACD;;AAED,YAAMF,MAAM,CAACG,KAAb;AACD;AACF,GAVD,SAUU;AACR,QAAIN,OAAO,CAACO,aAAR,KAA0B,IAA9B,EAAoC;AAClCN,MAAAA,MAAM,CAACO,MAAP;AACD;;AAEDP,IAAAA,MAAM,CAACQ,WAAP;AACD;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiBb,yBAAjB","sourcesContent":["'use strict'\n\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n * @template T\n * @param {ReadableStream<T>} stream\n * @param {Object} [options]\n * @param {boolean} [options.preventCancel=boolean]\n * @returns {AsyncIterable<T>}\n */\nasync function * browserReadableStreamToIt (stream, options = {}) {\n  const reader = stream.getReader()\n\n  try {\n    while (true) {\n      const result = await reader.read()\n\n      if (result.done) {\n        return\n      }\n\n      yield result.value\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      reader.cancel()\n    }\n\n    reader.releaseLock()\n  }\n}\n\nmodule.exports = browserReadableStreamToIt\n"]},"metadata":{},"sourceType":"script"}