{"ast":null,"code":"/**\n * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinServiceWithStat} RemotePinServiceWithStat\n */\n\n/**\n * @param {URL} url\n */\nexport function encodeEndpoint(url) {\n  const href = String(url);\n\n  if (href === 'undefined') {\n    throw Error('endpoint is required');\n  } // Workaround trailing `/` issue in go-ipfs\n  // @see https://github.com/ipfs/go-ipfs/issues/7826\n\n\n  return href[href.length - 1] === '/' ? href.slice(0, -1) : href;\n}\n/**\n * @param {any} json\n * @returns {RemotePinServiceWithStat}\n */\n\nexport function decodeRemoteService(json) {\n  return {\n    service: json.Service,\n    endpoint: new URL(json.ApiEndpoint),\n    ...(json.Stat && {\n      stat: decodeStat(json.Stat)\n    })\n  };\n}\n/**\n * @param {any} json\n * @returns {import('ipfs-core-types/src/pin/remote/service').Stat}\n */\n\nexport function decodeStat(json) {\n  switch (json.Status) {\n    case 'valid':\n      {\n        const {\n          Pinning,\n          Pinned,\n          Queued,\n          Failed\n        } = json.PinCount;\n        return {\n          status: 'valid',\n          pinCount: {\n            queued: Queued,\n            pinning: Pinning,\n            pinned: Pinned,\n            failed: Failed\n          }\n        };\n      }\n\n    case 'invalid':\n      {\n        return {\n          status: 'invalid'\n        };\n      }\n\n    default:\n      {\n        return {\n          status: json.Status\n        };\n      }\n  }\n}","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/pin/remote/service/utils.js"],"names":["encodeEndpoint","url","href","String","Error","length","slice","decodeRemoteService","json","service","Service","endpoint","URL","ApiEndpoint","Stat","stat","decodeStat","Status","Pinning","Pinned","Queued","Failed","PinCount","status","pinCount","queued","pinning","pinned","failed"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,SAASA,cAAT,CAAyBC,GAAzB,EAA8B;AACnC,QAAMC,IAAI,GAAGC,MAAM,CAACF,GAAD,CAAnB;;AACA,MAAIC,IAAI,KAAK,WAAb,EAA0B;AACxB,UAAME,KAAK,CAAC,sBAAD,CAAX;AACD,GAJkC,CAKnC;AACA;;;AACA,SAAOF,IAAI,CAACA,IAAI,CAACG,MAAL,GAAc,CAAf,CAAJ,KAA0B,GAA1B,GAAgCH,IAAI,CAACI,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAhC,GAAoDJ,IAA3D;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASK,mBAAT,CAA8BC,IAA9B,EAAoC;AACzC,SAAO;AACLC,IAAAA,OAAO,EAAED,IAAI,CAACE,OADT;AAELC,IAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQJ,IAAI,CAACK,WAAb,CAFL;AAGL,QAAIL,IAAI,CAACM,IAAL,IAAa;AAAEC,MAAAA,IAAI,EAAEC,UAAU,CAACR,IAAI,CAACM,IAAN;AAAlB,KAAjB;AAHK,GAAP;AAKD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASE,UAAT,CAAqBR,IAArB,EAA2B;AAChC,UAAQA,IAAI,CAACS,MAAb;AACE,SAAK,OAAL;AAAc;AACZ,cAAM;AAAEC,UAAAA,OAAF;AAAWC,UAAAA,MAAX;AAAmBC,UAAAA,MAAnB;AAA2BC,UAAAA;AAA3B,YAAsCb,IAAI,CAACc,QAAjD;AACA,eAAO;AACLC,UAAAA,MAAM,EAAE,OADH;AAELC,UAAAA,QAAQ,EAAE;AACRC,YAAAA,MAAM,EAAEL,MADA;AAERM,YAAAA,OAAO,EAAER,OAFD;AAGRS,YAAAA,MAAM,EAAER,MAHA;AAIRS,YAAAA,MAAM,EAAEP;AAJA;AAFL,SAAP;AASD;;AACD,SAAK,SAAL;AAAgB;AACd,eAAO;AAAEE,UAAAA,MAAM,EAAE;AAAV,SAAP;AACD;;AACD;AAAS;AACP,eAAO;AAAEA,UAAAA,MAAM,EAAEf,IAAI,CAACS;AAAf,SAAP;AACD;AAlBH;AAoBD","sourcesContent":["/**\n * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinServiceWithStat} RemotePinServiceWithStat\n */\n\n/**\n * @param {URL} url\n */\nexport function encodeEndpoint (url) {\n  const href = String(url)\n  if (href === 'undefined') {\n    throw Error('endpoint is required')\n  }\n  // Workaround trailing `/` issue in go-ipfs\n  // @see https://github.com/ipfs/go-ipfs/issues/7826\n  return href[href.length - 1] === '/' ? href.slice(0, -1) : href\n}\n\n/**\n * @param {any} json\n * @returns {RemotePinServiceWithStat}\n */\nexport function decodeRemoteService (json) {\n  return {\n    service: json.Service,\n    endpoint: new URL(json.ApiEndpoint),\n    ...(json.Stat && { stat: decodeStat(json.Stat) })\n  }\n}\n\n/**\n * @param {any} json\n * @returns {import('ipfs-core-types/src/pin/remote/service').Stat}\n */\nexport function decodeStat (json) {\n  switch (json.Status) {\n    case 'valid': {\n      const { Pinning, Pinned, Queued, Failed } = json.PinCount\n      return {\n        status: 'valid',\n        pinCount: {\n          queued: Queued,\n          pinning: Pinning,\n          pinned: Pinned,\n          failed: Failed\n        }\n      }\n    }\n    case 'invalid': {\n      return { status: 'invalid' }\n    }\n    default: {\n      return { status: json.Status }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}