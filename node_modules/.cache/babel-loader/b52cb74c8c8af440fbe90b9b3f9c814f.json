{"ast":null,"code":"import { toUrlSearchParams } from '../../../lib/to-url-search-params.js';\nimport { decodeRemoteService } from './utils.js';\n/**\n * @typedef {import('../../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI\n */\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\n\nexport function createLs(client) {\n  /**\n   * @type {RemotePiningServiceAPI[\"ls\"]}\n   */\n  async function ls() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // @ts-expect-error cannot derive option type from typedef\n    const {\n      stat,\n      headers,\n      timeout,\n      signal\n    } = options;\n    const response = await client.post('pin/remote/service/ls', {\n      timeout,\n      signal,\n      headers,\n      searchParams: stat === true ? toUrlSearchParams({\n        stat\n      }) : undefined\n    });\n    /** @type {{RemoteServices: object[]}} */\n\n    const {\n      RemoteServices\n    } = await response.json();\n    return RemoteServices.map(decodeRemoteService);\n  }\n\n  return ls;\n}","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/pin/remote/service/ls.js"],"names":["toUrlSearchParams","decodeRemoteService","createLs","client","ls","options","stat","headers","timeout","signal","response","post","searchParams","undefined","RemoteServices","json","map"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,sCAAlC;AACA,SAASC,mBAAT,QAAoC,YAApC;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAmBC,MAAnB,EAA2B;AAChC;AACF;AACA;AACE,iBAAeC,EAAf,GAAiC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC/B;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA,OAAjB;AAA0BC,MAAAA;AAA1B,QAAqCJ,OAA3C;AAEA,UAAMK,QAAQ,GAAG,MAAMP,MAAM,CAACQ,IAAP,CAAY,uBAAZ,EAAqC;AAC1DH,MAAAA,OAD0D;AAE1DC,MAAAA,MAF0D;AAG1DF,MAAAA,OAH0D;AAI1DK,MAAAA,YAAY,EAAEN,IAAI,KAAK,IAAT,GAAgBN,iBAAiB,CAAC;AAAEM,QAAAA;AAAF,OAAD,CAAjC,GAA8CO;AAJF,KAArC,CAAvB;AAOA;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAqB,MAAMJ,QAAQ,CAACK,IAAT,EAAjC;AAEA,WAAOD,cAAc,CAACE,GAAf,CAAmBf,mBAAnB,CAAP;AACD;;AAED,SAAOG,EAAP;AACD","sourcesContent":["import { toUrlSearchParams } from '../../../lib/to-url-search-params.js'\nimport { decodeRemoteService } from './utils.js'\n\n/**\n * @typedef {import('../../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI\n */\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\nexport function createLs (client) {\n  /**\n   * @type {RemotePiningServiceAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    // @ts-expect-error cannot derive option type from typedef\n    const { stat, headers, timeout, signal } = options\n\n    const response = await client.post('pin/remote/service/ls', {\n      timeout,\n      signal,\n      headers,\n      searchParams: stat === true ? toUrlSearchParams({ stat }) : undefined\n    })\n\n    /** @type {{RemoteServices: object[]}} */\n    const { RemoteServices } = await response.json()\n\n    return RemoteServices.map(decodeRemoteService)\n  }\n\n  return ls\n}\n"]},"metadata":{},"sourceType":"module"}