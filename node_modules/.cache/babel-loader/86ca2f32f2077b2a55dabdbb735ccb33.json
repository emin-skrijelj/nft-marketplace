{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createCp = configure(api => {\n  /**\n   * @type {FilesAPI[\"cp\"]}\n   */\n  async function cp(sources, destination) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const sourceArr = Array.isArray(sources) ? sources : [sources];\n    const res = await api.post('files/cp', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sourceArr.concat(destination).map(src => CID.asCID(src) ? `/ipfs/${src}` : src),\n        ...options\n      }),\n      headers: options.headers\n    });\n    await res.text();\n  }\n\n  return cp;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/files/cp.js"],"names":["CID","configure","toUrlSearchParams","createCp","api","cp","sources","destination","options","sourceArr","Array","isArray","res","post","signal","searchParams","arg","concat","map","src","asCID","headers","text"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAACG,GAAG,IAAI;AACvC;AACF;AACA;AACE,iBAAeC,EAAf,CAAmBC,OAAnB,EAA4BC,WAA5B,EAAuD;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AACrD;AACA,UAAMC,SAAS,GAAGC,KAAK,CAACC,OAAN,CAAcL,OAAd,IAAyBA,OAAzB,GAAmC,CAACA,OAAD,CAArD;AAEA,UAAMM,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,UAAT,EAAqB;AACrCC,MAAAA,MAAM,EAAEN,OAAO,CAACM,MADqB;AAErCC,MAAAA,YAAY,EAAEb,iBAAiB,CAAC;AAC9Bc,QAAAA,GAAG,EAAEP,SAAS,CAACQ,MAAV,CAAiBV,WAAjB,EAA8BW,GAA9B,CAAkCC,GAAG,IAAInB,GAAG,CAACoB,KAAJ,CAAUD,GAAV,IAAkB,SAAQA,GAAI,EAA9B,GAAkCA,GAA3E,CADyB;AAE9B,WAAGX;AAF2B,OAAD,CAFM;AAMrCa,MAAAA,OAAO,EAAEb,OAAO,CAACa;AANoB,KAArB,CAAlB;AASA,UAAMT,GAAG,CAACU,IAAJ,EAAN;AACD;;AACD,SAAOjB,EAAP;AACD,CApBgC,CAA1B","sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createCp = configure(api => {\n  /**\n   * @type {FilesAPI[\"cp\"]}\n   */\n  async function cp (sources, destination, options = {}) {\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const sourceArr = Array.isArray(sources) ? sources : [sources]\n\n    const res = await api.post('files/cp', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sourceArr.concat(destination).map(src => CID.asCID(src) ? `/ipfs/${src}` : src),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return cp\n})\n"]},"metadata":{},"sourceType":"module"}