{"ast":null,"code":"/* eslint-env browser */\nimport { isMultiaddr } from '@multiformats/multiaddr';\nimport { isBrowser, isWebWorker, isNode } from 'ipfs-utils/src/env.js';\nimport parseDuration from 'parse-duration';\nimport { logger } from '@libp2p/logger';\nimport HTTP from 'ipfs-utils/src/http.js';\nimport mergeOpts from 'merge-options';\nimport { toUrlString } from 'ipfs-core-utils/to-url-string';\nimport getAgent from 'ipfs-core-utils/agent';\nconst log = logger('ipfs-http-client:lib:error-handler');\nconst merge = mergeOpts.bind({\n  ignoreUndefined: true\n});\nconst DEFAULT_PROTOCOL = isBrowser || isWebWorker ? location.protocol : 'http';\nconst DEFAULT_HOST = isBrowser || isWebWorker ? location.hostname : 'localhost';\nconst DEFAULT_PORT = isBrowser || isWebWorker ? location.port : '5001';\n/**\n * @typedef {import('ipfs-utils/src/types').HTTPOptions} HTTPOptions\n * @typedef {import('../types').Options} Options\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {Options|URL|Multiaddr|string} [options]\n * @returns {Options}\n */\n\nconst normalizeOptions = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let url;\n  /** @type {Options} */\n\n  let opts = {};\n  let agent;\n\n  if (typeof options === 'string' || isMultiaddr(options)) {\n    url = new URL(toUrlString(options));\n  } else if (options instanceof URL) {\n    url = options;\n  } else if (typeof options.url === 'string' || isMultiaddr(options.url)) {\n    url = new URL(toUrlString(options.url));\n    opts = options;\n  } else if (options.url instanceof URL) {\n    url = options.url;\n    opts = options;\n  } else {\n    opts = options || {};\n    const protocol = (opts.protocol || DEFAULT_PROTOCOL).replace(':', '');\n    const host = (opts.host || DEFAULT_HOST).split(':')[0];\n    const port = opts.port || DEFAULT_PORT;\n    url = new URL(`${protocol}://${host}:${port}`);\n  }\n\n  if (opts.apiPath) {\n    url.pathname = opts.apiPath;\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0';\n  }\n\n  if (isNode) {\n    const Agent = getAgent(url);\n    agent = opts.agent || new Agent({\n      keepAlive: true,\n      // Similar to browsers which limit connections to six per host\n      maxSockets: 6\n    });\n  }\n\n  return { ...opts,\n    host: url.host,\n    protocol: url.protocol.replace(':', ''),\n    port: Number(url.port),\n    apiPath: url.pathname,\n    url,\n    agent\n  };\n};\n/**\n * @param {Response} response\n */\n\n\nexport const errorHandler = async response => {\n  let msg;\n\n  try {\n    if ((response.headers.get('Content-Type') || '').startsWith('application/json')) {\n      const data = await response.json();\n      log(data);\n      msg = data.Message || data.message;\n    } else {\n      msg = await response.text();\n    }\n  } catch (\n  /** @type {any} */\n  err) {\n    log('Failed to parse error response', err); // Failed to extract/parse error message from response\n\n    msg = err.message;\n  }\n  /** @type {Error} */\n\n\n  let error = new HTTP.HTTPError(response);\n\n  if (msg) {\n    // This is what rs-ipfs returns where there's a timeout\n    if (msg.includes('deadline has elapsed')) {\n      error = new HTTP.TimeoutError();\n    } // This is what go-ipfs returns where there's a timeout\n\n\n    if (msg && msg.includes('context deadline exceeded')) {\n      error = new HTTP.TimeoutError();\n    }\n  } // This also gets returned\n\n\n  if (msg && msg.includes('request timed out')) {\n    error = new HTTP.TimeoutError();\n  } // If we managed to extract a message from the response, use it\n\n\n  if (msg) {\n    error.message = msg;\n  }\n\n  throw error;\n};\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g;\n/**\n * @param {string} str\n */\n\nconst kebabCase = str => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase();\n  });\n};\n/**\n * @param {string | number} value\n */\n\n\nconst parseTimeout = value => {\n  return typeof value === 'string' ? parseDuration(value) : value;\n};\n\nexport class Client extends HTTP {\n  /**\n   * @param {Options|URL|Multiaddr|string} [options]\n   */\n  constructor() {\n    var _this;\n\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const opts = normalizeOptions(options);\n    super({\n      timeout: parseTimeout(opts.timeout || 0) || undefined,\n      headers: opts.headers,\n      base: `${opts.url}`,\n      handleError: errorHandler,\n      transformSearchParams: search => {\n        const out = new URLSearchParams();\n\n        for (const [key, value] of search) {\n          if (value !== 'undefined' && value !== 'null' && key !== 'signal') {\n            out.append(kebabCase(key), value);\n          } // @ts-expect-error server timeouts are strings\n\n\n          if (key === 'timeout' && !isNaN(value)) {\n            out.append(kebabCase(key), value);\n          }\n        }\n\n        return out;\n      },\n      // @ts-expect-error this can be a https agent or a http agent\n      agent: opts.agent\n    });\n    _this = this;\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.get; // @ts-expect-error - cannot delete no-optional fields\n\n    delete this.put; // @ts-expect-error - cannot delete no-optional fields\n\n    delete this.delete; // @ts-expect-error - cannot delete no-optional fields\n\n    delete this.options;\n    const fetch = this.fetch;\n    /**\n     * @param {string | Request} resource\n     * @param {HTTPOptions} options\n     */\n\n    this.fetch = function (resource) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (typeof resource === 'string' && !resource.startsWith('/')) {\n        resource = `${opts.url}/${resource}`;\n      }\n\n      return fetch.call(_this, resource, merge(options, {\n        method: 'POST'\n      }));\n    };\n  }\n\n}\nexport const HTTPError = HTTP.HTTPError;","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/lib/core.js"],"names":["isMultiaddr","isBrowser","isWebWorker","isNode","parseDuration","logger","HTTP","mergeOpts","toUrlString","getAgent","log","merge","bind","ignoreUndefined","DEFAULT_PROTOCOL","location","protocol","DEFAULT_HOST","hostname","DEFAULT_PORT","port","normalizeOptions","options","url","opts","agent","URL","replace","host","split","apiPath","pathname","undefined","Agent","keepAlive","maxSockets","Number","errorHandler","response","msg","headers","get","startsWith","data","json","Message","message","text","err","error","HTTPError","includes","TimeoutError","KEBAB_REGEX","kebabCase","str","match","toLowerCase","parseTimeout","value","Client","constructor","timeout","base","handleError","transformSearchParams","search","out","URLSearchParams","key","append","isNaN","put","delete","fetch","resource","call","method"],"mappings":"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","sourcesContent":["\n/* eslint-env browser */\n\nimport { isMultiaddr } from '@multiformats/multiaddr'\nimport { isBrowser, isWebWorker, isNode } from 'ipfs-utils/src/env.js'\nimport parseDuration from 'parse-duration'\nimport { logger } from '@libp2p/logger'\nimport HTTP from 'ipfs-utils/src/http.js'\nimport mergeOpts from 'merge-options'\nimport { toUrlString } from 'ipfs-core-utils/to-url-string'\nimport getAgent from 'ipfs-core-utils/agent'\n\nconst log = logger('ipfs-http-client:lib:error-handler')\nconst merge = mergeOpts.bind({ ignoreUndefined: true })\n\nconst DEFAULT_PROTOCOL = isBrowser || isWebWorker ? location.protocol : 'http'\nconst DEFAULT_HOST = isBrowser || isWebWorker ? location.hostname : 'localhost'\nconst DEFAULT_PORT = isBrowser || isWebWorker ? location.port : '5001'\n\n/**\n * @typedef {import('ipfs-utils/src/types').HTTPOptions} HTTPOptions\n * @typedef {import('../types').Options} Options\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {Options|URL|Multiaddr|string} [options]\n * @returns {Options}\n */\nconst normalizeOptions = (options = {}) => {\n  let url\n  /** @type {Options} */\n  let opts = {}\n  let agent\n\n  if (typeof options === 'string' || isMultiaddr(options)) {\n    url = new URL(toUrlString(options))\n  } else if (options instanceof URL) {\n    url = options\n  } else if (typeof options.url === 'string' || isMultiaddr(options.url)) {\n    url = new URL(toUrlString(options.url))\n    opts = options\n  } else if (options.url instanceof URL) {\n    url = options.url\n    opts = options\n  } else {\n    opts = options || {}\n\n    const protocol = (opts.protocol || DEFAULT_PROTOCOL).replace(':', '')\n    const host = (opts.host || DEFAULT_HOST).split(':')[0]\n    const port = (opts.port || DEFAULT_PORT)\n\n    url = new URL(`${protocol}://${host}:${port}`)\n  }\n\n  if (opts.apiPath) {\n    url.pathname = opts.apiPath\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0'\n  }\n\n  if (isNode) {\n    const Agent = getAgent(url)\n\n    agent = opts.agent || new Agent({\n      keepAlive: true,\n      // Similar to browsers which limit connections to six per host\n      maxSockets: 6\n    })\n  }\n\n  return {\n    ...opts,\n    host: url.host,\n    protocol: url.protocol.replace(':', ''),\n    port: Number(url.port),\n    apiPath: url.pathname,\n    url,\n    agent\n  }\n}\n\n/**\n * @param {Response} response\n */\nexport const errorHandler = async (response) => {\n  let msg\n\n  try {\n    if ((response.headers.get('Content-Type') || '').startsWith('application/json')) {\n      const data = await response.json()\n      log(data)\n      msg = data.Message || data.message\n    } else {\n      msg = await response.text()\n    }\n  } catch (/** @type {any} */ err) {\n    log('Failed to parse error response', err)\n    // Failed to extract/parse error message from response\n    msg = err.message\n  }\n\n  /** @type {Error} */\n  let error = new HTTP.HTTPError(response)\n\n  if (msg) {\n    // This is what rs-ipfs returns where there's a timeout\n    if (msg.includes('deadline has elapsed')) {\n      error = new HTTP.TimeoutError()\n    }\n\n    // This is what go-ipfs returns where there's a timeout\n    if (msg && msg.includes('context deadline exceeded')) {\n      error = new HTTP.TimeoutError()\n    }\n  }\n\n  // This also gets returned\n  if (msg && msg.includes('request timed out')) {\n    error = new HTTP.TimeoutError()\n  }\n\n  // If we managed to extract a message from the response, use it\n  if (msg) {\n    error.message = msg\n  }\n\n  throw error\n}\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g\n\n/**\n * @param {string} str\n */\nconst kebabCase = (str) => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase()\n  })\n}\n\n/**\n * @param {string | number} value\n */\nconst parseTimeout = (value) => {\n  return typeof value === 'string' ? parseDuration(value) : value\n}\n\nexport class Client extends HTTP {\n  /**\n   * @param {Options|URL|Multiaddr|string} [options]\n   */\n  constructor (options = {}) {\n    const opts = normalizeOptions(options)\n\n    super({\n      timeout: parseTimeout(opts.timeout || 0) || undefined,\n      headers: opts.headers,\n      base: `${opts.url}`,\n      handleError: errorHandler,\n      transformSearchParams: (search) => {\n        const out = new URLSearchParams()\n\n        for (const [key, value] of search) {\n          if (\n            value !== 'undefined' &&\n            value !== 'null' &&\n            key !== 'signal'\n          ) {\n            out.append(kebabCase(key), value)\n          }\n\n          // @ts-expect-error server timeouts are strings\n          if (key === 'timeout' && !isNaN(value)) {\n            out.append(kebabCase(key), value)\n          }\n        }\n\n        return out\n      },\n      // @ts-expect-error this can be a https agent or a http agent\n      agent: opts.agent\n    })\n\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.get\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.put\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.delete\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.options\n\n    const fetch = this.fetch\n\n    /**\n     * @param {string | Request} resource\n     * @param {HTTPOptions} options\n     */\n    this.fetch = (resource, options = {}) => {\n      if (typeof resource === 'string' && !resource.startsWith('/')) {\n        resource = `${opts.url}/${resource}`\n      }\n\n      return fetch.call(this, resource, merge(options, {\n        method: 'POST'\n      }))\n    }\n  }\n}\n\nexport const HTTPError = HTTP.HTTPError\n"]},"metadata":{},"sourceType":"module"}