{"ast":null,"code":"import { objectToCamel } from '../lib/object-to-camel.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/log').API<HTTPClientExtraOptions>} LogAPI\n */\n\nexport const createLevel = configure(api => {\n  /**\n   * @type {LogAPI[\"level\"]}\n   */\n  async function level(subsystem, level) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const res = await api.post('log/level', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [subsystem, level],\n        ...options\n      }),\n      headers: options.headers\n    });\n    return objectToCamel(await res.json());\n  }\n\n  return level;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/log/level.js"],"names":["objectToCamel","configure","toUrlSearchParams","createLevel","api","level","subsystem","options","res","post","signal","searchParams","arg","headers","json"],"mappings":"AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAGF,SAAS,CAACG,GAAG,IAAI;AAC1C;AACF;AACA;AACE,iBAAeC,KAAf,CAAsBC,SAAtB,EAAiCD,KAAjC,EAAsD;AAAA,QAAdE,OAAc,uEAAJ,EAAI;AACpD,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,WAAT,EAAsB;AACtCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADsB;AAEtCC,MAAAA,YAAY,EAAET,iBAAiB,CAAC;AAC9BU,QAAAA,GAAG,EAAE,CACHN,SADG,EAEHD,KAFG,CADyB;AAK9B,WAAGE;AAL2B,OAAD,CAFO;AAStCM,MAAAA,OAAO,EAAEN,OAAO,CAACM;AATqB,KAAtB,CAAlB;AAYA,WAAOb,aAAa,CAAC,MAAMQ,GAAG,CAACM,IAAJ,EAAP,CAApB;AACD;;AACD,SAAOT,KAAP;AACD,CApBmC,CAA7B","sourcesContent":["import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/log').API<HTTPClientExtraOptions>} LogAPI\n */\n\nexport const createLevel = configure(api => {\n  /**\n   * @type {LogAPI[\"level\"]}\n   */\n  async function level (subsystem, level, options = {}) {\n    const res = await api.post('log/level', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          subsystem,\n          level\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    return objectToCamel(await res.json())\n  }\n  return level\n})\n"]},"metadata":{},"sourceType":"module"}