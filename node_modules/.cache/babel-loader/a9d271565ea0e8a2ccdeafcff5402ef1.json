{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { multiaddr } from '@multiformats/multiaddr';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createClear = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"clear\"]}\n   */\n  async function clear() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await api.post('bootstrap/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({ ...options,\n        all: true\n      }),\n      headers: options.headers\n    });\n    const {\n      Peers\n    } = await res.json();\n    return {\n      Peers: Peers.map((\n      /** @type {string} */\n      ma) => multiaddr(ma))\n    };\n  }\n\n  return clear;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/bootstrap/clear.js"],"names":["configure","toUrlSearchParams","multiaddr","createClear","api","clear","options","res","post","signal","searchParams","all","headers","Peers","json","map","ma"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,SAAT,QAA0B,yBAA1B;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAGH,SAAS,CAACI,GAAG,IAAI;AAC1C;AACF;AACA;AACE,iBAAeC,KAAf,GAAoC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAClC,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,cAAT,EAAyB;AACzCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADyB;AAEzCC,MAAAA,YAAY,EAAET,iBAAiB,CAAC,EAC9B,GAAGK,OAD2B;AAE9BK,QAAAA,GAAG,EAAE;AAFyB,OAAD,CAFU;AAMzCC,MAAAA,OAAO,EAAEN,OAAO,CAACM;AANwB,KAAzB,CAAlB;AASA,UAAM;AAAEC,MAAAA;AAAF,QAAY,MAAMN,GAAG,CAACO,IAAJ,EAAxB;AAEA,WAAO;AAAED,MAAAA,KAAK,EAAEA,KAAK,CAACE,GAAN,CAAU;AAAC;AAAsBC,MAAAA,EAAvB,KAA8Bd,SAAS,CAACc,EAAD,CAAjD;AAAT,KAAP;AACD;;AAED,SAAOX,KAAP;AACD,CApBmC,CAA7B","sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createClear = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"clear\"]}\n   */\n  async function clear (options = {}) {\n    const res = await api.post('bootstrap/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        all: true\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return clear\n})\n"]},"metadata":{},"sourceType":"module"}