{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createWantlist = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlist\"]}\n   */\n  async function wantlist() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json();\n    return (res.Keys || []).map((\n    /** @type {{ '/': string }} */\n    k) => CID.parse(k['/']));\n  }\n\n  return wantlist;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/bitswap/wantlist.js"],"names":["CID","configure","toUrlSearchParams","createWantlist","api","wantlist","options","res","post","signal","searchParams","headers","json","Keys","map","k","parse"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,cAAc,GAAGF,SAAS,CAACG,GAAG,IAAI;AAC7C;AACF;AACA;AACE,iBAAeC,QAAf,GAAuC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACrC,UAAMC,GAAG,GAAG,MAAM,CAAC,MAAMH,GAAG,CAACI,IAAJ,CAAS,kBAAT,EAA6B;AACpDC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADoC;AAEpDC,MAAAA,YAAY,EAAER,iBAAiB,CAACI,OAAD,CAFqB;AAGpDK,MAAAA,OAAO,EAAEL,OAAO,CAACK;AAHmC,KAA7B,CAAP,EAIdC,IAJc,EAAlB;AAMA,WAAO,CAACL,GAAG,CAACM,IAAJ,IAAY,EAAb,EAAiBC,GAAjB,CAAqB;AAAC;AAA+BC,IAAAA,CAAhC,KAAsCf,GAAG,CAACgB,KAAJ,CAAUD,CAAC,CAAC,GAAD,CAAX,CAA3D,CAAP;AACD;;AACD,SAAOV,QAAP;AACD,CAdsC,CAAhC","sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createWantlist = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlist\"]}\n   */\n  async function wantlist (options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlist\n})\n"]},"metadata":{},"sourceType":"module"}