{"ast":null,"code":"const textEncoder = new TextEncoder();\nconst maxInt32 = 2 ** 32;\nconst maxUInt32 = 2 ** 31;\n/**\n * @typedef {import('./interface.js').RawPBLink} RawPBLink\n */\n\n/**\n * @typedef {import('./interface.js').RawPBNode} RawPBNode\n */\n// the encoders work backward from the end of the bytes array\n\n/**\n * encodeLink() is passed a slice of the parent byte array that ends where this\n * link needs to end, so it packs to the right-most part of the passed `bytes`\n *\n * @param {RawPBLink} link\n * @param {Uint8Array} bytes\n * @returns {number}\n */\n\nfunction encodeLink(link, bytes) {\n  let i = bytes.length;\n\n  if (typeof link.Tsize === 'number') {\n    if (link.Tsize < 0) {\n      throw new Error('Tsize cannot be negative');\n    }\n\n    if (!Number.isSafeInteger(link.Tsize)) {\n      throw new Error('Tsize too large for encoding');\n    }\n\n    i = encodeVarint(bytes, i, link.Tsize) - 1;\n    bytes[i] = 0x18;\n  }\n\n  if (typeof link.Name === 'string') {\n    const nameBytes = textEncoder.encode(link.Name);\n    i -= nameBytes.length;\n    bytes.set(nameBytes, i);\n    i = encodeVarint(bytes, i, nameBytes.length) - 1;\n    bytes[i] = 0x12;\n  }\n\n  if (link.Hash) {\n    i -= link.Hash.length;\n    bytes.set(link.Hash, i);\n    i = encodeVarint(bytes, i, link.Hash.length) - 1;\n    bytes[i] = 0xa;\n  }\n\n  return bytes.length - i;\n}\n/**\n * Encodes a PBNode into a new byte array of precisely the correct size\n *\n * @param {RawPBNode} node\n * @returns {Uint8Array}\n */\n\n\nexport function encodeNode(node) {\n  const size = sizeNode(node);\n  const bytes = new Uint8Array(size);\n  let i = size;\n\n  if (node.Data) {\n    i -= node.Data.length;\n    bytes.set(node.Data, i);\n    i = encodeVarint(bytes, i, node.Data.length) - 1;\n    bytes[i] = 0xa;\n  }\n\n  if (node.Links) {\n    for (let index = node.Links.length - 1; index >= 0; index--) {\n      const size = encodeLink(node.Links[index], bytes.subarray(0, i));\n      i -= size;\n      i = encodeVarint(bytes, i, size) - 1;\n      bytes[i] = 0x12;\n    }\n  }\n\n  return bytes;\n}\n/**\n * work out exactly how many bytes this link takes up\n *\n * @param {RawPBLink} link\n * @returns\n */\n\nfunction sizeLink(link) {\n  let n = 0;\n\n  if (link.Hash) {\n    const l = link.Hash.length;\n    n += 1 + l + sov(l);\n  }\n\n  if (typeof link.Name === 'string') {\n    const l = textEncoder.encode(link.Name).length;\n    n += 1 + l + sov(l);\n  }\n\n  if (typeof link.Tsize === 'number') {\n    n += 1 + sov(link.Tsize);\n  }\n\n  return n;\n}\n/**\n * Work out exactly how many bytes this node takes up\n *\n * @param {RawPBNode} node\n * @returns {number}\n */\n\n\nfunction sizeNode(node) {\n  let n = 0;\n\n  if (node.Data) {\n    const l = node.Data.length;\n    n += 1 + l + sov(l);\n  }\n\n  if (node.Links) {\n    for (const link of node.Links) {\n      const l = sizeLink(link);\n      n += 1 + l + sov(l);\n    }\n  }\n\n  return n;\n}\n/**\n * @param {Uint8Array} bytes\n * @param {number} offset\n * @param {number} v\n * @returns {number}\n */\n\n\nfunction encodeVarint(bytes, offset, v) {\n  offset -= sov(v);\n  const base = offset;\n\n  while (v >= maxUInt32) {\n    bytes[offset++] = v & 0x7f | 0x80;\n    v /= 128;\n  }\n\n  while (v >= 128) {\n    bytes[offset++] = v & 0x7f | 0x80;\n    v >>>= 7;\n  }\n\n  bytes[offset] = v;\n  return base;\n}\n/**\n * size of varint\n *\n * @param {number} x\n * @returns {number}\n */\n\n\nfunction sov(x) {\n  if (x % 2 === 0) {\n    x++;\n  }\n\n  return Math.floor((len64(x) + 6) / 7);\n}\n/**\n * golang math/bits, how many bits does it take to represent this integer?\n *\n * @param {number} x\n * @returns {number}\n */\n\n\nfunction len64(x) {\n  let n = 0;\n\n  if (x >= maxInt32) {\n    x = Math.floor(x / maxInt32);\n    n = 32;\n  }\n\n  if (x >= 1 << 16) {\n    x >>>= 16;\n    n += 16;\n  }\n\n  if (x >= 1 << 8) {\n    x >>>= 8;\n    n += 8;\n  }\n\n  return n + len8tab[x];\n} // golang math/bits\n\n\nconst len8tab = [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8];","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/@ipld/dag-pb/src/pb-encode.js"],"names":["textEncoder","TextEncoder","maxInt32","maxUInt32","encodeLink","link","bytes","i","length","Tsize","Error","Number","isSafeInteger","encodeVarint","Name","nameBytes","encode","set","Hash","encodeNode","node","size","sizeNode","Uint8Array","Data","Links","index","subarray","sizeLink","n","l","sov","offset","v","base","x","Math","floor","len64","len8tab"],"mappings":"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","sourcesContent":["const textEncoder = new TextEncoder()\nconst maxInt32 = 2 ** 32\nconst maxUInt32 = 2 ** 31\n\n/**\n * @typedef {import('./interface.js').RawPBLink} RawPBLink\n */\n\n/**\n * @typedef {import('./interface.js').RawPBNode} RawPBNode\n */\n\n// the encoders work backward from the end of the bytes array\n\n/**\n * encodeLink() is passed a slice of the parent byte array that ends where this\n * link needs to end, so it packs to the right-most part of the passed `bytes`\n *\n * @param {RawPBLink} link\n * @param {Uint8Array} bytes\n * @returns {number}\n */\nfunction encodeLink (link, bytes) {\n  let i = bytes.length\n\n  if (typeof link.Tsize === 'number') {\n    if (link.Tsize < 0) {\n      throw new Error('Tsize cannot be negative')\n    }\n    if (!Number.isSafeInteger(link.Tsize)) {\n      throw new Error('Tsize too large for encoding')\n    }\n    i = encodeVarint(bytes, i, link.Tsize) - 1\n    bytes[i] = 0x18\n  }\n\n  if (typeof link.Name === 'string') {\n    const nameBytes = textEncoder.encode(link.Name)\n    i -= nameBytes.length\n    bytes.set(nameBytes, i)\n    i = encodeVarint(bytes, i, nameBytes.length) - 1\n    bytes[i] = 0x12\n  }\n\n  if (link.Hash) {\n    i -= link.Hash.length\n    bytes.set(link.Hash, i)\n    i = encodeVarint(bytes, i, link.Hash.length) - 1\n    bytes[i] = 0xa\n  }\n\n  return bytes.length - i\n}\n\n/**\n * Encodes a PBNode into a new byte array of precisely the correct size\n *\n * @param {RawPBNode} node\n * @returns {Uint8Array}\n */\nexport function encodeNode (node) {\n  const size = sizeNode(node)\n  const bytes = new Uint8Array(size)\n  let i = size\n\n  if (node.Data) {\n    i -= node.Data.length\n    bytes.set(node.Data, i)\n    i = encodeVarint(bytes, i, node.Data.length) - 1\n    bytes[i] = 0xa\n  }\n\n  if (node.Links) {\n    for (let index = node.Links.length - 1; index >= 0; index--) {\n      const size = encodeLink(node.Links[index], bytes.subarray(0, i))\n      i -= size\n      i = encodeVarint(bytes, i, size) - 1\n      bytes[i] = 0x12\n    }\n  }\n\n  return bytes\n}\n\n/**\n * work out exactly how many bytes this link takes up\n *\n * @param {RawPBLink} link\n * @returns\n */\nfunction sizeLink (link) {\n  let n = 0\n\n  if (link.Hash) {\n    const l = link.Hash.length\n    n += 1 + l + sov(l)\n  }\n\n  if (typeof link.Name === 'string') {\n    const l = textEncoder.encode(link.Name).length\n    n += 1 + l + sov(l)\n  }\n\n  if (typeof link.Tsize === 'number') {\n    n += 1 + sov(link.Tsize)\n  }\n\n  return n\n}\n\n/**\n * Work out exactly how many bytes this node takes up\n *\n * @param {RawPBNode} node\n * @returns {number}\n */\nfunction sizeNode (node) {\n  let n = 0\n\n  if (node.Data) {\n    const l = node.Data.length\n    n += 1 + l + sov(l)\n  }\n\n  if (node.Links) {\n    for (const link of node.Links) {\n      const l = sizeLink(link)\n      n += 1 + l + sov(l)\n    }\n  }\n\n  return n\n}\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} offset\n * @param {number} v\n * @returns {number}\n */\nfunction encodeVarint (bytes, offset, v) {\n  offset -= sov(v)\n  const base = offset\n\n  while (v >= maxUInt32) {\n    bytes[offset++] = (v & 0x7f) | 0x80\n    v /= 128\n  }\n\n  while (v >= 128) {\n    bytes[offset++] = (v & 0x7f) | 0x80\n    v >>>= 7\n  }\n\n  bytes[offset] = v\n\n  return base\n}\n\n/**\n * size of varint\n *\n * @param {number} x\n * @returns {number}\n */\nfunction sov (x) {\n  if (x % 2 === 0) {\n    x++\n  }\n  return Math.floor((len64(x) + 6) / 7)\n}\n\n/**\n * golang math/bits, how many bits does it take to represent this integer?\n *\n * @param {number} x\n * @returns {number}\n */\nfunction len64 (x) {\n  let n = 0\n  if (x >= maxInt32) {\n    x = Math.floor(x / maxInt32)\n    n = 32\n  }\n  if (x >= (1 << 16)) {\n    x >>>= 16\n    n += 16\n  }\n  if (x >= (1 << 8)) {\n    x >>>= 8\n    n += 8\n  }\n  return n + len8tab[x]\n}\n\n// golang math/bits\nconst len8tab = [\n  0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4,\n  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8\n]\n"]},"metadata":{},"sourceType":"module"}