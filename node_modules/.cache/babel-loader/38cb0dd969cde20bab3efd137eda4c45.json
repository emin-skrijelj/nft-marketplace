{"ast":null,"code":"import * as signing from './signing.js';\nimport * as encryption from './encryption.js';\nimport * as cbor from '@ipld/dag-cbor';\nexport const name = 'dag-jose';\nexport const code = 133;\n\nfunction isDagJWS(jose) {\n  return 'payload' in jose && typeof jose.payload === 'string' && 'signatures' in jose && Array.isArray(jose.signatures);\n}\n\nfunction isEncodedJWS(jose) {\n  return 'payload' in jose && jose.payload instanceof Uint8Array && 'signatures' in jose && Array.isArray(jose.signatures);\n}\n\nfunction isEncodedJWE(jose) {\n  return 'ciphertext' in jose && jose.ciphertext instanceof Uint8Array && 'iv' in jose && jose.iv instanceof Uint8Array && 'protected' in jose && jose.protected instanceof Uint8Array && 'tag' in jose && jose.tag instanceof Uint8Array;\n}\n\nfunction isDagJWE(jose) {\n  return 'ciphertext' in jose && typeof jose.ciphertext === 'string' && 'iv' in jose && typeof jose.iv === 'string' && 'protected' in jose && typeof jose.protected === 'string' && 'tag' in jose && typeof jose.tag === 'string';\n}\n\nexport function toGeneral(jose) {\n  if (typeof jose === 'string') {\n    const split = jose.split('.');\n\n    if (split.length === 3) {\n      return signing.fromSplit(split);\n    } else if (split.length === 5) {\n      return encryption.fromSplit(split);\n    }\n\n    throw new Error('Not a valid JOSE string');\n  }\n\n  if (isDagJWS(jose) || isDagJWE(jose)) {\n    return jose;\n  }\n\n  throw new Error('Not a valid unencoded JOSE object');\n}\nexport function encode(obj) {\n  if (typeof obj === 'string') {\n    obj = toGeneral(obj);\n  }\n\n  let encodedJose;\n\n  if (isDagJWS(obj)) {\n    encodedJose = signing.encode(obj);\n  } else if (isDagJWE(obj)) {\n    encodedJose = encryption.encode(obj);\n  } else {\n    throw new Error('Not a valid JOSE object');\n  }\n\n  return new Uint8Array(cbor.encode(encodedJose));\n}\nexport function decode(data) {\n  let encoded;\n\n  try {\n    encoded = cbor.decode(data);\n  } catch (e) {\n    throw new Error('Not a valid DAG-JOSE object');\n  }\n\n  if (isEncodedJWS(encoded)) {\n    return signing.decode(encoded);\n  } else if (isEncodedJWE(encoded)) {\n    return encryption.decode(encoded);\n  } else {\n    throw new Error('Not a valid DAG-JOSE object');\n  }\n}","map":{"version":3,"mappings":"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","names":["signing","encryption","cbor","name","code","isDagJWS","jose","payload","Array","isArray","signatures","isEncodedJWS","Uint8Array","isEncodedJWE","ciphertext","iv","protected","tag","isDagJWE","toGeneral","split","length","fromSplit","Error","encode","obj","encodedJose","decode","data","encoded","e"],"sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}