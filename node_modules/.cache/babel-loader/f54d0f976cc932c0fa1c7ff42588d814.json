{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { resolve } from '../lib/resolve.js';\nimport first from 'it-first';\nimport last from 'it-last';\nimport errCode from 'err-code';\nimport { createGet as createBlockGet } from '../block/get.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\n\nexport const createGet = (codecs, options) => {\n  const fn = configure((api, opts) => {\n    const getBlock = createBlockGet(opts);\n    /**\n     * @type {DAGAPI[\"get\"]}\n     */\n\n    const get = async function (cid) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (options.path) {\n        const entry = options.localResolve ? await first(resolve(cid, options.path, codecs, getBlock, options)) : await last(resolve(cid, options.path, codecs, getBlock, options));\n        /** @type {import('ipfs-core-types/src/dag').GetResult | undefined} - first and last will return undefined when empty */\n\n        const result = entry;\n\n        if (!result) {\n          throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n        }\n\n        return result;\n      }\n\n      const codec = await codecs.getCodec(cid.code);\n      const block = await getBlock(cid, options);\n      const node = codec.decode(block);\n      return {\n        value: node,\n        remainderPath: ''\n      };\n    };\n\n    return get;\n  });\n  return fn(options);\n};","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/dag/get.js"],"names":["configure","resolve","first","last","errCode","createGet","createBlockGet","codecs","options","fn","api","opts","getBlock","get","cid","path","entry","localResolve","result","Error","codec","getCodec","code","block","node","decode","value","remainderPath"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,SAASC,SAAS,IAAIC,cAAtB,QAA4C,iBAA5C;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMD,SAAS,GAAG,CAACE,MAAD,EAASC,OAAT,KAAqB;AAC5C,QAAMC,EAAE,GAAGT,SAAS,CAAC,CAACU,GAAD,EAAMC,IAAN,KAAe;AAClC,UAAMC,QAAQ,GAAGN,cAAc,CAACK,IAAD,CAA/B;AAEA;AACJ;AACA;;AACI,UAAME,GAAG,GAAG,gBAAOC,GAAP,EAA6B;AAAA,UAAjBN,OAAiB,uEAAP,EAAO;;AACvC,UAAIA,OAAO,CAACO,IAAZ,EAAkB;AAChB,cAAMC,KAAK,GAAGR,OAAO,CAACS,YAAR,GACV,MAAMf,KAAK,CAACD,OAAO,CAACa,GAAD,EAAMN,OAAO,CAACO,IAAd,EAAoBR,MAApB,EAA4BK,QAA5B,EAAsCJ,OAAtC,CAAR,CADD,GAEV,MAAML,IAAI,CAACF,OAAO,CAACa,GAAD,EAAMN,OAAO,CAACO,IAAd,EAAoBR,MAApB,EAA4BK,QAA5B,EAAsCJ,OAAtC,CAAR,CAFd;AAGA;;AACA,cAAMU,MAAM,GAAIF,KAAhB;;AAEA,YAAI,CAACE,MAAL,EAAa;AACX,gBAAMd,OAAO,CAAC,IAAIe,KAAJ,CAAU,WAAV,CAAD,EAAyB,eAAzB,CAAb;AACD;;AAED,eAAOD,MAAP;AACD;;AAED,YAAME,KAAK,GAAG,MAAMb,MAAM,CAACc,QAAP,CAAgBP,GAAG,CAACQ,IAApB,CAApB;AACA,YAAMC,KAAK,GAAG,MAAMX,QAAQ,CAACE,GAAD,EAAMN,OAAN,CAA5B;AACA,YAAMgB,IAAI,GAAGJ,KAAK,CAACK,MAAN,CAAaF,KAAb,CAAb;AAEA,aAAO;AACLG,QAAAA,KAAK,EAAEF,IADF;AAELG,QAAAA,aAAa,EAAE;AAFV,OAAP;AAID,KAvBD;;AAyBA,WAAOd,GAAP;AACD,GAhCmB,CAApB;AAkCA,SAAOJ,EAAE,CAACD,OAAD,CAAT;AACD,CApCM","sourcesContent":["import { configure } from '../lib/configure.js'\nimport { resolve } from '../lib/resolve.js'\nimport first from 'it-first'\nimport last from 'it-last'\nimport errCode from 'err-code'\nimport { createGet as createBlockGet } from '../block/get.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createGet = (codecs, options) => {\n  const fn = configure((api, opts) => {\n    const getBlock = createBlockGet(opts)\n\n    /**\n     * @type {DAGAPI[\"get\"]}\n     */\n    const get = async (cid, options = {}) => {\n      if (options.path) {\n        const entry = options.localResolve\n          ? await first(resolve(cid, options.path, codecs, getBlock, options))\n          : await last(resolve(cid, options.path, codecs, getBlock, options))\n        /** @type {import('ipfs-core-types/src/dag').GetResult | undefined} - first and last will return undefined when empty */\n        const result = (entry)\n\n        if (!result) {\n          throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n        }\n\n        return result\n      }\n\n      const codec = await codecs.getCodec(cid.code)\n      const block = await getBlock(cid, options)\n      const node = codec.decode(block)\n\n      return {\n        value: node,\n        remainderPath: ''\n      }\n    }\n\n    return get\n  })\n\n  return fn(options)\n}\n"]},"metadata":{},"sourceType":"module"}