{"ast":null,"code":"import { bases } from 'multiformats/basics';\nimport { allocUnsafe } from '../alloc.js';\n\nfunction createCodec(name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: {\n      decode\n    }\n  };\n}\n\nconst string = createCodec('utf8', 'u', buf => {\n  const decoder = new TextDecoder('utf8');\n  return 'u' + decoder.decode(buf);\n}, str => {\n  const encoder = new TextEncoder();\n  return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec('ascii', 'a', buf => {\n  let string = 'a';\n\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i]);\n  }\n\n  return string;\n}, str => {\n  str = str.substring(1);\n  const buf = allocUnsafe(str.length);\n\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n\n  return buf;\n});\nconst BASES = {\n  utf8: string,\n  'utf-8': string,\n  hex: bases.base16,\n  latin1: ascii,\n  ascii,\n  binary: ascii,\n  ...bases\n};\nexport default BASES;","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,QAAsB,qBAAtB;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAGA,SAASC,WAAT,CAAsBC,IAAtB,EAAoCC,MAApC,EAAoDC,MAApD,EAAyFC,MAAzF,EAA4H;AAC1H,SAAO;AACLH,QADK;AAELC,UAFK;AAGLG,WAAO,EAAE;AACPJ,UADO;AAEPC,YAFO;AAGPC;AAHO,KAHJ;AAQLG,WAAO,EAAE;AACPF;AADO;AARJ,GAAP;AAYD;;AAED,MAAMG,MAAM,GAAGP,WAAW,CAAC,MAAD,EAAS,GAAT,EAAeQ,GAAD,IAAQ;AAC9C,QAAMF,OAAO,GAAG,IAAIG,WAAJ,CAAgB,MAAhB,CAAhB;AACA,SAAO,MAAMH,OAAO,CAACF,MAAR,CAAeI,GAAf,CAAb;AACD,CAHyB,EAGtBE,GAAD,IAAQ;AACT,QAAML,OAAO,GAAG,IAAIM,WAAJ,EAAhB;AACA,SAAON,OAAO,CAACF,MAAR,CAAeO,GAAG,CAACE,SAAJ,CAAc,CAAd,CAAf,CAAP;AACD,CANyB,CAA1B;AAQA,MAAMC,KAAK,GAAGb,WAAW,CAAC,OAAD,EAAU,GAAV,EAAgBQ,GAAD,IAAQ;AAC9C,MAAID,MAAM,GAAG,GAAb;;AAEA,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAAG,CAACO,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnCP,UAAM,IAAIS,MAAM,CAACC,YAAP,CAAoBT,GAAG,CAACM,CAAD,CAAvB,CAAV;AACD;;AACD,SAAOP,MAAP;AACD,CAPwB,EAOrBG,GAAD,IAAQ;AACTA,KAAG,GAAGA,GAAG,CAACE,SAAJ,CAAc,CAAd,CAAN;AACA,QAAMJ,GAAG,GAAGT,WAAW,CAACW,GAAG,CAACK,MAAL,CAAvB;;AAEA,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACK,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnCN,OAAG,CAACM,CAAD,CAAH,GAASJ,GAAG,CAACQ,UAAJ,CAAeJ,CAAf,CAAT;AACD;;AAED,SAAON,GAAP;AACD,CAhBwB,CAAzB;AAoBA,MAAMW,KAAK,GAAoD;AAC7DC,MAAI,EAAEb,MADuD;AAE7D,WAASA,MAFoD;AAG7Dc,KAAG,EAAEvB,KAAK,CAACwB,MAHkD;AAI7DC,QAAM,EAAEV,KAJqD;AAK7DA,OAL6D;AAM7DW,QAAM,EAAEX,KANqD;AAQ7D,KAAGf;AAR0D,CAA/D;AAWA,eAAeqB,KAAf","names":["bases","allocUnsafe","createCodec","name","prefix","encode","decode","encoder","decoder","string","buf","TextDecoder","str","TextEncoder","substring","ascii","i","length","String","fromCharCode","charCodeAt","BASES","utf8","hex","base16","latin1","binary"],"sources":["/home/legasi/nft-marketplace/node_modules/uint8arrays/src/util/bases.ts"],"sourcesContent":["import { bases } from 'multiformats/basics'\nimport { allocUnsafe } from '../alloc.js'\nimport type { MultibaseCodec } from 'multiformats'\n\nfunction createCodec (name: string, prefix: string, encode: (buf: Uint8Array) => string, decode: (str: string) => Uint8Array): MultibaseCodec<any> {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: {\n      decode\n    }\n  }\n}\n\nconst string = createCodec('utf8', 'u', (buf) => {\n  const decoder = new TextDecoder('utf8')\n  return 'u' + decoder.decode(buf)\n}, (str) => {\n  const encoder = new TextEncoder()\n  return encoder.encode(str.substring(1))\n})\n\nconst ascii = createCodec('ascii', 'a', (buf) => {\n  let string = 'a'\n\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i])\n  }\n  return string\n}, (str) => {\n  str = str.substring(1)\n  const buf = allocUnsafe(str.length)\n\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i)\n  }\n\n  return buf\n})\n\nexport type SupportedEncodings = 'utf8' | 'utf-8' | 'hex' | 'latin1' | 'ascii' | 'binary' | keyof typeof bases\n\nconst BASES: Record<SupportedEncodings, MultibaseCodec<any>> = {\n  utf8: string,\n  'utf-8': string,\n  hex: bases.base16,\n  latin1: ascii,\n  ascii,\n  binary: ascii,\n\n  ...bases\n}\n\nexport default BASES\n"]},"metadata":{},"sourceType":"module"}