{"ast":null,"code":"import { objectToCamel } from './lib/object-to-camel.js';\nimport { configure } from './lib/configure.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createPing = configure(api => {\n  /**\n   * @type {RootAPI[\"ping\"]}\n   */\n  async function* ping(peerId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('ping', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${peerId}`,\n        ...options\n      }),\n      headers: options.headers,\n      transform: objectToCamel\n    });\n    yield* res.ndjson();\n  }\n\n  return ping;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/ping.js"],"names":["objectToCamel","configure","toUrlSearchParams","createPing","api","ping","peerId","options","res","post","signal","searchParams","arg","headers","transform","ndjson"],"mappings":"AAAA,SAASA,aAAT,QAA8B,0BAA9B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAGF,SAAS,CAACG,GAAG,IAAI;AACzC;AACF;AACA;AACE,kBAAiBC,IAAjB,CAAuBC,MAAvB,EAA6C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC3C,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,MAAT,EAAiB;AACjCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADiB;AAEjCC,MAAAA,YAAY,EAAET,iBAAiB,CAAC;AAC9BU,QAAAA,GAAG,EAAG,GAAEN,MAAO,EADe;AAE9B,WAAGC;AAF2B,OAAD,CAFE;AAMjCM,MAAAA,OAAO,EAAEN,OAAO,CAACM,OANgB;AAOjCC,MAAAA,SAAS,EAAEd;AAPsB,KAAjB,CAAlB;AAUA,WAAQQ,GAAG,CAACO,MAAJ,EAAR;AACD;;AACD,SAAOV,IAAP;AACD,CAlBkC,CAA5B","sourcesContent":["import { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createPing = configure(api => {\n  /**\n   * @type {RootAPI[\"ping\"]}\n   */\n  async function * ping (peerId, options = {}) {\n    const res = await api.post('ping', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${peerId}`,\n        ...options\n      }),\n      headers: options.headers,\n      transform: objectToCamel\n    })\n\n    yield * res.ndjson()\n  }\n  return ping\n})\n"]},"metadata":{},"sourceType":"module"}