{"ast":null,"code":"/**\n * When this error is thrown it means an operation was aborted,\n * usually in response to the `abort` event being emitted by an\n * AbortSignal.\n */\nexport class AbortError extends Error {\n  code;\n  type;\n\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'The operation was aborted';\n    super(message);\n    this.code = AbortError.code;\n    this.type = AbortError.type;\n  }\n\n  static code = 'ABORT_ERR';\n  static type = 'aborted';\n}\nexport class CodeError extends Error {\n  code;\n  props;\n\n  constructor(message, code, props) {\n    super(message);\n    this.code = code;\n    this.name = props?.name ?? 'CodeError';\n    this.props = props ?? {}; // eslint-disable-line @typescript-eslint/consistent-type-assertions\n  }\n\n}","map":{"version":3,"mappings":"AACA;;;;;AAKA,OAAM,MAAOA,UAAP,SAA0BC,KAA1B,CAA+B;AACnBC,MAAI;AACJC,MAAI;;AAEpBC,gBAA0D;AAAA,QAA7CC,OAA6C,uEAA3B,2BAA2B;AACxD,UAAMA,OAAN;AACA,SAAKH,IAAL,GAAYF,UAAU,CAACE,IAAvB;AACA,SAAKC,IAAL,GAAYH,UAAU,CAACG,IAAvB;AACD;;AAEmB,SAAJD,IAAI,GAAG,WAAH;AAEA,SAAJC,IAAI,GAAG,SAAH;AAZe;AAerC,OAAM,MAAOG,SAAP,SAAgFL,KAAhF,CAAqF;AAKvEC;AAJFK,OAAK;;AAErBH,cACEC,OADF,EAEkBH,IAFlB,EAGEK,KAHF,EAGW;AAET,UAAMF,OAAN;AAHgB;AAKhB,SAAKG,IAAL,GAAYD,KAAK,EAAEC,IAAP,IAAe,WAA3B;AACA,SAAKD,KAAL,GAAaA,KAAK,IAAI,EAAtB,CALS,CAKqB;AAC/B;;AAZwF","names":["AbortError","Error","code","type","constructor","message","CodeError","props","name"],"sources":["/home/legasi/nft-marketplace/node_modules/@libp2p/interfaces/src/errors.ts"],"sourcesContent":["\n/**\n * When this error is thrown it means an operation was aborted,\n * usually in response to the `abort` event being emitted by an\n * AbortSignal.\n */\nexport class AbortError extends Error {\n  public readonly code: string\n  public readonly type: string\n\n  constructor (message: string = 'The operation was aborted') {\n    super(message)\n    this.code = AbortError.code\n    this.type = AbortError.type\n  }\n\n  static readonly code = 'ABORT_ERR'\n\n  static readonly type = 'aborted'\n}\n\nexport class CodeError<T extends Record<string, any> = Record<string, never>> extends Error {\n  public readonly props: T\n\n  constructor (\n    message: string,\n    public readonly code: string,\n    props?: T\n  ) {\n    super(message)\n\n    this.name = props?.name ?? 'CodeError'\n    this.props = props ?? {} as T // eslint-disable-line @typescript-eslint/consistent-type-assertions\n  }\n}\n"]},"metadata":{},"sourceType":"module"}