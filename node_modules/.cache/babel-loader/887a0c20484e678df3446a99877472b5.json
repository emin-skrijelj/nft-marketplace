{"ast":null,"code":"export default function peekableIterator(iterable) {\n  // @ts-expect-error\n  const [iterator, symbol] = iterable[Symbol.asyncIterator] != null // @ts-expect-error\n  ? [iterable[Symbol.asyncIterator](), Symbol.asyncIterator] // @ts-expect-error\n  : [iterable[Symbol.iterator](), Symbol.iterator];\n  const queue = []; // @ts-expect-error\n\n  return {\n    peek: () => {\n      return iterator.next();\n    },\n    push: value => {\n      queue.push(value);\n    },\n    next: () => {\n      if (queue.length > 0) {\n        return {\n          done: false,\n          value: queue.shift()\n        };\n      }\n\n      return iterator.next();\n    },\n\n    [symbol]() {\n      return this;\n    }\n\n  };\n}","map":{"version":3,"mappings":"AAiBA,eAAc,SAAUA,gBAAV,CAAqEC,QAArE,EAAgF;AAK5F;AACA,QAAM,CAACC,QAAD,EAAWC,MAAX,IAAqBF,QAAQ,CAACG,MAAM,CAACC,aAAR,CAAR,IAAkC,IAAlC,CACzB;AADyB,IAEvB,CAACJ,QAAQ,CAACG,MAAM,CAACC,aAAR,CAAR,EAAD,EAAmCD,MAAM,CAACC,aAA1C,CAFuB,CAGzB;AAHyB,IAIvB,CAACJ,QAAQ,CAACG,MAAM,CAACF,QAAR,CAAR,EAAD,EAA8BE,MAAM,CAACF,QAArC,CAJJ;AAMA,QAAMI,KAAK,GAAU,EAArB,CAZ4F,CAc5F;;AACA,SAAO;AACLC,QAAI,EAAE,MAAK;AACT,aAAOL,QAAQ,CAACM,IAAT,EAAP;AACD,KAHI;AAILC,QAAI,EAAGC,KAAD,IAAe;AACnBJ,WAAK,CAACG,IAAN,CAAWC,KAAX;AACD,KANI;AAOLF,QAAI,EAAE,MAAK;AACT,UAAIF,KAAK,CAACK,MAAN,GAAe,CAAnB,EAAsB;AACpB,eAAO;AACLC,cAAI,EAAE,KADD;AAELF,eAAK,EAAEJ,KAAK,CAACO,KAAN;AAFF,SAAP;AAID;;AAED,aAAOX,QAAQ,CAACM,IAAT,EAAP;AACD,KAhBI;;AAiBL,KAACL,MAAD,IAAQ;AACN,aAAO,IAAP;AACD;;AAnBI,GAAP;AAqBD","names":["peekableIterator","iterable","iterator","symbol","Symbol","asyncIterator","queue","peek","next","push","value","length","done","shift"],"sources":["/home/legasi/nft-marketplace/node_modules/it-peekable/src/index.ts"],"sourcesContent":["\ninterface Peek <T> {\n  peek: () => IteratorResult<T, undefined>\n}\n\ninterface AsyncPeek <T> {\n  peek: () => Promise<IteratorResult<T, undefined>>\n}\n\ninterface Push <T> {\n  push: (value: T) => void\n}\n\ntype Peekable <T> = Iterable<T> & Peek<T> & Push<T> & Iterator<T>\n\ntype AsyncPeekable <T> = AsyncIterable<T> & AsyncPeek<T> & Push<T> & AsyncIterator<T>\n\nexport default function peekableIterator <I = Iterable<any> | AsyncIterable<any>> (iterable: I): I extends Iterable<infer T>\n  ? Peekable<T>\n  : I extends AsyncIterable<infer T>\n    ? AsyncPeekable<T>\n    : never {\n  // @ts-expect-error\n  const [iterator, symbol] = iterable[Symbol.asyncIterator] != null\n    // @ts-expect-error\n    ? [iterable[Symbol.asyncIterator](), Symbol.asyncIterator]\n    // @ts-expect-error\n    : [iterable[Symbol.iterator](), Symbol.iterator]\n\n  const queue: any[] = []\n\n  // @ts-expect-error\n  return {\n    peek: () => {\n      return iterator.next()\n    },\n    push: (value: any) => {\n      queue.push(value)\n    },\n    next: () => {\n      if (queue.length > 0) {\n        return {\n          done: false,\n          value: queue.shift()\n        }\n      }\n\n      return iterator.next()\n    },\n    [symbol] () {\n      return this\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}