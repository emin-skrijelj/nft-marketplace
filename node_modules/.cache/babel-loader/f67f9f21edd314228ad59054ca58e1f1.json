{"ast":null,"code":"import { toUrlSearchParams } from '../../../lib/to-url-search-params.js';\nimport { encodeEndpoint } from './utils.js';\n/**\n * @typedef {import('../../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI\n */\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\n\nexport function createAdd(client) {\n  /**\n   * @type {RemotePiningServiceAPI[\"add\"]}\n   */\n  async function add(name, options) {\n    const {\n      endpoint,\n      key,\n      headers,\n      timeout,\n      signal\n    } = options;\n    await client.post('pin/remote/service/add', {\n      timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [name, encodeEndpoint(endpoint), key]\n      }),\n      headers\n    });\n  }\n\n  return add;\n}","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/pin/remote/service/add.js"],"names":["toUrlSearchParams","encodeEndpoint","createAdd","client","add","name","options","endpoint","key","headers","timeout","signal","post","searchParams","arg"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,sCAAlC;AACA,SAASC,cAAT,QAA+B,YAA/B;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAoBC,MAApB,EAA4B;AACjC;AACF;AACA;AACE,iBAAeC,GAAf,CAAoBC,IAApB,EAA0BC,OAA1B,EAAmC;AACjC,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,GAAZ;AAAiBC,MAAAA,OAAjB;AAA0BC,MAAAA,OAA1B;AAAmCC,MAAAA;AAAnC,QAA8CL,OAApD;AAEA,UAAMH,MAAM,CAACS,IAAP,CAAY,wBAAZ,EAAsC;AAC1CF,MAAAA,OAD0C;AAE1CC,MAAAA,MAF0C;AAG1CE,MAAAA,YAAY,EAAEb,iBAAiB,CAAC;AAC9Bc,QAAAA,GAAG,EAAE,CAACT,IAAD,EAAOJ,cAAc,CAACM,QAAD,CAArB,EAAiCC,GAAjC;AADyB,OAAD,CAHW;AAM1CC,MAAAA;AAN0C,KAAtC,CAAN;AAQD;;AAED,SAAOL,GAAP;AACD","sourcesContent":["import { toUrlSearchParams } from '../../../lib/to-url-search-params.js'\nimport { encodeEndpoint } from './utils.js'\n\n/**\n * @typedef {import('../../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI\n */\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\nexport function createAdd (client) {\n  /**\n   * @type {RemotePiningServiceAPI[\"add\"]}\n   */\n  async function add (name, options) {\n    const { endpoint, key, headers, timeout, signal } = options\n\n    await client.post('pin/remote/service/add', {\n      timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [name, encodeEndpoint(endpoint), key]\n      }),\n      headers\n    })\n  }\n\n  return add\n}\n"]},"metadata":{},"sourceType":"module"}