{"ast":null,"code":"import * as Digest from './digest.js';\n/**\n * @template {string} Name\n * @template {number} Code\n * @param {object} options\n * @param {Name} options.name\n * @param {Code} options.code\n * @param {(input: Uint8Array) => Await<Uint8Array>} options.encode\n */\n\nexport const from = _ref => {\n  let {\n    name,\n    code,\n    encode\n  } = _ref;\n  return new Hasher(name, code, encode);\n};\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n *\n * @template {string} Name\n * @template {number} Code\n * @class\n * @implements {MultihashHasher<Code>}\n */\n\nexport class Hasher {\n  /**\n   *\n   * @param {Name} name\n   * @param {Code} code\n   * @param {(input: Uint8Array) => Await<Uint8Array>} encode\n   */\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  /**\n   * @param {Uint8Array} input\n   * @returns {Await<Digest.Digest<Code, number>>}\n   */\n\n\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? Digest.create(this.code, result)\n      /* c8 ignore next 1 */\n      : result.then(digest => Digest.create(this.code, digest));\n    } else {\n      throw Error('Unknown type, must be binary type');\n      /* c8 ignore next 1 */\n    }\n  }\n\n}\n/**\n * @template {number} Alg\n * @typedef {import('./interface.js').MultihashHasher} MultihashHasher\n */\n\n/**\n * @template T\n * @typedef {Promise<T>|T} Await\n */","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/multiformats/src/hashes/hasher.js"],"names":["Digest","from","name","code","encode","Hasher","constructor","digest","input","Uint8Array","result","create","then","Error"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,aAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,IAAI,GAAG;AAAA,MAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA;AAAd,GAAD;AAAA,SAA4B,IAAIC,MAAJ,CAAWH,IAAX,EAAiBC,IAAjB,EAAuBC,MAAvB,CAA5B;AAAA,CAAb;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,MAAN,CAAa;AAClB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAEJ,IAAF,EAAQC,IAAR,EAAcC,MAAd,EAAsB;AAC/B,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;AAED;AACF;AACA;AACA;;;AACEG,EAAAA,MAAM,CAAEC,KAAF,EAAS;AACb,QAAIA,KAAK,YAAYC,UAArB,EAAiC;AAC/B,YAAMC,MAAM,GAAG,KAAKN,MAAL,CAAYI,KAAZ,CAAf;AACA,aAAOE,MAAM,YAAYD,UAAlB,GACHT,MAAM,CAACW,MAAP,CAAc,KAAKR,IAAnB,EAAyBO,MAAzB;AACF;AAFK,QAGHA,MAAM,CAACE,IAAP,CAAYL,MAAM,IAAIP,MAAM,CAACW,MAAP,CAAc,KAAKR,IAAnB,EAAyBI,MAAzB,CAAtB,CAHJ;AAID,KAND,MAMO;AACL,YAAMM,KAAK,CAAC,mCAAD,CAAX;AACA;AACD;AACF;;AA5BiB;AA+BpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","sourcesContent":["import * as Digest from './digest.js'\n\n/**\n * @template {string} Name\n * @template {number} Code\n * @param {object} options\n * @param {Name} options.name\n * @param {Code} options.code\n * @param {(input: Uint8Array) => Await<Uint8Array>} options.encode\n */\nexport const from = ({ name, code, encode }) => new Hasher(name, code, encode)\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n *\n * @template {string} Name\n * @template {number} Code\n * @class\n * @implements {MultihashHasher<Code>}\n */\nexport class Hasher {\n  /**\n   *\n   * @param {Name} name\n   * @param {Code} code\n   * @param {(input: Uint8Array) => Await<Uint8Array>} encode\n   */\n  constructor (name, code, encode) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  /**\n   * @param {Uint8Array} input\n   * @returns {Await<Digest.Digest<Code, number>>}\n   */\n  digest (input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n\n/**\n * @template {number} Alg\n * @typedef {import('./interface.js').MultihashHasher} MultihashHasher\n */\n\n/**\n * @template T\n * @typedef {Promise<T>|T} Await\n */\n"]},"metadata":{},"sourceType":"module"}