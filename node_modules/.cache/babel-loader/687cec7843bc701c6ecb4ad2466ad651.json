{"ast":null,"code":"import { from } from './base.js';\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂');\nconst alphabetBytesToChars =\n/** @type {string[]} */\nalphabet.reduce((p, c, i) => {\n  p[i] = c;\n  return p;\n},\n/** @type {string[]} */\n[]);\nconst alphabetCharsToBytes =\n/** @type {number[]} */\nalphabet.reduce((p, c, i) => {\n  p[\n  /** @type {number} */\n  c.codePointAt(0)] = i;\n  return p;\n},\n/** @type {number[]} */\n[]);\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\n\nfunction encode(data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c];\n    return p;\n  }, '');\n}\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\n\n\nfunction decode(str) {\n  const byts = [];\n\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[\n    /** @type {number} */\n    char.codePointAt(0)];\n\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`);\n    }\n\n    byts.push(byt);\n  }\n\n  return new Uint8Array(byts);\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/multiformats/src/bases/base256emoji.js"],"names":["from","alphabet","Array","alphabetBytesToChars","reduce","p","c","i","alphabetCharsToBytes","codePointAt","encode","data","decode","str","byts","char","byt","undefined","Error","push","Uint8Array","base256emoji","prefix","name"],"mappings":"AAAA,SAASA,IAAT,QAAqB,WAArB;AAEA,MAAMC,QAAQ,GAAGC,KAAK,CAACF,IAAN,CAAW,weAAX,CAAjB;AACA,MAAMG,oBAAoB;AAAG;AAAyBF,QAAQ,CAACG,MAAT,CAAgB,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,KAAa;AAAEF,EAAAA,CAAC,CAACE,CAAD,CAAD,GAAOD,CAAP;AAAU,SAAOD,CAAP;AAAU,CAAnD;AAAqD;AAAwB,EAA7E,CAAtD;AACA,MAAMG,oBAAoB;AAAG;AAAyBP,QAAQ,CAACG,MAAT,CAAgB,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,KAAa;AAAEF,EAAAA,CAAC;AAAC;AAAuBC,EAAAA,CAAC,CAACG,WAAF,CAAc,CAAd,CAAxB,CAAD,GAA8CF,CAA9C;AAAiD,SAAOF,CAAP;AAAU,CAA1F;AAA4F;AAAwB,EAApH,CAAtD;AAEA;AACA;AACA;AACA;;AACA,SAASK,MAAT,CAAiBC,IAAjB,EAAuB;AACrB,SAAOA,IAAI,CAACP,MAAL,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC3BD,IAAAA,CAAC,IAAIF,oBAAoB,CAACG,CAAD,CAAzB;AACA,WAAOD,CAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID;AAED;AACA;AACA;AACA;;;AACA,SAASO,MAAT,CAAiBC,GAAjB,EAAsB;AACpB,QAAMC,IAAI,GAAG,EAAb;;AACA,OAAK,MAAMC,IAAX,IAAmBF,GAAnB,EAAwB;AACtB,UAAMG,GAAG,GAAGR,oBAAoB;AAAC;AAAuBO,IAAAA,IAAI,CAACN,WAAL,CAAiB,CAAjB,CAAxB,CAAhC;;AACA,QAAIO,GAAG,KAAKC,SAAZ,EAAuB;AACrB,YAAM,IAAIC,KAAJ,CAAW,+BAA8BH,IAAK,EAA9C,CAAN;AACD;;AACDD,IAAAA,IAAI,CAACK,IAAL,CAAUH,GAAV;AACD;;AACD,SAAO,IAAII,UAAJ,CAAeN,IAAf,CAAP;AACD;;AAED,OAAO,MAAMO,YAAY,GAAGrB,IAAI,CAAC;AAC/BsB,EAAAA,MAAM,EAAE,IADuB;AAE/BC,EAAAA,IAAI,EAAE,cAFyB;AAG/Bb,EAAAA,MAH+B;AAI/BE,EAAAA;AAJ+B,CAAD,CAAzB","sourcesContent":["import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars = /** @type {string[]} */ (alphabet.reduce((p, c, i) => { p[i] = c; return p }, /** @type {string[]} */([])))\nconst alphabetCharsToBytes = /** @type {number[]} */ (alphabet.reduce((p, c, i) => { p[/** @type {number} */ (c.codePointAt(0))] = i; return p }, /** @type {number[]} */([])))\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nfunction encode (data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nfunction decode (str) {\n  const byts = []\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[/** @type {number} */ (char.codePointAt(0))]\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n"]},"metadata":{},"sourceType":"module"}