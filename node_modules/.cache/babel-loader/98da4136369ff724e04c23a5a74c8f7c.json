{"ast":null,"code":"/**\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadCodecFn}\n */\nconst LOAD_CODEC = codeOrName => Promise.reject(new Error(`No codec found for \"${codeOrName}\"`));\n\nexport class Multicodecs {\n  /**\n   * @param {object} options\n   * @param {LoadCodecFn} [options.loadCodec]\n   * @param {BlockCodec[]} options.codecs\n   */\n  constructor(options) {\n    // Object with current list of active resolvers\n\n    /** @type {Record<string, BlockCodec>}} */\n    this._codecsByName = {}; // Object with current list of active resolvers\n\n    /** @type {Record<number, BlockCodec>}} */\n\n    this._codecsByCode = {};\n    this._loadCodec = options.loadCodec || LOAD_CODEC; // Enable all supplied codecs\n\n    for (const codec of options.codecs) {\n      this.addCodec(codec);\n    }\n  }\n  /**\n   * Add support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n\n\n  addCodec(codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${codec.name}\"`);\n    }\n\n    this._codecsByName[codec.name] = codec;\n    this._codecsByCode[codec.code] = codec;\n  }\n  /**\n   * Remove support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n\n\n  removeCodec(codec) {\n    delete this._codecsByName[codec.name];\n    delete this._codecsByCode[codec.code];\n  }\n  /**\n   * @param {number | string} code\n   */\n\n\n  async getCodec(code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode;\n\n    if (table[code]) {\n      return table[code];\n    } // If not supported, attempt to dynamically load this codec\n\n\n    const codec = await this._loadCodec(code);\n\n    if (table[code] == null) {\n      this.addCodec(codec);\n    }\n\n    return codec;\n  }\n\n  listCodecs() {\n    return Object.values(this._codecsByName);\n  }\n\n}","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-core-utils/src/multicodecs.js"],"names":["LOAD_CODEC","codeOrName","Promise","reject","Error","Multicodecs","constructor","options","_codecsByName","_codecsByCode","_loadCodec","loadCodec","codec","codecs","addCodec","name","code","removeCodec","getCodec","table","listCodecs","Object","values"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMA,UAAU,GAAIC,UAAD,IAAgBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAW,uBAAsBH,UAAW,GAA5C,CAAf,CAAnC;;AAEA,OAAO,MAAMI,WAAN,CAAkB;AACvB;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAEC,OAAF,EAAW;AACpB;;AACA;AACA,SAAKC,aAAL,GAAqB,EAArB,CAHoB,CAKpB;;AACA;;AACA,SAAKC,aAAL,GAAqB,EAArB;AAEA,SAAKC,UAAL,GAAkBH,OAAO,CAACI,SAAR,IAAqBX,UAAvC,CAToB,CAWpB;;AACA,SAAK,MAAMY,KAAX,IAAoBL,OAAO,CAACM,MAA5B,EAAoC;AAClC,WAAKC,QAAL,CAAcF,KAAd;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,QAAQ,CAAEF,KAAF,EAAS;AACf,QAAI,KAAKJ,aAAL,CAAmBI,KAAK,CAACG,IAAzB,KAAkC,KAAKN,aAAL,CAAmBG,KAAK,CAACI,IAAzB,CAAtC,EAAsE;AACpE,YAAM,IAAIZ,KAAJ,CAAW,sCAAqCQ,KAAK,CAACG,IAAK,GAA3D,CAAN;AACD;;AAED,SAAKP,aAAL,CAAmBI,KAAK,CAACG,IAAzB,IAAiCH,KAAjC;AACA,SAAKH,aAAL,CAAmBG,KAAK,CAACI,IAAzB,IAAiCJ,KAAjC;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEK,EAAAA,WAAW,CAAEL,KAAF,EAAS;AAClB,WAAO,KAAKJ,aAAL,CAAmBI,KAAK,CAACG,IAAzB,CAAP;AACA,WAAO,KAAKN,aAAL,CAAmBG,KAAK,CAACI,IAAzB,CAAP;AACD;AAED;AACF;AACA;;;AACgB,QAARE,QAAQ,CAAEF,IAAF,EAAQ;AACpB,UAAMG,KAAK,GAAG,OAAOH,IAAP,KAAgB,QAAhB,GAA2B,KAAKR,aAAhC,GAAgD,KAAKC,aAAnE;;AAEA,QAAIU,KAAK,CAACH,IAAD,CAAT,EAAiB;AACf,aAAOG,KAAK,CAACH,IAAD,CAAZ;AACD,KALmB,CAOpB;;;AACA,UAAMJ,KAAK,GAAG,MAAM,KAAKF,UAAL,CAAgBM,IAAhB,CAApB;;AAEA,QAAIG,KAAK,CAACH,IAAD,CAAL,IAAe,IAAnB,EAAyB;AACvB,WAAKF,QAAL,CAAcF,KAAd;AACD;;AAED,WAAOA,KAAP;AACD;;AAEDQ,EAAAA,UAAU,GAAI;AACZ,WAAOC,MAAM,CAACC,MAAP,CAAc,KAAKd,aAAnB,CAAP;AACD;;AArEsB","sourcesContent":["/**\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadCodecFn}\n */\nconst LOAD_CODEC = (codeOrName) => Promise.reject(new Error(`No codec found for \"${codeOrName}\"`))\n\nexport class Multicodecs {\n  /**\n   * @param {object} options\n   * @param {LoadCodecFn} [options.loadCodec]\n   * @param {BlockCodec[]} options.codecs\n   */\n  constructor (options) {\n    // Object with current list of active resolvers\n    /** @type {Record<string, BlockCodec>}} */\n    this._codecsByName = {}\n\n    // Object with current list of active resolvers\n    /** @type {Record<number, BlockCodec>}} */\n    this._codecsByCode = {}\n\n    this._loadCodec = options.loadCodec || LOAD_CODEC\n\n    // Enable all supplied codecs\n    for (const codec of options.codecs) {\n      this.addCodec(codec)\n    }\n  }\n\n  /**\n   * Add support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  addCodec (codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${codec.name}\"`)\n    }\n\n    this._codecsByName[codec.name] = codec\n    this._codecsByCode[codec.code] = codec\n  }\n\n  /**\n   * Remove support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  removeCodec (codec) {\n    delete this._codecsByName[codec.name]\n    delete this._codecsByCode[codec.code]\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getCodec (code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode\n\n    if (table[code]) {\n      return table[code]\n    }\n\n    // If not supported, attempt to dynamically load this codec\n    const codec = await this._loadCodec(code)\n\n    if (table[code] == null) {\n      this.addCodec(codec)\n    }\n\n    return codec\n  }\n\n  listCodecs () {\n    return Object.values(this._codecsByName)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}