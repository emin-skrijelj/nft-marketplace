{"ast":null,"code":"import { objectToCamel } from '../../lib/object-to-camel.js';\nimport { configure } from '../../lib/configure.js';\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js';\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name/pubsub').API<HTTPClientExtraOptions>} NamePubsubAPI\n */\n\nexport const createState = configure(api => {\n  /**\n   * @type {NamePubsubAPI[\"state\"]}\n   */\n  async function state() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await api.post('name/pubsub/state', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    }); // @ts-expect-error server output is not typed\n\n    return objectToCamel(await res.json());\n  }\n\n  return state;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/name/pubsub/state.js"],"names":["objectToCamel","configure","toUrlSearchParams","createState","api","state","options","res","post","signal","searchParams","headers","json"],"mappings":"AAAA,SAASA,aAAT,QAA8B,8BAA9B;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,iBAAT,QAAkC,mCAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAGF,SAAS,CAACG,GAAG,IAAI;AAC1C;AACF;AACA;AACE,iBAAeC,KAAf,GAAoC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAClC,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,mBAAT,EAA8B;AAC9CC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MAD8B;AAE9CC,MAAAA,YAAY,EAAER,iBAAiB,CAACI,OAAD,CAFe;AAG9CK,MAAAA,OAAO,EAAEL,OAAO,CAACK;AAH6B,KAA9B,CAAlB,CADkC,CAOlC;;AACA,WAAOX,aAAa,CAAC,MAAMO,GAAG,CAACK,IAAJ,EAAP,CAApB;AACD;;AACD,SAAOP,KAAP;AACD,CAfmC,CAA7B","sourcesContent":["import { objectToCamel } from '../../lib/object-to-camel.js'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name/pubsub').API<HTTPClientExtraOptions>} NamePubsubAPI\n */\n\nexport const createState = configure(api => {\n  /**\n   * @type {NamePubsubAPI[\"state\"]}\n   */\n  async function state (options = {}) {\n    const res = await api.post('name/pubsub/state', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return state\n})\n"]},"metadata":{},"sourceType":"module"}