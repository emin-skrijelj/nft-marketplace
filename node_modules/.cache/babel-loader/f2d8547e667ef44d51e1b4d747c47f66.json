{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { mapEvent } from './map-event.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {DHTAPI[\"get\"]}\n   */\n  async function* get(key) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('dht/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        // arg: base36.encode(key),\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event);\n    }\n  }\n\n  return get;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/dht/get.js"],"names":["configure","toUrlSearchParams","mapEvent","toString","uint8ArrayToString","createGet","api","get","key","options","res","post","signal","searchParams","arg","Uint8Array","headers","event","ndjson"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,QAAQ,IAAIC,kBAArB,QAA+C,uBAA/C;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAGL,SAAS,CAACM,GAAG,IAAI;AACxC;AACF;AACA;AACE,kBAAiBC,GAAjB,CAAsBC,GAAtB,EAAyC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACvC,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,SAAT,EAAoB;AACpCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADoB;AAEpCC,MAAAA,YAAY,EAAEZ,iBAAiB,CAAC;AAC9B;AACAa,QAAAA,GAAG,EAAEN,GAAG,YAAYO,UAAf,GAA4BX,kBAAkB,CAACI,GAAD,CAA9C,GAAsDA,GAAG,CAACL,QAAJ,EAF7B;AAG9B,WAAGM;AAH2B,OAAD,CAFK;AAOpCO,MAAAA,OAAO,EAAEP,OAAO,CAACO;AAPmB,KAApB,CAAlB;;AAUA,eAAW,MAAMC,KAAjB,IAA0BP,GAAG,CAACQ,MAAJ,EAA1B,EAAwC;AACtC,YAAMhB,QAAQ,CAACe,KAAD,CAAd;AACD;AACF;;AAED,SAAOV,GAAP;AACD,CArBiC,CAA3B","sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {DHTAPI[\"get\"]}\n   */\n  async function * get (key, options = {}) {\n    const res = await api.post('dht/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        // arg: base36.encode(key),\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return get\n})\n"]},"metadata":{},"sourceType":"module"}