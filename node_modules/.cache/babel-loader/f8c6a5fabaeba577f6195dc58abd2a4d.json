{"ast":null,"code":"import varint from '../vendor/varint.js';\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\n\nexport const decode = function (data) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const code = varint.decode(data, offset);\n  return [code, varint.decode.bytes];\n};\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\n\nexport const encodeTo = function (int, target) {\n  let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  varint.encode(int, target, offset);\n  return target;\n};\n/**\n * @param {number} int\n * @returns {number}\n */\n\nexport const encodingLength = int => {\n  return varint.encodingLength(int);\n};","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/multiformats/src/varint.js"],"names":["varint","decode","data","offset","code","bytes","encodeTo","int","target","encode","encodingLength"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,MAAM,GAAG,UAACC,IAAD,EAAsB;AAAA,MAAfC,MAAe,uEAAN,CAAM;AAC1C,QAAMC,IAAI,GAAGJ,MAAM,CAACC,MAAP,CAAcC,IAAd,EAAoBC,MAApB,CAAb;AACA,SAAO,CAACC,IAAD,EAAOJ,MAAM,CAACC,MAAP,CAAcI,KAArB,CAAP;AACD,CAHM;AAKP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAG,UAACC,GAAD,EAAMC,MAAN,EAA6B;AAAA,MAAfL,MAAe,uEAAN,CAAM;AACnDH,EAAAA,MAAM,CAACS,MAAP,CAAcF,GAAd,EAAmBC,MAAnB,EAA2BL,MAA3B;AACA,SAAOK,MAAP;AACD,CAHM;AAKP;AACA;AACA;AACA;;AACA,OAAO,MAAME,cAAc,GAAIH,GAAD,IAAS;AACrC,SAAOP,MAAM,CAACU,cAAP,CAAsBH,GAAtB,CAAP;AACD,CAFM","sourcesContent":["import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n"]},"metadata":{},"sourceType":"module"}