{"ast":null,"code":"/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n */\nexport default async function* browserReadableStreamToIt(stream) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const reader = stream.getReader();\n\n  try {\n    while (true) {\n      const result = await reader.read();\n\n      if (result.done) {\n        return;\n      }\n\n      yield result.value;\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      await reader.cancel();\n    }\n\n    reader.releaseLock();\n  }\n}","map":{"version":3,"mappings":"AAKA;;;;;;;AAOA,eAAe,gBAAiBA,yBAAjB,CAAgDC,MAAhD,EAAyH;AAAA,MAA9CC,OAA8C,uEAAF,EAAE;AACtI,QAAMC,MAAM,GAAGF,MAAM,CAACG,SAAP,EAAf;;AAEA,MAAI;AACF,WAAO,IAAP,EAAa;AACX,YAAMC,MAAM,GAAG,MAAMF,MAAM,CAACG,IAAP,EAArB;;AAEA,UAAID,MAAM,CAACE,IAAX,EAAiB;AACf;AACD;;AAED,YAAMF,MAAM,CAACG,KAAb;AACD;AACF,GAVD,SAUU;AACR,QAAIN,OAAO,CAACO,aAAR,KAA0B,IAA9B,EAAoC;AAClC,YAAMN,MAAM,CAACO,MAAP,EAAN;AACD;;AAEDP,UAAM,CAACQ,WAAP;AACD;AACF","names":["browserReadableStreamToIt","stream","options","reader","getReader","result","read","done","value","preventCancel","cancel","releaseLock"],"sources":["/home/legasi/nft-marketplace/node_modules/browser-readablestream-to-it/src/index.ts"],"sourcesContent":["\nexport interface BrowserReadableStreamToItOptions {\n  preventCancel?: boolean\n}\n\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n */\nexport default async function * browserReadableStreamToIt <T> (stream: ReadableStream<T>, options: BrowserReadableStreamToItOptions = {}): AsyncGenerator<T, void, undefined> {\n  const reader = stream.getReader()\n\n  try {\n    while (true) {\n      const result = await reader.read()\n\n      if (result.done) {\n        return\n      }\n\n      yield result.value\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      await reader.cancel()\n    }\n\n    reader.releaseLock()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}