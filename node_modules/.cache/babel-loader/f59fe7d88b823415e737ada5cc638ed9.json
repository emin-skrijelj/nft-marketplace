{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { multiaddr } from '@multiformats/multiaddr';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createList = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"list\"]}\n   */\n  async function list() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await api.post('bootstrap/list', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    });\n    const {\n      Peers\n    } = await res.json();\n    return {\n      Peers: Peers.map((\n      /** @type {string} */\n      ma) => multiaddr(ma))\n    };\n  }\n\n  return list;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/bootstrap/list.js"],"names":["configure","toUrlSearchParams","multiaddr","createList","api","list","options","res","post","signal","searchParams","headers","Peers","json","map","ma"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,SAAT,QAA0B,yBAA1B;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAGH,SAAS,CAACI,GAAG,IAAI;AACzC;AACF;AACA;AACE,iBAAeC,IAAf,GAAmC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACjC,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,gBAAT,EAA2B;AAC3CC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MAD2B;AAE3CC,MAAAA,YAAY,EAAET,iBAAiB,CAACK,OAAD,CAFY;AAG3CK,MAAAA,OAAO,EAAEL,OAAO,CAACK;AAH0B,KAA3B,CAAlB;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAAY,MAAML,GAAG,CAACM,IAAJ,EAAxB;AAEA,WAAO;AAAED,MAAAA,KAAK,EAAEA,KAAK,CAACE,GAAN,CAAU;AAAC;AAAsBC,MAAAA,EAAvB,KAA8Bb,SAAS,CAACa,EAAD,CAAjD;AAAT,KAAP;AACD;;AAED,SAAOV,IAAP;AACD,CAjBkC,CAA5B","sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createList = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"list\"]}\n   */\n  async function list (options = {}) {\n    const res = await api.post('bootstrap/list', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return list\n})\n"]},"metadata":{},"sourceType":"module"}