{"ast":null,"code":"import { asUint8Array } from './util/as-uint8array.js';\n/**\n * Returns a `Uint8Array` of the requested size. Referenced memory will\n * be initialized to 0.\n */\n\nexport function alloc() {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n  if (globalThis.Buffer?.alloc != null) {\n    return asUint8Array(globalThis.Buffer.alloc(size));\n  }\n\n  return new Uint8Array(size);\n}\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\n\nexport function allocUnsafe() {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n  if (globalThis.Buffer?.allocUnsafe != null) {\n    return asUint8Array(globalThis.Buffer.allocUnsafe(size));\n  }\n\n  return new Uint8Array(size);\n}","map":{"version":3,"mappings":"AAAA,SAASA,YAAT,QAA6B,yBAA7B;AAEA;;;;;AAIA,OAAM,SAAUC,KAAV,GAAiC;AAAA,MAAhBC,IAAgB,uEAAD,CAAC;;AACrC,MAAIC,UAAU,CAACC,MAAX,EAAmBH,KAAnB,IAA4B,IAAhC,EAAsC;AACpC,WAAOD,YAAY,CAACG,UAAU,CAACC,MAAX,CAAkBH,KAAlB,CAAwBC,IAAxB,CAAD,CAAnB;AACD;;AAED,SAAO,IAAIG,UAAJ,CAAeH,IAAf,CAAP;AACD;AAED;;;;;;AAKA,OAAM,SAAUI,WAAV,GAAuC;AAAA,MAAhBJ,IAAgB,uEAAD,CAAC;;AAC3C,MAAIC,UAAU,CAACC,MAAX,EAAmBE,WAAnB,IAAkC,IAAtC,EAA4C;AAC1C,WAAON,YAAY,CAACG,UAAU,CAACC,MAAX,CAAkBE,WAAlB,CAA8BJ,IAA9B,CAAD,CAAnB;AACD;;AAED,SAAO,IAAIG,UAAJ,CAAeH,IAAf,CAAP;AACD","names":["asUint8Array","alloc","size","globalThis","Buffer","Uint8Array","allocUnsafe"],"sources":["/home/legasi/nft-marketplace/node_modules/uint8arrays/src/alloc.ts"],"sourcesContent":["import { asUint8Array } from './util/as-uint8array.js'\n\n/**\n * Returns a `Uint8Array` of the requested size. Referenced memory will\n * be initialized to 0.\n */\nexport function alloc (size: number = 0): Uint8Array {\n  if (globalThis.Buffer?.alloc != null) {\n    return asUint8Array(globalThis.Buffer.alloc(size))\n  }\n\n  return new Uint8Array(size)\n}\n\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\nexport function allocUnsafe (size: number = 0): Uint8Array {\n  if (globalThis.Buffer?.allocUnsafe != null) {\n    return asUint8Array(globalThis.Buffer.allocUnsafe(size))\n  }\n\n  return new Uint8Array(size)\n}\n"]},"metadata":{},"sourceType":"module"}