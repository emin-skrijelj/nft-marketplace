{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\n\nexport const createPut = (codecs, options) => {\n  const fn = configure(api => {\n    /**\n     * @type {DAGAPI[\"put\"]}\n     */\n    const put = async function (dagNode) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const settings = {\n        storeCodec: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        ...options\n      };\n      let serialized;\n\n      if (settings.inputCodec) {\n        // if you supply an inputCodec, we assume you're passing in a raw, encoded\n        // block using that codec, so we'll just pass that on to the server and let\n        // it deal with the decode/encode/store cycle\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded');\n        }\n\n        serialized = dagNode;\n      } else {\n        // if you don't supply an inputCodec, we assume you've passed in a JavaScript\n        // object you want to have encoded using storeCodec, so we'll prepare it for\n        // you if we have the codec\n        const storeCodec = await codecs.getCodec(settings.storeCodec);\n        serialized = storeCodec.encode(dagNode); // now we have a serialized form, the server should be told to receive it\n        // in that format\n\n        settings.inputCodec = settings.storeCodec;\n      } // allow aborting requests on body errors\n\n\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, settings.signal);\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams(settings),\n        ...(await multipartRequest([serialized], controller, settings.headers))\n      });\n      const data = await res.json();\n      return CID.parse(data.Cid['/']);\n    };\n\n    return put;\n  });\n  return fn(options);\n};","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/dag/put.js"],"names":["CID","configure","multipartRequest","toUrlSearchParams","abortSignal","createPut","codecs","options","fn","api","put","dagNode","settings","storeCodec","hashAlg","serialized","inputCodec","Uint8Array","Error","getCodec","encode","controller","AbortController","signal","res","post","timeout","searchParams","headers","data","json","parse","Cid"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,SAAS,GAAG,CAACC,MAAD,EAASC,OAAT,KAAqB;AAC5C,QAAMC,EAAE,GAAGP,SAAS,CAAEQ,GAAD,IAAS;AAC5B;AACJ;AACA;AACI,UAAMC,GAAG,GAAG,gBAAOC,OAAP,EAAiC;AAAA,UAAjBJ,OAAiB,uEAAP,EAAO;AAC3C,YAAMK,QAAQ,GAAG;AACfC,QAAAA,UAAU,EAAE,UADG;AAEfC,QAAAA,OAAO,EAAE,UAFM;AAGf,WAAGP;AAHY,OAAjB;AAMA,UAAIQ,UAAJ;;AAEA,UAAIH,QAAQ,CAACI,UAAb,EAAyB;AACvB;AACA;AACA;AACA,YAAI,EAAEL,OAAO,YAAYM,UAArB,CAAJ,EAAsC;AACpC,gBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AACDH,QAAAA,UAAU,GAAGJ,OAAb;AACD,OARD,MAQO;AACL;AACA;AACA;AACA,cAAME,UAAU,GAAG,MAAMP,MAAM,CAACa,QAAP,CAAgBP,QAAQ,CAACC,UAAzB,CAAzB;AACAE,QAAAA,UAAU,GAAGF,UAAU,CAACO,MAAX,CAAkBT,OAAlB,CAAb,CALK,CAML;AACA;;AACAC,QAAAA,QAAQ,CAACI,UAAT,GAAsBJ,QAAQ,CAACC,UAA/B;AACD,OA1B0C,CA4B3C;;;AACA,YAAMQ,UAAU,GAAG,IAAIC,eAAJ,EAAnB;AACA,YAAMC,MAAM,GAAGnB,WAAW,CAACiB,UAAU,CAACE,MAAZ,EAAoBX,QAAQ,CAACW,MAA7B,CAA1B;AAEA,YAAMC,GAAG,GAAG,MAAMf,GAAG,CAACgB,IAAJ,CAAS,SAAT,EAAoB;AACpCC,QAAAA,OAAO,EAAEd,QAAQ,CAACc,OADkB;AAEpCH,QAAAA,MAFoC;AAGpCI,QAAAA,YAAY,EAAExB,iBAAiB,CAACS,QAAD,CAHK;AAIpC,YACE,MAAMV,gBAAgB,CAAC,CAACa,UAAD,CAAD,EAAeM,UAAf,EAA2BT,QAAQ,CAACgB,OAApC,CADxB;AAJoC,OAApB,CAAlB;AAQA,YAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAJ,EAAnB;AAEA,aAAO9B,GAAG,CAAC+B,KAAJ,CAAUF,IAAI,CAACG,GAAL,CAAS,GAAT,CAAV,CAAP;AACD,KA3CD;;AA6CA,WAAOtB,GAAP;AACD,GAlDmB,CAApB;AAoDA,SAAOF,EAAE,CAACD,OAAD,CAAT;AACD,CAtDM","sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createPut = (codecs, options) => {\n  const fn = configure((api) => {\n    /**\n     * @type {DAGAPI[\"put\"]}\n     */\n    const put = async (dagNode, options = {}) => {\n      const settings = {\n        storeCodec: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        ...options\n      }\n\n      let serialized\n\n      if (settings.inputCodec) {\n        // if you supply an inputCodec, we assume you're passing in a raw, encoded\n        // block using that codec, so we'll just pass that on to the server and let\n        // it deal with the decode/encode/store cycle\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded')\n        }\n        serialized = dagNode\n      } else {\n        // if you don't supply an inputCodec, we assume you've passed in a JavaScript\n        // object you want to have encoded using storeCodec, so we'll prepare it for\n        // you if we have the codec\n        const storeCodec = await codecs.getCodec(settings.storeCodec)\n        serialized = storeCodec.encode(dagNode)\n        // now we have a serialized form, the server should be told to receive it\n        // in that format\n        settings.inputCodec = settings.storeCodec\n      }\n\n      // allow aborting requests on body errors\n      const controller = new AbortController()\n      const signal = abortSignal(controller.signal, settings.signal)\n\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams(settings),\n        ...(\n          await multipartRequest([serialized], controller, settings.headers)\n        )\n      })\n      const data = await res.json()\n\n      return CID.parse(data.Cid['/'])\n    }\n\n    return put\n  })\n\n  return fn(options)\n}\n"]},"metadata":{},"sourceType":"module"}