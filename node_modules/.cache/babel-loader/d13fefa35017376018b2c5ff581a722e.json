{"ast":null,"code":"import { multiaddr } from '@multiformats/multiaddr';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createLocalAddrs = configure(api => {\n  /**\n   * @type {SwarmAPI[\"localAddrs\"]}\n   */\n  async function localAddrs() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await api.post('swarm/addrs/local', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    });\n    /** @type {{ Strings: string[] }} */\n\n    const {\n      Strings\n    } = await res.json();\n    return (Strings || []).map(a => multiaddr(a));\n  }\n\n  return localAddrs;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/swarm/local-addrs.js"],"names":["multiaddr","configure","toUrlSearchParams","createLocalAddrs","api","localAddrs","options","res","post","signal","searchParams","headers","Strings","json","map","a"],"mappings":"AAAA,SAASA,SAAT,QAA0B,yBAA1B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,gBAAgB,GAAGF,SAAS,CAACG,GAAG,IAAI;AAC/C;AACF;AACA;AACE,iBAAeC,UAAf,GAAyC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACvC,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,mBAAT,EAA8B;AAC9CC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MAD8B;AAE9CC,MAAAA,YAAY,EAAER,iBAAiB,CAACI,OAAD,CAFe;AAG9CK,MAAAA,OAAO,EAAEL,OAAO,CAACK;AAH6B,KAA9B,CAAlB;AAMA;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAc,MAAML,GAAG,CAACM,IAAJ,EAA1B;AAEA,WAAO,CAACD,OAAO,IAAI,EAAZ,EAAgBE,GAAhB,CAAoBC,CAAC,IAAIf,SAAS,CAACe,CAAD,CAAlC,CAAP;AACD;;AACD,SAAOV,UAAP;AACD,CAjBwC,CAAlC","sourcesContent":["import { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createLocalAddrs = configure(api => {\n  /**\n   * @type {SwarmAPI[\"localAddrs\"]}\n   */\n  async function localAddrs (options = {}) {\n    const res = await api.post('swarm/addrs/local', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Strings: string[] }} */\n    const { Strings } = await res.json()\n\n    return (Strings || []).map(a => multiaddr(a))\n  }\n  return localAddrs\n})\n"]},"metadata":{},"sourceType":"module"}