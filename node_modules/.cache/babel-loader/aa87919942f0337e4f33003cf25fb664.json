{"ast":null,"code":"/**\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadHasherFn}\n */\nconst LOAD_HASHER = codeOrName => Promise.reject(new Error(`No hasher found for \"${codeOrName}\"`));\n\nexport class Multihashes {\n  /**\n   * @param {object} options\n   * @param {LoadHasherFn} [options.loadHasher]\n   * @param {MultihashHasher[]} options.hashers\n   */\n  constructor(options) {\n    // Object with current list of active hashers\n\n    /** @type {Record<string, MultihashHasher>}} */\n    this._hashersByName = {}; // Object with current list of active hashers\n\n    /** @type {Record<number, MultihashHasher>}} */\n\n    this._hashersByCode = {};\n    this._loadHasher = options.loadHasher || LOAD_HASHER; // Enable all supplied hashers\n\n    for (const hasher of options.hashers) {\n      this.addHasher(hasher);\n    }\n  }\n  /**\n   * Add support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n\n\n  addHasher(hasher) {\n    if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) {\n      throw new Error(`Resolver already exists for codec \"${hasher.name}\"`);\n    }\n\n    this._hashersByName[hasher.name] = hasher;\n    this._hashersByCode[hasher.code] = hasher;\n  }\n  /**\n   * Remove support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n\n\n  removeHasher(hasher) {\n    delete this._hashersByName[hasher.name];\n    delete this._hashersByCode[hasher.code];\n  }\n  /**\n   * @param {number | string} code\n   */\n\n\n  async getHasher(code) {\n    const table = typeof code === 'string' ? this._hashersByName : this._hashersByCode;\n\n    if (table[code]) {\n      return table[code];\n    } // If not supported, attempt to dynamically load this hasher\n\n\n    const hasher = await this._loadHasher(code);\n\n    if (table[code] == null) {\n      this.addHasher(hasher);\n    }\n\n    return hasher;\n  }\n\n  listHashers() {\n    return Object.values(this._hashersByName);\n  }\n\n}","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-core-utils/src/multihashes.js"],"names":["LOAD_HASHER","codeOrName","Promise","reject","Error","Multihashes","constructor","options","_hashersByName","_hashersByCode","_loadHasher","loadHasher","hasher","hashers","addHasher","name","code","removeHasher","getHasher","table","listHashers","Object","values"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMA,WAAW,GAAIC,UAAD,IAAgBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAW,wBAAuBH,UAAW,GAA7C,CAAf,CAApC;;AAEA,OAAO,MAAMI,WAAN,CAAkB;AACvB;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAEC,OAAF,EAAW;AACpB;;AACA;AACA,SAAKC,cAAL,GAAsB,EAAtB,CAHoB,CAKpB;;AACA;;AACA,SAAKC,cAAL,GAAsB,EAAtB;AAEA,SAAKC,WAAL,GAAmBH,OAAO,CAACI,UAAR,IAAsBX,WAAzC,CAToB,CAWpB;;AACA,SAAK,MAAMY,MAAX,IAAqBL,OAAO,CAACM,OAA7B,EAAsC;AACpC,WAAKC,SAAL,CAAeF,MAAf;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,SAAS,CAAEF,MAAF,EAAU;AACjB,QAAI,KAAKJ,cAAL,CAAoBI,MAAM,CAACG,IAA3B,KAAoC,KAAKN,cAAL,CAAoBG,MAAM,CAACI,IAA3B,CAAxC,EAA0E;AACxE,YAAM,IAAIZ,KAAJ,CAAW,sCAAqCQ,MAAM,CAACG,IAAK,GAA5D,CAAN;AACD;;AAED,SAAKP,cAAL,CAAoBI,MAAM,CAACG,IAA3B,IAAmCH,MAAnC;AACA,SAAKH,cAAL,CAAoBG,MAAM,CAACI,IAA3B,IAAmCJ,MAAnC;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEK,EAAAA,YAAY,CAAEL,MAAF,EAAU;AACpB,WAAO,KAAKJ,cAAL,CAAoBI,MAAM,CAACG,IAA3B,CAAP;AACA,WAAO,KAAKN,cAAL,CAAoBG,MAAM,CAACI,IAA3B,CAAP;AACD;AAED;AACF;AACA;;;AACiB,QAATE,SAAS,CAAEF,IAAF,EAAQ;AACrB,UAAMG,KAAK,GAAG,OAAOH,IAAP,KAAgB,QAAhB,GAA2B,KAAKR,cAAhC,GAAiD,KAAKC,cAApE;;AAEA,QAAIU,KAAK,CAACH,IAAD,CAAT,EAAiB;AACf,aAAOG,KAAK,CAACH,IAAD,CAAZ;AACD,KALoB,CAOrB;;;AACA,UAAMJ,MAAM,GAAG,MAAM,KAAKF,WAAL,CAAiBM,IAAjB,CAArB;;AAEA,QAAIG,KAAK,CAACH,IAAD,CAAL,IAAe,IAAnB,EAAyB;AACvB,WAAKF,SAAL,CAAeF,MAAf;AACD;;AAED,WAAOA,MAAP;AACD;;AAEDQ,EAAAA,WAAW,GAAI;AACb,WAAOC,MAAM,CAACC,MAAP,CAAc,KAAKd,cAAnB,CAAP;AACD;;AArEsB","sourcesContent":["/**\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadHasherFn}\n */\nconst LOAD_HASHER = (codeOrName) => Promise.reject(new Error(`No hasher found for \"${codeOrName}\"`))\n\nexport class Multihashes {\n  /**\n   * @param {object} options\n   * @param {LoadHasherFn} [options.loadHasher]\n   * @param {MultihashHasher[]} options.hashers\n   */\n  constructor (options) {\n    // Object with current list of active hashers\n    /** @type {Record<string, MultihashHasher>}} */\n    this._hashersByName = {}\n\n    // Object with current list of active hashers\n    /** @type {Record<number, MultihashHasher>}} */\n    this._hashersByCode = {}\n\n    this._loadHasher = options.loadHasher || LOAD_HASHER\n\n    // Enable all supplied hashers\n    for (const hasher of options.hashers) {\n      this.addHasher(hasher)\n    }\n  }\n\n  /**\n   * Add support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n  addHasher (hasher) {\n    if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) {\n      throw new Error(`Resolver already exists for codec \"${hasher.name}\"`)\n    }\n\n    this._hashersByName[hasher.name] = hasher\n    this._hashersByCode[hasher.code] = hasher\n  }\n\n  /**\n   * Remove support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n  removeHasher (hasher) {\n    delete this._hashersByName[hasher.name]\n    delete this._hashersByCode[hasher.code]\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getHasher (code) {\n    const table = typeof code === 'string' ? this._hashersByName : this._hashersByCode\n\n    if (table[code]) {\n      return table[code]\n    }\n\n    // If not supported, attempt to dynamically load this hasher\n    const hasher = await this._loadHasher(code)\n\n    if (table[code] == null) {\n      this.addHasher(hasher)\n    }\n\n    return hasher\n  }\n\n  listHashers () {\n    return Object.values(this._hashersByName)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}