{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { objectToCamel } from '../lib/object-to-camel.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { createLocal } from './local.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nexport const createRefs = configure((api, opts) => {\n  /**\n   * @type {RefsAPI[\"refs\"]}\n   */\n  const refs = async function* (args) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const argsArr = Array.isArray(args) ? args : [args];\n    const res = await api.post('refs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: argsArr.map(arg => `${arg instanceof Uint8Array ? CID.decode(arg) : arg}`),\n        ...options\n      }),\n      headers: options.headers,\n      transform: objectToCamel\n    });\n    yield* res.ndjson();\n  };\n\n  return Object.assign(refs, {\n    local: createLocal(opts)\n  });\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/refs/index.js"],"names":["CID","objectToCamel","configure","toUrlSearchParams","createLocal","createRefs","api","opts","refs","args","options","argsArr","Array","isArray","res","post","signal","searchParams","arg","map","Uint8Array","decode","headers","transform","ndjson","Object","assign","local"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,WAAT,QAA4B,YAA5B;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAGH,SAAS,CAAC,CAACI,GAAD,EAAMC,IAAN,KAAe;AACjD;AACF;AACA;AACE,QAAMC,IAAI,GAAG,iBAAkBC,IAAlB,EAAsC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AACjD;AACA,UAAMC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcJ,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAA7C;AAEA,UAAMK,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,MAAT,EAAiB;AACjCC,MAAAA,MAAM,EAAEN,OAAO,CAACM,MADiB;AAEjCC,MAAAA,YAAY,EAAEd,iBAAiB,CAAC;AAC9Be,QAAAA,GAAG,EAAEP,OAAO,CAACQ,GAAR,CAAYD,GAAG,IAAK,GAAEA,GAAG,YAAYE,UAAf,GAA4BpB,GAAG,CAACqB,MAAJ,CAAWH,GAAX,CAA5B,GAA8CA,GAAI,EAAxE,CADyB;AAE9B,WAAGR;AAF2B,OAAD,CAFE;AAMjCY,MAAAA,OAAO,EAAEZ,OAAO,CAACY,OANgB;AAOjCC,MAAAA,SAAS,EAAEtB;AAPsB,KAAjB,CAAlB;AAUA,WAAQa,GAAG,CAACU,MAAJ,EAAR;AACD,GAfD;;AAiBA,SAAOC,MAAM,CAACC,MAAP,CAAclB,IAAd,EAAoB;AACzBmB,IAAAA,KAAK,EAAEvB,WAAW,CAACG,IAAD;AADO,GAApB,CAAP;AAGD,CAxBkC,CAA5B","sourcesContent":["import { CID } from 'multiformats/cid'\nimport { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { createLocal } from './local.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nexport const createRefs = configure((api, opts) => {\n  /**\n   * @type {RefsAPI[\"refs\"]}\n   */\n  const refs = async function * (args, options = {}) {\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const argsArr = Array.isArray(args) ? args : [args]\n\n    const res = await api.post('refs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: argsArr.map(arg => `${arg instanceof Uint8Array ? CID.decode(arg) : arg}`),\n        ...options\n      }),\n      headers: options.headers,\n      transform: objectToCamel\n    })\n\n    yield * res.ndjson()\n  }\n\n  return Object.assign(refs, {\n    local: createLocal(opts)\n  })\n})\n"]},"metadata":{},"sourceType":"module"}