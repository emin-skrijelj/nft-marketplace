{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from './lib/configure.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {RootAPI[\"get\"]}\n   */\n  async function* get(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /** @type {Record<string, any>} */\n    const opts = {\n      arg: `${path instanceof Uint8Array ? CID.decode(path) : path}`,\n      ...options\n    };\n\n    if (opts.compressionLevel) {\n      opts['compression-level'] = opts.compressionLevel;\n      delete opts.compressionLevel;\n    }\n\n    const res = await api.post('get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(opts),\n      headers: options.headers\n    });\n    yield* res.iterator();\n  }\n\n  return get;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/get.js"],"names":["CID","configure","toUrlSearchParams","createGet","api","get","path","options","opts","arg","Uint8Array","decode","compressionLevel","res","post","signal","searchParams","headers","iterator"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAGF,SAAS,CAACG,GAAG,IAAI;AACxC;AACF;AACA;AACE,kBAAiBC,GAAjB,CAAsBC,IAAtB,EAA0C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AACxC;AACA,UAAMC,IAAI,GAAG;AACXC,MAAAA,GAAG,EAAG,GAAEH,IAAI,YAAYI,UAAhB,GAA6BV,GAAG,CAACW,MAAJ,CAAWL,IAAX,CAA7B,GAAgDA,IAAK,EADlD;AAEX,SAAGC;AAFQ,KAAb;;AAKA,QAAIC,IAAI,CAACI,gBAAT,EAA2B;AACzBJ,MAAAA,IAAI,CAAC,mBAAD,CAAJ,GAA4BA,IAAI,CAACI,gBAAjC;AACA,aAAOJ,IAAI,CAACI,gBAAZ;AACD;;AAED,UAAMC,GAAG,GAAG,MAAMT,GAAG,CAACU,IAAJ,CAAS,KAAT,EAAgB;AAChCC,MAAAA,MAAM,EAAER,OAAO,CAACQ,MADgB;AAEhCC,MAAAA,YAAY,EAAEd,iBAAiB,CAACM,IAAD,CAFC;AAGhCS,MAAAA,OAAO,EAAEV,OAAO,CAACU;AAHe,KAAhB,CAAlB;AAMA,WAAQJ,GAAG,CAACK,QAAJ,EAAR;AACD;;AAED,SAAOb,GAAP;AACD,CA1BiC,CAA3B","sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {RootAPI[\"get\"]}\n   */\n  async function * get (path, options = {}) {\n    /** @type {Record<string, any>} */\n    const opts = {\n      arg: `${path instanceof Uint8Array ? CID.decode(path) : path}`,\n      ...options\n    }\n\n    if (opts.compressionLevel) {\n      opts['compression-level'] = opts.compressionLevel\n      delete opts.compressionLevel\n    }\n\n    const res = await api.post('get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(opts),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return get\n})\n"]},"metadata":{},"sourceType":"module"}