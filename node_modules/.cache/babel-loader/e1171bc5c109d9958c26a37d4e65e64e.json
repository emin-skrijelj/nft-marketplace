{"ast":null,"code":"import { convertToIpNet } from '../convert.js';\nimport { multiaddr } from '../index.js';\n/**\n * A utility class to determine if a Multiaddr contains another\n * multiaddr.\n *\n * This can be used with ipcidr ranges to determine if a given\n * multiaddr is in a ipcidr range.\n *\n * @example\n *\n * ```js\n * import { multiaddr, MultiaddrFilter } from '@multiformats/multiaddr'\n *\n * const range = multiaddr('/ip4/192.168.10.10/ipcidr/24')\n * const filter = new MultiaddrFilter(range)\n *\n * const input = multiaddr('/ip4/192.168.10.2/udp/60')\n * console.info(filter.contains(input)) // true\n * ```\n */\n\nexport class MultiaddrFilter {\n  multiaddr;\n  netmask;\n\n  constructor(input) {\n    this.multiaddr = multiaddr(input);\n    this.netmask = convertToIpNet(this.multiaddr);\n  }\n\n  contains(input) {\n    if (input == null) return false;\n    const m = multiaddr(input);\n    let ip;\n\n    for (const [code, value] of m.stringTuples()) {\n      if (code === 4 || code === 41) {\n        ip = value;\n        break;\n      }\n    }\n\n    if (ip === undefined) return false;\n    return this.netmask.contains(ip);\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,cAAT,QAA+B,eAA/B;AACA,SAASC,SAAT,QAA+D,aAA/D;AAGA;;;;;;;;;;;;;;;;;;;;AAmBA,OAAM,MAAOC,eAAP,CAAsB;AACTD,WAAS;AACTE,SAAO;;AAExBC,cAAoBC,KAApB,EAAyC;AACvC,SAAKJ,SAAL,GAAiBA,SAAS,CAACI,KAAD,CAA1B;AACA,SAAKF,OAAL,GAAeH,cAAc,CAAC,KAAKC,SAAN,CAA7B;AACD;;AAEMK,UAAQ,CAAED,KAAF,EAAuB;AACpC,QAAIA,KAAK,IAAI,IAAb,EAAmB,OAAO,KAAP;AACnB,UAAME,CAAC,GAAGN,SAAS,CAACI,KAAD,CAAnB;AACA,QAAIG,EAAJ;;AACA,SAAK,MAAM,CAACC,IAAD,EAAOC,KAAP,CAAX,IAA4BH,CAAC,CAACI,YAAF,EAA5B,EAA8C;AAC5C,UAAIF,IAAI,KAAK,CAAT,IAAcA,IAAI,KAAK,EAA3B,EAA+B;AAC7BD,UAAE,GAAGE,KAAL;AACA;AACD;AACF;;AACD,QAAIF,EAAE,KAAKI,SAAX,EAAsB,OAAO,KAAP;AACtB,WAAO,KAAKT,OAAL,CAAaG,QAAb,CAAsBE,EAAtB,CAAP;AACD;;AArByB","names":["convertToIpNet","multiaddr","MultiaddrFilter","netmask","constructor","input","contains","m","ip","code","value","stringTuples","undefined"],"sources":["/home/legasi/nft-marketplace/node_modules/@multiformats/multiaddr/src/filter/multiaddr-filter.ts"],"sourcesContent":["import { convertToIpNet } from '../convert.js'\nimport { multiaddr, type Multiaddr, type MultiaddrInput } from '../index.js'\nimport type { IpNet } from '@chainsafe/netmask'\n\n/**\n * A utility class to determine if a Multiaddr contains another\n * multiaddr.\n *\n * This can be used with ipcidr ranges to determine if a given\n * multiaddr is in a ipcidr range.\n *\n * @example\n *\n * ```js\n * import { multiaddr, MultiaddrFilter } from '@multiformats/multiaddr'\n *\n * const range = multiaddr('/ip4/192.168.10.10/ipcidr/24')\n * const filter = new MultiaddrFilter(range)\n *\n * const input = multiaddr('/ip4/192.168.10.2/udp/60')\n * console.info(filter.contains(input)) // true\n * ```\n */\nexport class MultiaddrFilter {\n  private readonly multiaddr: Multiaddr\n  private readonly netmask: IpNet\n\n  public constructor (input: MultiaddrInput) {\n    this.multiaddr = multiaddr(input)\n    this.netmask = convertToIpNet(this.multiaddr)\n  }\n\n  public contains (input: MultiaddrInput): boolean {\n    if (input == null) return false\n    const m = multiaddr(input)\n    let ip\n    for (const [code, value] of m.stringTuples()) {\n      if (code === 4 || code === 41) {\n        ip = value\n        break\n      }\n    }\n    if (ip === undefined) return false\n    return this.netmask.contains(ip)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}