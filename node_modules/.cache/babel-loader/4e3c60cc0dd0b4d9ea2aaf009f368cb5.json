{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createLs = configure(api => {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  async function* ls(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path');\n    }\n\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.asCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    });\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(objectToCamelWithMetadata(entry));\n        }\n      } else {\n        yield toCoreInterface(objectToCamelWithMetadata(result));\n      }\n    }\n  }\n\n  return ls;\n});\n/**\n * @param {*} entry\n */\n\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash);\n  }\n\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/files/ls.js"],"names":["CID","objectToCamelWithMetadata","configure","toUrlSearchParams","createLs","api","ls","path","options","Error","res","post","signal","searchParams","arg","asCID","long","stream","headers","result","ndjson","entry","Entries","toCoreInterface","hash","cid","parse","type"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,yBAAT,QAA0C,yCAA1C;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAACG,GAAG,IAAI;AACvC;AACF;AACA;AACE,kBAAiBC,EAAjB,CAAqBC,IAArB,EAAyC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AACvC,QAAI,CAACD,IAAL,EAAW;AACT,YAAM,IAAIE,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,UAAMC,GAAG,GAAG,MAAML,GAAG,CAACM,IAAJ,CAAS,UAAT,EAAqB;AACrCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MADqB;AAErCC,MAAAA,YAAY,EAAEV,iBAAiB,CAAC;AAC9BW,QAAAA,GAAG,EAAEd,GAAG,CAACe,KAAJ,CAAUR,IAAV,IAAmB,SAAQA,IAAK,EAAhC,GAAoCA,IADX;AAE9B;AACAS,QAAAA,IAAI,EAAE,IAHwB;AAI9B,WAAGR,OAJ2B;AAK9BS,QAAAA,MAAM,EAAE;AALsB,OAAD,CAFM;AASrCC,MAAAA,OAAO,EAAEV,OAAO,CAACU;AAToB,KAArB,CAAlB;;AAYA,eAAW,MAAMC,MAAjB,IAA2BT,GAAG,CAACU,MAAJ,EAA3B,EAAyC;AACvC;AACA,UAAI,aAAaD,MAAjB,EAAyB;AACvB,aAAK,MAAME,KAAX,IAAoBF,MAAM,CAACG,OAAP,IAAkB,EAAtC,EAA0C;AACxC,gBAAMC,eAAe,CAACtB,yBAAyB,CAACoB,KAAD,CAA1B,CAArB;AACD;AACF,OAJD,MAIO;AACL,cAAME,eAAe,CAACtB,yBAAyB,CAACkB,MAAD,CAA1B,CAArB;AACD;AACF;AACF;;AACD,SAAOb,EAAP;AACD,CAjCgC,CAA1B;AAmCP;AACA;AACA;;AACA,SAASiB,eAAT,CAA0BF,KAA1B,EAAiC;AAC/B,MAAIA,KAAK,CAACG,IAAV,EAAgB;AACdH,IAAAA,KAAK,CAACI,GAAN,GAAYzB,GAAG,CAAC0B,KAAJ,CAAUL,KAAK,CAACG,IAAhB,CAAZ;AACD;;AAED,SAAOH,KAAK,CAACG,IAAb;AAEAH,EAAAA,KAAK,CAACM,IAAN,GAAaN,KAAK,CAACM,IAAN,KAAe,CAAf,GAAmB,WAAnB,GAAiC,MAA9C;AAEA,SAAON,KAAP;AACD","sourcesContent":["import { CID } from 'multiformats/cid'\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\nexport const createLs = configure(api => {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path')\n    }\n\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.asCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(objectToCamelWithMetadata(entry))\n        }\n      } else {\n        yield toCoreInterface(objectToCamelWithMetadata(result))\n      }\n    }\n  }\n  return ls\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash)\n  }\n\n  delete entry.hash\n\n  entry.type = entry.type === 1 ? 'directory' : 'file'\n\n  return entry\n}\n"]},"metadata":{},"sourceType":"module"}