{"ast":null,"code":"/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\"; // Common aliases\n\nconst $Reader = $protobuf.Reader,\n      $Writer = $protobuf.Writer,\n      $util = $protobuf.util; // Exported root namespace\n\nconst $root = $protobuf.roots[\"ipfs-unixfs\"] || ($protobuf.roots[\"ipfs-unixfs\"] = {});\nexport const Data = $root.Data = (() => {\n  /**\n   * Properties of a Data.\n   * @exports IData\n   * @interface IData\n   * @property {Data.DataType} Type Data Type\n   * @property {Uint8Array|null} [Data] Data Data\n   * @property {number|null} [filesize] Data filesize\n   * @property {Array.<number>|null} [blocksizes] Data blocksizes\n   * @property {number|null} [hashType] Data hashType\n   * @property {number|null} [fanout] Data fanout\n   * @property {number|null} [mode] Data mode\n   * @property {IUnixTime|null} [mtime] Data mtime\n   */\n\n  /**\n   * Constructs a new Data.\n   * @exports Data\n   * @classdesc Represents a Data.\n   * @implements IData\n   * @constructor\n   * @param {IData=} [p] Properties to set\n   */\n  function Data(p) {\n    this.blocksizes = [];\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n  /**\n   * Data Type.\n   * @member {Data.DataType} Type\n   * @memberof Data\n   * @instance\n   */\n\n\n  Data.prototype.Type = 0;\n  /**\n   * Data Data.\n   * @member {Uint8Array} Data\n   * @memberof Data\n   * @instance\n   */\n\n  Data.prototype.Data = $util.newBuffer([]);\n  /**\n   * Data filesize.\n   * @member {number} filesize\n   * @memberof Data\n   * @instance\n   */\n\n  Data.prototype.filesize = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * Data blocksizes.\n   * @member {Array.<number>} blocksizes\n   * @memberof Data\n   * @instance\n   */\n\n  Data.prototype.blocksizes = $util.emptyArray;\n  /**\n   * Data hashType.\n   * @member {number} hashType\n   * @memberof Data\n   * @instance\n   */\n\n  Data.prototype.hashType = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * Data fanout.\n   * @member {number} fanout\n   * @memberof Data\n   * @instance\n   */\n\n  Data.prototype.fanout = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * Data mode.\n   * @member {number} mode\n   * @memberof Data\n   * @instance\n   */\n\n  Data.prototype.mode = 0;\n  /**\n   * Data mtime.\n   * @member {IUnixTime|null|undefined} mtime\n   * @memberof Data\n   * @instance\n   */\n\n  Data.prototype.mtime = null;\n  /**\n   * Encodes the specified Data message. Does not implicitly {@link Data.verify|verify} messages.\n   * @function encode\n   * @memberof Data\n   * @static\n   * @param {IData} m Data message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  Data.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    w.uint32(8).int32(m.Type);\n    if (m.Data != null && Object.hasOwnProperty.call(m, \"Data\")) w.uint32(18).bytes(m.Data);\n    if (m.filesize != null && Object.hasOwnProperty.call(m, \"filesize\")) w.uint32(24).uint64(m.filesize);\n\n    if (m.blocksizes != null && m.blocksizes.length) {\n      for (var i = 0; i < m.blocksizes.length; ++i) w.uint32(32).uint64(m.blocksizes[i]);\n    }\n\n    if (m.hashType != null && Object.hasOwnProperty.call(m, \"hashType\")) w.uint32(40).uint64(m.hashType);\n    if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\")) w.uint32(48).uint64(m.fanout);\n    if (m.mode != null && Object.hasOwnProperty.call(m, \"mode\")) w.uint32(56).uint32(m.mode);\n    if (m.mtime != null && Object.hasOwnProperty.call(m, \"mtime\")) $root.UnixTime.encode(m.mtime, w.uint32(66).fork()).ldelim();\n    return w;\n  };\n  /**\n   * Decodes a Data message from the specified reader or buffer.\n   * @function decode\n   * @memberof Data\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {Data} Data\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Data.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.Data();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          m.Type = r.int32();\n          break;\n\n        case 2:\n          m.Data = r.bytes();\n          break;\n\n        case 3:\n          m.filesize = r.uint64();\n          break;\n\n        case 4:\n          if (!(m.blocksizes && m.blocksizes.length)) m.blocksizes = [];\n\n          if ((t & 7) === 2) {\n            var c2 = r.uint32() + r.pos;\n\n            while (r.pos < c2) m.blocksizes.push(r.uint64());\n          } else m.blocksizes.push(r.uint64());\n\n          break;\n\n        case 5:\n          m.hashType = r.uint64();\n          break;\n\n        case 6:\n          m.fanout = r.uint64();\n          break;\n\n        case 7:\n          m.mode = r.uint32();\n          break;\n\n        case 8:\n          m.mtime = $root.UnixTime.decode(r, r.uint32());\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    if (!m.hasOwnProperty(\"Type\")) throw $util.ProtocolError(\"missing required 'Type'\", {\n      instance: m\n    });\n    return m;\n  };\n  /**\n   * Creates a Data message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Data\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {Data} Data\n   */\n\n\n  Data.fromObject = function fromObject(d) {\n    if (d instanceof $root.Data) return d;\n    var m = new $root.Data();\n\n    switch (d.Type) {\n      case \"Raw\":\n      case 0:\n        m.Type = 0;\n        break;\n\n      case \"Directory\":\n      case 1:\n        m.Type = 1;\n        break;\n\n      case \"File\":\n      case 2:\n        m.Type = 2;\n        break;\n\n      case \"Metadata\":\n      case 3:\n        m.Type = 3;\n        break;\n\n      case \"Symlink\":\n      case 4:\n        m.Type = 4;\n        break;\n\n      case \"HAMTShard\":\n      case 5:\n        m.Type = 5;\n        break;\n    }\n\n    if (d.Data != null) {\n      if (typeof d.Data === \"string\") $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);else if (d.Data.length) m.Data = d.Data;\n    }\n\n    if (d.filesize != null) {\n      if ($util.Long) (m.filesize = $util.Long.fromValue(d.filesize)).unsigned = true;else if (typeof d.filesize === \"string\") m.filesize = parseInt(d.filesize, 10);else if (typeof d.filesize === \"number\") m.filesize = d.filesize;else if (typeof d.filesize === \"object\") m.filesize = new $util.LongBits(d.filesize.low >>> 0, d.filesize.high >>> 0).toNumber(true);\n    }\n\n    if (d.blocksizes) {\n      if (!Array.isArray(d.blocksizes)) throw TypeError(\".Data.blocksizes: array expected\");\n      m.blocksizes = [];\n\n      for (var i = 0; i < d.blocksizes.length; ++i) {\n        if ($util.Long) (m.blocksizes[i] = $util.Long.fromValue(d.blocksizes[i])).unsigned = true;else if (typeof d.blocksizes[i] === \"string\") m.blocksizes[i] = parseInt(d.blocksizes[i], 10);else if (typeof d.blocksizes[i] === \"number\") m.blocksizes[i] = d.blocksizes[i];else if (typeof d.blocksizes[i] === \"object\") m.blocksizes[i] = new $util.LongBits(d.blocksizes[i].low >>> 0, d.blocksizes[i].high >>> 0).toNumber(true);\n      }\n    }\n\n    if (d.hashType != null) {\n      if ($util.Long) (m.hashType = $util.Long.fromValue(d.hashType)).unsigned = true;else if (typeof d.hashType === \"string\") m.hashType = parseInt(d.hashType, 10);else if (typeof d.hashType === \"number\") m.hashType = d.hashType;else if (typeof d.hashType === \"object\") m.hashType = new $util.LongBits(d.hashType.low >>> 0, d.hashType.high >>> 0).toNumber(true);\n    }\n\n    if (d.fanout != null) {\n      if ($util.Long) (m.fanout = $util.Long.fromValue(d.fanout)).unsigned = true;else if (typeof d.fanout === \"string\") m.fanout = parseInt(d.fanout, 10);else if (typeof d.fanout === \"number\") m.fanout = d.fanout;else if (typeof d.fanout === \"object\") m.fanout = new $util.LongBits(d.fanout.low >>> 0, d.fanout.high >>> 0).toNumber(true);\n    }\n\n    if (d.mode != null) {\n      m.mode = d.mode >>> 0;\n    }\n\n    if (d.mtime != null) {\n      if (typeof d.mtime !== \"object\") throw TypeError(\".Data.mtime: object expected\");\n      m.mtime = $root.UnixTime.fromObject(d.mtime);\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from a Data message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Data\n   * @static\n   * @param {Data} m Data\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  Data.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.arrays || o.defaults) {\n      d.blocksizes = [];\n    }\n\n    if (o.defaults) {\n      d.Type = o.enums === String ? \"Raw\" : 0;\n      if (o.bytes === String) d.Data = \"\";else {\n        d.Data = [];\n        if (o.bytes !== Array) d.Data = $util.newBuffer(d.Data);\n      }\n\n      if ($util.Long) {\n        var n = new $util.Long(0, 0, true);\n        d.filesize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n      } else d.filesize = o.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var n = new $util.Long(0, 0, true);\n        d.hashType = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n      } else d.hashType = o.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var n = new $util.Long(0, 0, true);\n        d.fanout = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n      } else d.fanout = o.longs === String ? \"0\" : 0;\n\n      d.mode = 0;\n      d.mtime = null;\n    }\n\n    if (m.Type != null && m.hasOwnProperty(\"Type\")) {\n      d.Type = o.enums === String ? $root.Data.DataType[m.Type] : m.Type;\n    }\n\n    if (m.Data != null && m.hasOwnProperty(\"Data\")) {\n      d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;\n    }\n\n    if (m.filesize != null && m.hasOwnProperty(\"filesize\")) {\n      if (typeof m.filesize === \"number\") d.filesize = o.longs === String ? String(m.filesize) : m.filesize;else d.filesize = o.longs === String ? $util.Long.prototype.toString.call(m.filesize) : o.longs === Number ? new $util.LongBits(m.filesize.low >>> 0, m.filesize.high >>> 0).toNumber(true) : m.filesize;\n    }\n\n    if (m.blocksizes && m.blocksizes.length) {\n      d.blocksizes = [];\n\n      for (var j = 0; j < m.blocksizes.length; ++j) {\n        if (typeof m.blocksizes[j] === \"number\") d.blocksizes[j] = o.longs === String ? String(m.blocksizes[j]) : m.blocksizes[j];else d.blocksizes[j] = o.longs === String ? $util.Long.prototype.toString.call(m.blocksizes[j]) : o.longs === Number ? new $util.LongBits(m.blocksizes[j].low >>> 0, m.blocksizes[j].high >>> 0).toNumber(true) : m.blocksizes[j];\n      }\n    }\n\n    if (m.hashType != null && m.hasOwnProperty(\"hashType\")) {\n      if (typeof m.hashType === \"number\") d.hashType = o.longs === String ? String(m.hashType) : m.hashType;else d.hashType = o.longs === String ? $util.Long.prototype.toString.call(m.hashType) : o.longs === Number ? new $util.LongBits(m.hashType.low >>> 0, m.hashType.high >>> 0).toNumber(true) : m.hashType;\n    }\n\n    if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n      if (typeof m.fanout === \"number\") d.fanout = o.longs === String ? String(m.fanout) : m.fanout;else d.fanout = o.longs === String ? $util.Long.prototype.toString.call(m.fanout) : o.longs === Number ? new $util.LongBits(m.fanout.low >>> 0, m.fanout.high >>> 0).toNumber(true) : m.fanout;\n    }\n\n    if (m.mode != null && m.hasOwnProperty(\"mode\")) {\n      d.mode = m.mode;\n    }\n\n    if (m.mtime != null && m.hasOwnProperty(\"mtime\")) {\n      d.mtime = $root.UnixTime.toObject(m.mtime, o);\n    }\n\n    return d;\n  };\n  /**\n   * Converts this Data to JSON.\n   * @function toJSON\n   * @memberof Data\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  Data.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  /**\n   * DataType enum.\n   * @name Data.DataType\n   * @enum {number}\n   * @property {number} Raw=0 Raw value\n   * @property {number} Directory=1 Directory value\n   * @property {number} File=2 File value\n   * @property {number} Metadata=3 Metadata value\n   * @property {number} Symlink=4 Symlink value\n   * @property {number} HAMTShard=5 HAMTShard value\n   */\n\n\n  Data.DataType = function () {\n    const valuesById = {},\n          values = Object.create(valuesById);\n    values[valuesById[0] = \"Raw\"] = 0;\n    values[valuesById[1] = \"Directory\"] = 1;\n    values[valuesById[2] = \"File\"] = 2;\n    values[valuesById[3] = \"Metadata\"] = 3;\n    values[valuesById[4] = \"Symlink\"] = 4;\n    values[valuesById[5] = \"HAMTShard\"] = 5;\n    return values;\n  }();\n\n  return Data;\n})();\nexport const UnixTime = $root.UnixTime = (() => {\n  /**\n   * Properties of an UnixTime.\n   * @exports IUnixTime\n   * @interface IUnixTime\n   * @property {number} Seconds UnixTime Seconds\n   * @property {number|null} [FractionalNanoseconds] UnixTime FractionalNanoseconds\n   */\n\n  /**\n   * Constructs a new UnixTime.\n   * @exports UnixTime\n   * @classdesc Represents an UnixTime.\n   * @implements IUnixTime\n   * @constructor\n   * @param {IUnixTime=} [p] Properties to set\n   */\n  function UnixTime(p) {\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n  /**\n   * UnixTime Seconds.\n   * @member {number} Seconds\n   * @memberof UnixTime\n   * @instance\n   */\n\n\n  UnixTime.prototype.Seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n  /**\n   * UnixTime FractionalNanoseconds.\n   * @member {number} FractionalNanoseconds\n   * @memberof UnixTime\n   * @instance\n   */\n\n  UnixTime.prototype.FractionalNanoseconds = 0;\n  /**\n   * Encodes the specified UnixTime message. Does not implicitly {@link UnixTime.verify|verify} messages.\n   * @function encode\n   * @memberof UnixTime\n   * @static\n   * @param {IUnixTime} m UnixTime message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  UnixTime.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    w.uint32(8).int64(m.Seconds);\n    if (m.FractionalNanoseconds != null && Object.hasOwnProperty.call(m, \"FractionalNanoseconds\")) w.uint32(21).fixed32(m.FractionalNanoseconds);\n    return w;\n  };\n  /**\n   * Decodes an UnixTime message from the specified reader or buffer.\n   * @function decode\n   * @memberof UnixTime\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {UnixTime} UnixTime\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  UnixTime.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.UnixTime();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          m.Seconds = r.int64();\n          break;\n\n        case 2:\n          m.FractionalNanoseconds = r.fixed32();\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    if (!m.hasOwnProperty(\"Seconds\")) throw $util.ProtocolError(\"missing required 'Seconds'\", {\n      instance: m\n    });\n    return m;\n  };\n  /**\n   * Creates an UnixTime message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof UnixTime\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {UnixTime} UnixTime\n   */\n\n\n  UnixTime.fromObject = function fromObject(d) {\n    if (d instanceof $root.UnixTime) return d;\n    var m = new $root.UnixTime();\n\n    if (d.Seconds != null) {\n      if ($util.Long) (m.Seconds = $util.Long.fromValue(d.Seconds)).unsigned = false;else if (typeof d.Seconds === \"string\") m.Seconds = parseInt(d.Seconds, 10);else if (typeof d.Seconds === \"number\") m.Seconds = d.Seconds;else if (typeof d.Seconds === \"object\") m.Seconds = new $util.LongBits(d.Seconds.low >>> 0, d.Seconds.high >>> 0).toNumber();\n    }\n\n    if (d.FractionalNanoseconds != null) {\n      m.FractionalNanoseconds = d.FractionalNanoseconds >>> 0;\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from an UnixTime message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof UnixTime\n   * @static\n   * @param {UnixTime} m UnixTime\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  UnixTime.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.defaults) {\n      if ($util.Long) {\n        var n = new $util.Long(0, 0, false);\n        d.Seconds = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n      } else d.Seconds = o.longs === String ? \"0\" : 0;\n\n      d.FractionalNanoseconds = 0;\n    }\n\n    if (m.Seconds != null && m.hasOwnProperty(\"Seconds\")) {\n      if (typeof m.Seconds === \"number\") d.Seconds = o.longs === String ? String(m.Seconds) : m.Seconds;else d.Seconds = o.longs === String ? $util.Long.prototype.toString.call(m.Seconds) : o.longs === Number ? new $util.LongBits(m.Seconds.low >>> 0, m.Seconds.high >>> 0).toNumber() : m.Seconds;\n    }\n\n    if (m.FractionalNanoseconds != null && m.hasOwnProperty(\"FractionalNanoseconds\")) {\n      d.FractionalNanoseconds = m.FractionalNanoseconds;\n    }\n\n    return d;\n  };\n  /**\n   * Converts this UnixTime to JSON.\n   * @function toJSON\n   * @memberof UnixTime\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  UnixTime.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return UnixTime;\n})();\nexport const Metadata = $root.Metadata = (() => {\n  /**\n   * Properties of a Metadata.\n   * @exports IMetadata\n   * @interface IMetadata\n   * @property {string|null} [MimeType] Metadata MimeType\n   */\n\n  /**\n   * Constructs a new Metadata.\n   * @exports Metadata\n   * @classdesc Represents a Metadata.\n   * @implements IMetadata\n   * @constructor\n   * @param {IMetadata=} [p] Properties to set\n   */\n  function Metadata(p) {\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n  /**\n   * Metadata MimeType.\n   * @member {string} MimeType\n   * @memberof Metadata\n   * @instance\n   */\n\n\n  Metadata.prototype.MimeType = \"\";\n  /**\n   * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.\n   * @function encode\n   * @memberof Metadata\n   * @static\n   * @param {IMetadata} m Metadata message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  Metadata.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.MimeType != null && Object.hasOwnProperty.call(m, \"MimeType\")) w.uint32(10).string(m.MimeType);\n    return w;\n  };\n  /**\n   * Decodes a Metadata message from the specified reader or buffer.\n   * @function decode\n   * @memberof Metadata\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {Metadata} Metadata\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Metadata.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.Metadata();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          m.MimeType = r.string();\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates a Metadata message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Metadata\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {Metadata} Metadata\n   */\n\n\n  Metadata.fromObject = function fromObject(d) {\n    if (d instanceof $root.Metadata) return d;\n    var m = new $root.Metadata();\n\n    if (d.MimeType != null) {\n      m.MimeType = String(d.MimeType);\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from a Metadata message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Metadata\n   * @static\n   * @param {Metadata} m Metadata\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  Metadata.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.defaults) {\n      d.MimeType = \"\";\n    }\n\n    if (m.MimeType != null && m.hasOwnProperty(\"MimeType\")) {\n      d.MimeType = m.MimeType;\n    }\n\n    return d;\n  };\n  /**\n   * Converts this Metadata to JSON.\n   * @function toJSON\n   * @memberof Metadata\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  Metadata.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return Metadata;\n})();\nexport { $root as default };","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-unixfs/src/unixfs.js"],"names":["$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Data","p","blocksizes","ks","Object","keys","i","length","prototype","Type","newBuffer","filesize","Long","fromBits","emptyArray","hashType","fanout","mode","mtime","encode","m","w","create","uint32","int32","hasOwnProperty","call","bytes","uint64","UnixTime","fork","ldelim","decode","r","l","c","undefined","len","pos","t","c2","push","skipType","ProtocolError","instance","fromObject","d","base64","fromValue","unsigned","parseInt","LongBits","low","high","toNumber","Array","isArray","TypeError","toObject","o","arrays","defaults","enums","String","n","longs","toString","Number","DataType","slice","j","toJSON","constructor","toJSONOptions","valuesById","values","Seconds","FractionalNanoseconds","int64","fixed32","Metadata","MimeType","string","default"],"mappings":"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","sourcesContent":["/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"ipfs-unixfs\"] || ($protobuf.roots[\"ipfs-unixfs\"] = {});\n\nexport const Data = $root.Data = (() => {\n\n    /**\n     * Properties of a Data.\n     * @exports IData\n     * @interface IData\n     * @property {Data.DataType} Type Data Type\n     * @property {Uint8Array|null} [Data] Data Data\n     * @property {number|null} [filesize] Data filesize\n     * @property {Array.<number>|null} [blocksizes] Data blocksizes\n     * @property {number|null} [hashType] Data hashType\n     * @property {number|null} [fanout] Data fanout\n     * @property {number|null} [mode] Data mode\n     * @property {IUnixTime|null} [mtime] Data mtime\n     */\n\n    /**\n     * Constructs a new Data.\n     * @exports Data\n     * @classdesc Represents a Data.\n     * @implements IData\n     * @constructor\n     * @param {IData=} [p] Properties to set\n     */\n    function Data(p) {\n        this.blocksizes = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Data Type.\n     * @member {Data.DataType} Type\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.Type = 0;\n\n    /**\n     * Data Data.\n     * @member {Uint8Array} Data\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.Data = $util.newBuffer([]);\n\n    /**\n     * Data filesize.\n     * @member {number} filesize\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.filesize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data blocksizes.\n     * @member {Array.<number>} blocksizes\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.blocksizes = $util.emptyArray;\n\n    /**\n     * Data hashType.\n     * @member {number} hashType\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.hashType = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data fanout.\n     * @member {number} fanout\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.fanout = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data mode.\n     * @member {number} mode\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.mode = 0;\n\n    /**\n     * Data mtime.\n     * @member {IUnixTime|null|undefined} mtime\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.mtime = null;\n\n    /**\n     * Encodes the specified Data message. Does not implicitly {@link Data.verify|verify} messages.\n     * @function encode\n     * @memberof Data\n     * @static\n     * @param {IData} m Data message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Data.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        w.uint32(8).int32(m.Type);\n        if (m.Data != null && Object.hasOwnProperty.call(m, \"Data\"))\n            w.uint32(18).bytes(m.Data);\n        if (m.filesize != null && Object.hasOwnProperty.call(m, \"filesize\"))\n            w.uint32(24).uint64(m.filesize);\n        if (m.blocksizes != null && m.blocksizes.length) {\n            for (var i = 0; i < m.blocksizes.length; ++i)\n                w.uint32(32).uint64(m.blocksizes[i]);\n        }\n        if (m.hashType != null && Object.hasOwnProperty.call(m, \"hashType\"))\n            w.uint32(40).uint64(m.hashType);\n        if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\"))\n            w.uint32(48).uint64(m.fanout);\n        if (m.mode != null && Object.hasOwnProperty.call(m, \"mode\"))\n            w.uint32(56).uint32(m.mode);\n        if (m.mtime != null && Object.hasOwnProperty.call(m, \"mtime\"))\n            $root.UnixTime.encode(m.mtime, w.uint32(66).fork()).ldelim();\n        return w;\n    };\n\n    /**\n     * Decodes a Data message from the specified reader or buffer.\n     * @function decode\n     * @memberof Data\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Data} Data\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Data.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Data();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Type = r.int32();\n                break;\n            case 2:\n                m.Data = r.bytes();\n                break;\n            case 3:\n                m.filesize = r.uint64();\n                break;\n            case 4:\n                if (!(m.blocksizes && m.blocksizes.length))\n                    m.blocksizes = [];\n                if ((t & 7) === 2) {\n                    var c2 = r.uint32() + r.pos;\n                    while (r.pos < c2)\n                        m.blocksizes.push(r.uint64());\n                } else\n                    m.blocksizes.push(r.uint64());\n                break;\n            case 5:\n                m.hashType = r.uint64();\n                break;\n            case 6:\n                m.fanout = r.uint64();\n                break;\n            case 7:\n                m.mode = r.uint32();\n                break;\n            case 8:\n                m.mtime = $root.UnixTime.decode(r, r.uint32());\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        if (!m.hasOwnProperty(\"Type\"))\n            throw $util.ProtocolError(\"missing required 'Type'\", { instance: m });\n        return m;\n    };\n\n    /**\n     * Creates a Data message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Data\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Data} Data\n     */\n    Data.fromObject = function fromObject(d) {\n        if (d instanceof $root.Data)\n            return d;\n        var m = new $root.Data();\n        switch (d.Type) {\n        case \"Raw\":\n        case 0:\n            m.Type = 0;\n            break;\n        case \"Directory\":\n        case 1:\n            m.Type = 1;\n            break;\n        case \"File\":\n        case 2:\n            m.Type = 2;\n            break;\n        case \"Metadata\":\n        case 3:\n            m.Type = 3;\n            break;\n        case \"Symlink\":\n        case 4:\n            m.Type = 4;\n            break;\n        case \"HAMTShard\":\n        case 5:\n            m.Type = 5;\n            break;\n        }\n        if (d.Data != null) {\n            if (typeof d.Data === \"string\")\n                $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);\n            else if (d.Data.length)\n                m.Data = d.Data;\n        }\n        if (d.filesize != null) {\n            if ($util.Long)\n                (m.filesize = $util.Long.fromValue(d.filesize)).unsigned = true;\n            else if (typeof d.filesize === \"string\")\n                m.filesize = parseInt(d.filesize, 10);\n            else if (typeof d.filesize === \"number\")\n                m.filesize = d.filesize;\n            else if (typeof d.filesize === \"object\")\n                m.filesize = new $util.LongBits(d.filesize.low >>> 0, d.filesize.high >>> 0).toNumber(true);\n        }\n        if (d.blocksizes) {\n            if (!Array.isArray(d.blocksizes))\n                throw TypeError(\".Data.blocksizes: array expected\");\n            m.blocksizes = [];\n            for (var i = 0; i < d.blocksizes.length; ++i) {\n                if ($util.Long)\n                    (m.blocksizes[i] = $util.Long.fromValue(d.blocksizes[i])).unsigned = true;\n                else if (typeof d.blocksizes[i] === \"string\")\n                    m.blocksizes[i] = parseInt(d.blocksizes[i], 10);\n                else if (typeof d.blocksizes[i] === \"number\")\n                    m.blocksizes[i] = d.blocksizes[i];\n                else if (typeof d.blocksizes[i] === \"object\")\n                    m.blocksizes[i] = new $util.LongBits(d.blocksizes[i].low >>> 0, d.blocksizes[i].high >>> 0).toNumber(true);\n            }\n        }\n        if (d.hashType != null) {\n            if ($util.Long)\n                (m.hashType = $util.Long.fromValue(d.hashType)).unsigned = true;\n            else if (typeof d.hashType === \"string\")\n                m.hashType = parseInt(d.hashType, 10);\n            else if (typeof d.hashType === \"number\")\n                m.hashType = d.hashType;\n            else if (typeof d.hashType === \"object\")\n                m.hashType = new $util.LongBits(d.hashType.low >>> 0, d.hashType.high >>> 0).toNumber(true);\n        }\n        if (d.fanout != null) {\n            if ($util.Long)\n                (m.fanout = $util.Long.fromValue(d.fanout)).unsigned = true;\n            else if (typeof d.fanout === \"string\")\n                m.fanout = parseInt(d.fanout, 10);\n            else if (typeof d.fanout === \"number\")\n                m.fanout = d.fanout;\n            else if (typeof d.fanout === \"object\")\n                m.fanout = new $util.LongBits(d.fanout.low >>> 0, d.fanout.high >>> 0).toNumber(true);\n        }\n        if (d.mode != null) {\n            m.mode = d.mode >>> 0;\n        }\n        if (d.mtime != null) {\n            if (typeof d.mtime !== \"object\")\n                throw TypeError(\".Data.mtime: object expected\");\n            m.mtime = $root.UnixTime.fromObject(d.mtime);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Data message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Data\n     * @static\n     * @param {Data} m Data\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Data.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.blocksizes = [];\n        }\n        if (o.defaults) {\n            d.Type = o.enums === String ? \"Raw\" : 0;\n            if (o.bytes === String)\n                d.Data = \"\";\n            else {\n                d.Data = [];\n                if (o.bytes !== Array)\n                    d.Data = $util.newBuffer(d.Data);\n            }\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.filesize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.filesize = o.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.hashType = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.hashType = o.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.fanout = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.fanout = o.longs === String ? \"0\" : 0;\n            d.mode = 0;\n            d.mtime = null;\n        }\n        if (m.Type != null && m.hasOwnProperty(\"Type\")) {\n            d.Type = o.enums === String ? $root.Data.DataType[m.Type] : m.Type;\n        }\n        if (m.Data != null && m.hasOwnProperty(\"Data\")) {\n            d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;\n        }\n        if (m.filesize != null && m.hasOwnProperty(\"filesize\")) {\n            if (typeof m.filesize === \"number\")\n                d.filesize = o.longs === String ? String(m.filesize) : m.filesize;\n            else\n                d.filesize = o.longs === String ? $util.Long.prototype.toString.call(m.filesize) : o.longs === Number ? new $util.LongBits(m.filesize.low >>> 0, m.filesize.high >>> 0).toNumber(true) : m.filesize;\n        }\n        if (m.blocksizes && m.blocksizes.length) {\n            d.blocksizes = [];\n            for (var j = 0; j < m.blocksizes.length; ++j) {\n                if (typeof m.blocksizes[j] === \"number\")\n                    d.blocksizes[j] = o.longs === String ? String(m.blocksizes[j]) : m.blocksizes[j];\n                else\n                    d.blocksizes[j] = o.longs === String ? $util.Long.prototype.toString.call(m.blocksizes[j]) : o.longs === Number ? new $util.LongBits(m.blocksizes[j].low >>> 0, m.blocksizes[j].high >>> 0).toNumber(true) : m.blocksizes[j];\n            }\n        }\n        if (m.hashType != null && m.hasOwnProperty(\"hashType\")) {\n            if (typeof m.hashType === \"number\")\n                d.hashType = o.longs === String ? String(m.hashType) : m.hashType;\n            else\n                d.hashType = o.longs === String ? $util.Long.prototype.toString.call(m.hashType) : o.longs === Number ? new $util.LongBits(m.hashType.low >>> 0, m.hashType.high >>> 0).toNumber(true) : m.hashType;\n        }\n        if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n            if (typeof m.fanout === \"number\")\n                d.fanout = o.longs === String ? String(m.fanout) : m.fanout;\n            else\n                d.fanout = o.longs === String ? $util.Long.prototype.toString.call(m.fanout) : o.longs === Number ? new $util.LongBits(m.fanout.low >>> 0, m.fanout.high >>> 0).toNumber(true) : m.fanout;\n        }\n        if (m.mode != null && m.hasOwnProperty(\"mode\")) {\n            d.mode = m.mode;\n        }\n        if (m.mtime != null && m.hasOwnProperty(\"mtime\")) {\n            d.mtime = $root.UnixTime.toObject(m.mtime, o);\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Data to JSON.\n     * @function toJSON\n     * @memberof Data\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Data.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * DataType enum.\n     * @name Data.DataType\n     * @enum {number}\n     * @property {number} Raw=0 Raw value\n     * @property {number} Directory=1 Directory value\n     * @property {number} File=2 File value\n     * @property {number} Metadata=3 Metadata value\n     * @property {number} Symlink=4 Symlink value\n     * @property {number} HAMTShard=5 HAMTShard value\n     */\n    Data.DataType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Raw\"] = 0;\n        values[valuesById[1] = \"Directory\"] = 1;\n        values[valuesById[2] = \"File\"] = 2;\n        values[valuesById[3] = \"Metadata\"] = 3;\n        values[valuesById[4] = \"Symlink\"] = 4;\n        values[valuesById[5] = \"HAMTShard\"] = 5;\n        return values;\n    })();\n\n    return Data;\n})();\n\nexport const UnixTime = $root.UnixTime = (() => {\n\n    /**\n     * Properties of an UnixTime.\n     * @exports IUnixTime\n     * @interface IUnixTime\n     * @property {number} Seconds UnixTime Seconds\n     * @property {number|null} [FractionalNanoseconds] UnixTime FractionalNanoseconds\n     */\n\n    /**\n     * Constructs a new UnixTime.\n     * @exports UnixTime\n     * @classdesc Represents an UnixTime.\n     * @implements IUnixTime\n     * @constructor\n     * @param {IUnixTime=} [p] Properties to set\n     */\n    function UnixTime(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * UnixTime Seconds.\n     * @member {number} Seconds\n     * @memberof UnixTime\n     * @instance\n     */\n    UnixTime.prototype.Seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * UnixTime FractionalNanoseconds.\n     * @member {number} FractionalNanoseconds\n     * @memberof UnixTime\n     * @instance\n     */\n    UnixTime.prototype.FractionalNanoseconds = 0;\n\n    /**\n     * Encodes the specified UnixTime message. Does not implicitly {@link UnixTime.verify|verify} messages.\n     * @function encode\n     * @memberof UnixTime\n     * @static\n     * @param {IUnixTime} m UnixTime message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UnixTime.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        w.uint32(8).int64(m.Seconds);\n        if (m.FractionalNanoseconds != null && Object.hasOwnProperty.call(m, \"FractionalNanoseconds\"))\n            w.uint32(21).fixed32(m.FractionalNanoseconds);\n        return w;\n    };\n\n    /**\n     * Decodes an UnixTime message from the specified reader or buffer.\n     * @function decode\n     * @memberof UnixTime\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {UnixTime} UnixTime\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UnixTime.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.UnixTime();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Seconds = r.int64();\n                break;\n            case 2:\n                m.FractionalNanoseconds = r.fixed32();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        if (!m.hasOwnProperty(\"Seconds\"))\n            throw $util.ProtocolError(\"missing required 'Seconds'\", { instance: m });\n        return m;\n    };\n\n    /**\n     * Creates an UnixTime message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UnixTime\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {UnixTime} UnixTime\n     */\n    UnixTime.fromObject = function fromObject(d) {\n        if (d instanceof $root.UnixTime)\n            return d;\n        var m = new $root.UnixTime();\n        if (d.Seconds != null) {\n            if ($util.Long)\n                (m.Seconds = $util.Long.fromValue(d.Seconds)).unsigned = false;\n            else if (typeof d.Seconds === \"string\")\n                m.Seconds = parseInt(d.Seconds, 10);\n            else if (typeof d.Seconds === \"number\")\n                m.Seconds = d.Seconds;\n            else if (typeof d.Seconds === \"object\")\n                m.Seconds = new $util.LongBits(d.Seconds.low >>> 0, d.Seconds.high >>> 0).toNumber();\n        }\n        if (d.FractionalNanoseconds != null) {\n            m.FractionalNanoseconds = d.FractionalNanoseconds >>> 0;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an UnixTime message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UnixTime\n     * @static\n     * @param {UnixTime} m UnixTime\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UnixTime.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, false);\n                d.Seconds = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.Seconds = o.longs === String ? \"0\" : 0;\n            d.FractionalNanoseconds = 0;\n        }\n        if (m.Seconds != null && m.hasOwnProperty(\"Seconds\")) {\n            if (typeof m.Seconds === \"number\")\n                d.Seconds = o.longs === String ? String(m.Seconds) : m.Seconds;\n            else\n                d.Seconds = o.longs === String ? $util.Long.prototype.toString.call(m.Seconds) : o.longs === Number ? new $util.LongBits(m.Seconds.low >>> 0, m.Seconds.high >>> 0).toNumber() : m.Seconds;\n        }\n        if (m.FractionalNanoseconds != null && m.hasOwnProperty(\"FractionalNanoseconds\")) {\n            d.FractionalNanoseconds = m.FractionalNanoseconds;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this UnixTime to JSON.\n     * @function toJSON\n     * @memberof UnixTime\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UnixTime.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UnixTime;\n})();\n\nexport const Metadata = $root.Metadata = (() => {\n\n    /**\n     * Properties of a Metadata.\n     * @exports IMetadata\n     * @interface IMetadata\n     * @property {string|null} [MimeType] Metadata MimeType\n     */\n\n    /**\n     * Constructs a new Metadata.\n     * @exports Metadata\n     * @classdesc Represents a Metadata.\n     * @implements IMetadata\n     * @constructor\n     * @param {IMetadata=} [p] Properties to set\n     */\n    function Metadata(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Metadata MimeType.\n     * @member {string} MimeType\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.MimeType = \"\";\n\n    /**\n     * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.\n     * @function encode\n     * @memberof Metadata\n     * @static\n     * @param {IMetadata} m Metadata message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Metadata.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.MimeType != null && Object.hasOwnProperty.call(m, \"MimeType\"))\n            w.uint32(10).string(m.MimeType);\n        return w;\n    };\n\n    /**\n     * Decodes a Metadata message from the specified reader or buffer.\n     * @function decode\n     * @memberof Metadata\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Metadata} Metadata\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Metadata.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Metadata();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.MimeType = r.string();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Metadata message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Metadata\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Metadata} Metadata\n     */\n    Metadata.fromObject = function fromObject(d) {\n        if (d instanceof $root.Metadata)\n            return d;\n        var m = new $root.Metadata();\n        if (d.MimeType != null) {\n            m.MimeType = String(d.MimeType);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Metadata message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Metadata\n     * @static\n     * @param {Metadata} m Metadata\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Metadata.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            d.MimeType = \"\";\n        }\n        if (m.MimeType != null && m.hasOwnProperty(\"MimeType\")) {\n            d.MimeType = m.MimeType;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Metadata to JSON.\n     * @function toJSON\n     * @memberof Metadata\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Metadata.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Metadata;\n})();\n\nexport { $root as default };\n"]},"metadata":{},"sourceType":"module"}