{"ast":null,"code":"/**\n * To guarantee Uint8Array semantics, convert nodejs Buffers\n * into vanilla Uint8Arrays\n */\nexport function asUint8Array(buf) {\n  if (globalThis.Buffer != null) {\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  return buf;\n}","map":{"version":3,"mappings":"AACA;;;;AAIA,OAAM,SAAUA,YAAV,CAAwBC,GAAxB,EAAuC;AAC3C,MAAIC,UAAU,CAACC,MAAX,IAAqB,IAAzB,EAA+B;AAC7B,WAAO,IAAIC,UAAJ,CAAeH,GAAG,CAACI,MAAnB,EAA2BJ,GAAG,CAACK,UAA/B,EAA2CL,GAAG,CAACM,UAA/C,CAAP;AACD;;AAED,SAAON,GAAP;AACD","names":["asUint8Array","buf","globalThis","Buffer","Uint8Array","buffer","byteOffset","byteLength"],"sources":["/home/legasi/nft-marketplace/node_modules/uint8arrays/src/util/as-uint8array.ts"],"sourcesContent":["\n/**\n * To guarantee Uint8Array semantics, convert nodejs Buffers\n * into vanilla Uint8Arrays\n */\nexport function asUint8Array (buf: Uint8Array): Uint8Array {\n  if (globalThis.Buffer != null) {\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength)\n  }\n\n  return buf\n}\n"]},"metadata":{},"sourceType":"module"}