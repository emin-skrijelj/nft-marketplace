{"ast":null,"code":"import { objectToCamel } from '../lib/object-to-camel.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createGen = configure(api => {\n  /**\n   * @type {KeyAPI[\"gen\"]}\n   */\n  async function gen(name, options) {\n    const opts = options ?? {\n      type: 'Ed25519'\n    };\n    const res = await api.post('key/gen', {\n      signal: opts.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...opts\n      }),\n      headers: opts.headers\n    });\n    const data = await res.json(); // @ts-expect-error server output is not typed\n\n    return objectToCamel(data);\n  }\n\n  return gen;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/key/gen.js"],"names":["objectToCamel","configure","toUrlSearchParams","createGen","api","gen","name","options","opts","type","res","post","signal","searchParams","arg","headers","data","json"],"mappings":"AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAGF,SAAS,CAACG,GAAG,IAAI;AACxC;AACF;AACA;AACE,iBAAeC,GAAf,CAAoBC,IAApB,EAA0BC,OAA1B,EAAmC;AACjC,UAAMC,IAAI,GAAGD,OAAO,IAAI;AAAEE,MAAAA,IAAI,EAAE;AAAR,KAAxB;AAEA,UAAMC,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAJ,CAAS,SAAT,EAAoB;AACpCC,MAAAA,MAAM,EAAEJ,IAAI,CAACI,MADuB;AAEpCC,MAAAA,YAAY,EAAEX,iBAAiB,CAAC;AAC9BY,QAAAA,GAAG,EAAER,IADyB;AAE9B,WAAGE;AAF2B,OAAD,CAFK;AAMpCO,MAAAA,OAAO,EAAEP,IAAI,CAACO;AANsB,KAApB,CAAlB;AAQA,UAAMC,IAAI,GAAG,MAAMN,GAAG,CAACO,IAAJ,EAAnB,CAXiC,CAajC;;AACA,WAAOjB,aAAa,CAACgB,IAAD,CAApB;AACD;;AACD,SAAOX,GAAP;AACD,CArBiC,CAA3B","sourcesContent":["import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createGen = configure(api => {\n  /**\n   * @type {KeyAPI[\"gen\"]}\n   */\n  async function gen (name, options) {\n    const opts = options ?? { type: 'Ed25519' }\n\n    const res = await api.post('key/gen', {\n      signal: opts.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...opts\n      }),\n      headers: opts.headers\n    })\n    const data = await res.json()\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(data)\n  }\n  return gen\n})\n"]},"metadata":{},"sourceType":"module"}