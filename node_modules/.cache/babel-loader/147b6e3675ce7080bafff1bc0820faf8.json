{"ast":null,"code":"export const symbol = Symbol.for('@libp2p/peer-id');\nexport function isPeerId(other) {\n  return other != null && Boolean(other[symbol]);\n}","map":{"version":3,"mappings":"AAkCA,OAAO,MAAMA,MAAM,GAAGC,MAAM,CAACC,GAAP,CAAW,iBAAX,CAAf;AAEP,OAAM,SAAUC,QAAV,CAAoBC,KAApB,EAA8B;AAClC,SAAOA,KAAK,IAAI,IAAT,IAAiBC,OAAO,CAACD,KAAK,CAACJ,MAAD,CAAN,CAA/B;AACD","names":["symbol","Symbol","for","isPeerId","other","Boolean"],"sources":["/home/legasi/nft-marketplace/node_modules/@libp2p/interface-peer-id/src/index.ts"],"sourcesContent":["import type { CID } from 'multiformats/cid'\nimport type { MultihashDigest } from 'multiformats/hashes/interface'\n\nexport type PeerIdType = 'RSA' | 'Ed25519' | 'secp256k1'\n\ninterface BasePeerId {\n  readonly type: PeerIdType\n  readonly multihash: MultihashDigest\n  readonly privateKey?: Uint8Array\n  readonly publicKey?: Uint8Array\n\n  toString: () => string\n  toCID: () => CID\n  toBytes: () => Uint8Array\n  equals: (other: PeerId | Uint8Array | string) => boolean\n}\n\nexport interface RSAPeerId extends BasePeerId {\n  readonly type: 'RSA'\n  readonly publicKey?: Uint8Array\n}\n\nexport interface Ed25519PeerId extends BasePeerId {\n  readonly type: 'Ed25519'\n  readonly publicKey: Uint8Array\n}\n\nexport interface Secp256k1PeerId extends BasePeerId {\n  readonly type: 'secp256k1'\n  readonly publicKey: Uint8Array\n}\n\nexport type PeerId = RSAPeerId | Ed25519PeerId | Secp256k1PeerId\n\nexport const symbol = Symbol.for('@libp2p/peer-id')\n\nexport function isPeerId (other: any): other is PeerId {\n  return other != null && Boolean(other[symbol])\n}\n"]},"metadata":{},"sourceType":"module"}