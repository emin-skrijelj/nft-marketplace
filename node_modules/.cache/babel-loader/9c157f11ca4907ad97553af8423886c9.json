{"ast":null,"code":"import { IpNet } from \"./ipnet.js\";\nexport { ipToString } from \"./util.js\";\nexport { maskIp, iPv4FromIPv6, isIPv4mappedIPv6 } from \"./ip.js\";\nexport { IpNet } from \"./ipnet.js\";\nexport { parseCidr } from \"./cidr.js\";\n/**\n * Checks if cidr block contains ip address\n * @param cidr ipv4 or ipv6 formatted cidr . Example 198.51.100.14/24 or 2001:db8::/48\n * @param ip ipv4 or ipv6 address Example 198.51.100.14 or 2001:db8::\n *\n */\n\nexport function cidrContains(cidr, ip) {\n  const ipnet = new IpNet(cidr);\n  return ipnet.contains(ip);\n}","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,QAAsB,YAAtB;AAEA,SAASC,UAAT,QAA2B,WAA3B;AACA,SAASC,MAAT,EAAiBC,YAAjB,EAA+BC,gBAA/B,QAAuD,SAAvD;AACA,SAASJ,KAAT,QAAsB,YAAtB;AACA,SAASK,SAAT,QAA0B,WAA1B;AAEA;;;;;;;AAMA,OAAM,SAAUC,YAAV,CAAuBC,IAAvB,EAAqCC,EAArC,EAA+C;AACnD,QAAMC,KAAK,GAAG,IAAIT,KAAJ,CAAUO,IAAV,CAAd;AACA,SAAOE,KAAK,CAACC,QAAN,CAAeF,EAAf,CAAP;AACD","names":["IpNet","ipToString","maskIp","iPv4FromIPv6","isIPv4mappedIPv6","parseCidr","cidrContains","cidr","ip","ipnet","contains"],"sources":["/home/legasi/nft-marketplace/node_modules/@chainsafe/netmask/src/index.ts"],"sourcesContent":["import { IpNet } from \"./ipnet.js\";\n\nexport { ipToString } from \"./util.js\";\nexport { maskIp, iPv4FromIPv6, isIPv4mappedIPv6 } from \"./ip.js\";\nexport { IpNet } from \"./ipnet.js\";\nexport { parseCidr } from \"./cidr.js\";\n\n/**\n * Checks if cidr block contains ip address\n * @param cidr ipv4 or ipv6 formatted cidr . Example 198.51.100.14/24 or 2001:db8::/48\n * @param ip ipv4 or ipv6 address Example 198.51.100.14 or 2001:db8::\n *\n */\nexport function cidrContains(cidr: string, ip: string): boolean {\n  const ipnet = new IpNet(cidr);\n  return ipnet.contains(ip);\n}\n"]},"metadata":{},"sourceType":"module"}