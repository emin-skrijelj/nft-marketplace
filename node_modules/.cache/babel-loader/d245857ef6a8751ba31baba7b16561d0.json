{"ast":null,"code":"import { coerce, equals as equalBytes } from '../bytes.js';\nimport * as varint from '../varint.js';\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\n\nexport const create = (code, digest) => {\n  const size = digest.byteLength;\n  const sizeOffset = varint.encodingLength(code);\n  const digestOffset = sizeOffset + varint.encodingLength(size);\n  const bytes = new Uint8Array(digestOffset + size);\n  varint.encodeTo(code, bytes, 0);\n  varint.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\n\nexport const decode = multihash => {\n  const bytes = coerce(multihash);\n  const [code, sizeOffset] = varint.decode(bytes);\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n  const digest = bytes.subarray(sizeOffset + digestOffset);\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n\n  return new Digest(code, size, digest, bytes);\n};\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\n\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    const data =\n    /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */\n    b;\n    return a.code === data.code && a.size === data.size && data.bytes instanceof Uint8Array && equalBytes(a.bytes, data.bytes);\n  }\n};\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\n\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor(code, size, digest, bytes) {\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  }\n\n}","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/@ipld/dag-json/node_modules/multiformats/src/hashes/digest.js"],"names":["coerce","equals","equalBytes","varint","create","code","digest","size","byteLength","sizeOffset","encodingLength","digestOffset","bytes","Uint8Array","encodeTo","set","Digest","decode","multihash","subarray","Error","a","b","data","constructor"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,MAAM,IAAIC,UAA3B,QAA6C,aAA7C;AACA,OAAO,KAAKC,MAAZ,MAAwB,cAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,MAAM,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACtC,QAAMC,IAAI,GAAGD,MAAM,CAACE,UAApB;AACA,QAAMC,UAAU,GAAGN,MAAM,CAACO,cAAP,CAAsBL,IAAtB,CAAnB;AACA,QAAMM,YAAY,GAAGF,UAAU,GAAGN,MAAM,CAACO,cAAP,CAAsBH,IAAtB,CAAlC;AAEA,QAAMK,KAAK,GAAG,IAAIC,UAAJ,CAAeF,YAAY,GAAGJ,IAA9B,CAAd;AACAJ,EAAAA,MAAM,CAACW,QAAP,CAAgBT,IAAhB,EAAsBO,KAAtB,EAA6B,CAA7B;AACAT,EAAAA,MAAM,CAACW,QAAP,CAAgBP,IAAhB,EAAsBK,KAAtB,EAA6BH,UAA7B;AACAG,EAAAA,KAAK,CAACG,GAAN,CAAUT,MAAV,EAAkBK,YAAlB;AAEA,SAAO,IAAIK,MAAJ,CAAWX,IAAX,EAAiBE,IAAjB,EAAuBD,MAAvB,EAA+BM,KAA/B,CAAP;AACD,CAXM;AAaP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMK,MAAM,GAAIC,SAAD,IAAe;AACnC,QAAMN,KAAK,GAAGZ,MAAM,CAACkB,SAAD,CAApB;AACA,QAAM,CAACb,IAAD,EAAOI,UAAP,IAAqBN,MAAM,CAACc,MAAP,CAAcL,KAAd,CAA3B;AACA,QAAM,CAACL,IAAD,EAAOI,YAAP,IAAuBR,MAAM,CAACc,MAAP,CAAcL,KAAK,CAACO,QAAN,CAAeV,UAAf,CAAd,CAA7B;AACA,QAAMH,MAAM,GAAGM,KAAK,CAACO,QAAN,CAAeV,UAAU,GAAGE,YAA5B,CAAf;;AAEA,MAAIL,MAAM,CAACE,UAAP,KAAsBD,IAA1B,EAAgC;AAC9B,UAAM,IAAIa,KAAJ,CAAU,kBAAV,CAAN;AACD;;AAED,SAAO,IAAIJ,MAAJ,CAAWX,IAAX,EAAiBE,IAAjB,EAAuBD,MAAvB,EAA+BM,KAA/B,CAAP;AACD,CAXM;AAaP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMX,MAAM,GAAG,CAACoB,CAAD,EAAIC,CAAJ,KAAU;AAC9B,MAAID,CAAC,KAAKC,CAAV,EAAa;AACX,WAAO,IAAP;AACD,GAFD,MAEO;AACL,UAAMC,IAAI;AAAG;AAA8DD,IAAAA,CAA3E;AAEA,WACED,CAAC,CAAChB,IAAF,KAAWkB,IAAI,CAAClB,IAAhB,IACAgB,CAAC,CAACd,IAAF,KAAWgB,IAAI,CAAChB,IADhB,IAEAgB,IAAI,CAACX,KAAL,YAAsBC,UAFtB,IAGAX,UAAU,CAACmB,CAAC,CAACT,KAAH,EAAUW,IAAI,CAACX,KAAf,CAJZ;AAMD;AACF,CAbM;AAeP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,MAAN,CAAa;AAClB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEQ,EAAAA,WAAW,CAAEnB,IAAF,EAAQE,IAAR,EAAcD,MAAd,EAAsBM,KAAtB,EAA6B;AACtC,SAAKP,IAAL,GAAYA,IAAZ;AACA,SAAKE,IAAL,GAAYA,IAAZ;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKM,KAAL,GAAaA,KAAb;AACD;;AAdiB","sourcesContent":["import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n"]},"metadata":{},"sourceType":"module"}