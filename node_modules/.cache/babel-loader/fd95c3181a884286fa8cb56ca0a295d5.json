{"ast":null,"code":"import { modeToString } from './mode-to-string.js';\nimport { parseMtime } from '../lib/parse-mtime.js';\n/**\n * @param {*} params\n * @returns {URLSearchParams}\n */\n\nexport function toUrlSearchParams() {\n  let {\n    arg,\n    searchParams,\n    hashAlg,\n    mtime,\n    mode,\n    ...options\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (searchParams) {\n    options = { ...options,\n      ...searchParams\n    };\n  }\n\n  if (hashAlg) {\n    options.hash = hashAlg;\n  }\n\n  if (mtime != null) {\n    mtime = parseMtime(mtime);\n    options.mtime = mtime.secs;\n    options.mtimeNsecs = mtime.nsecs;\n  }\n\n  if (mode != null) {\n    options.mode = modeToString(mode);\n  }\n\n  if (options.timeout && !isNaN(options.timeout)) {\n    // server API expects timeouts as strings\n    options.timeout = `${options.timeout}ms`;\n  }\n\n  if (arg === undefined || arg === null) {\n    arg = [];\n  } else if (!Array.isArray(arg)) {\n    arg = [arg];\n  }\n\n  const urlSearchParams = new URLSearchParams(options);\n  arg.forEach((\n  /** @type {any} */\n  arg) => urlSearchParams.append('arg', arg));\n  return urlSearchParams;\n}","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/lib/to-url-search-params.js"],"names":["modeToString","parseMtime","toUrlSearchParams","arg","searchParams","hashAlg","mtime","mode","options","hash","secs","mtimeNsecs","nsecs","timeout","isNaN","undefined","Array","isArray","urlSearchParams","URLSearchParams","forEach","append"],"mappings":"AAAA,SAASA,YAAT,QAA6B,qBAA7B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,GAA0F;AAAA,MAA9D;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,YAAP;AAAqBC,IAAAA,OAArB;AAA8BC,IAAAA,KAA9B;AAAqCC,IAAAA,IAArC;AAA2C,OAAGC;AAA9C,GAA8D,uEAAJ,EAAI;;AAC/F,MAAIJ,YAAJ,EAAkB;AAChBI,IAAAA,OAAO,GAAG,EACR,GAAGA,OADK;AAER,SAAGJ;AAFK,KAAV;AAID;;AAED,MAAIC,OAAJ,EAAa;AACXG,IAAAA,OAAO,CAACC,IAAR,GAAeJ,OAAf;AACD;;AAED,MAAIC,KAAK,IAAI,IAAb,EAAmB;AACjBA,IAAAA,KAAK,GAAGL,UAAU,CAACK,KAAD,CAAlB;AAEAE,IAAAA,OAAO,CAACF,KAAR,GAAgBA,KAAK,CAACI,IAAtB;AACAF,IAAAA,OAAO,CAACG,UAAR,GAAqBL,KAAK,CAACM,KAA3B;AACD;;AAED,MAAIL,IAAI,IAAI,IAAZ,EAAkB;AAChBC,IAAAA,OAAO,CAACD,IAAR,GAAeP,YAAY,CAACO,IAAD,CAA3B;AACD;;AAED,MAAIC,OAAO,CAACK,OAAR,IAAmB,CAACC,KAAK,CAACN,OAAO,CAACK,OAAT,CAA7B,EAAgD;AAC9C;AACAL,IAAAA,OAAO,CAACK,OAAR,GAAmB,GAAEL,OAAO,CAACK,OAAQ,IAArC;AACD;;AAED,MAAIV,GAAG,KAAKY,SAAR,IAAqBZ,GAAG,KAAK,IAAjC,EAAuC;AACrCA,IAAAA,GAAG,GAAG,EAAN;AACD,GAFD,MAEO,IAAI,CAACa,KAAK,CAACC,OAAN,CAAcd,GAAd,CAAL,EAAyB;AAC9BA,IAAAA,GAAG,GAAG,CAACA,GAAD,CAAN;AACD;;AAED,QAAMe,eAAe,GAAG,IAAIC,eAAJ,CAAoBX,OAApB,CAAxB;AAEAL,EAAAA,GAAG,CAACiB,OAAJ,CAAY;AAAC;AAAmBjB,EAAAA,GAApB,KAA4Be,eAAe,CAACG,MAAhB,CAAuB,KAAvB,EAA8BlB,GAA9B,CAAxC;AAEA,SAAOe,eAAP;AACD","sourcesContent":["import { modeToString } from './mode-to-string.js'\nimport { parseMtime } from '../lib/parse-mtime.js'\n\n/**\n * @param {*} params\n * @returns {URLSearchParams}\n */\nexport function toUrlSearchParams ({ arg, searchParams, hashAlg, mtime, mode, ...options } = {}) {\n  if (searchParams) {\n    options = {\n      ...options,\n      ...searchParams\n    }\n  }\n\n  if (hashAlg) {\n    options.hash = hashAlg\n  }\n\n  if (mtime != null) {\n    mtime = parseMtime(mtime)\n\n    options.mtime = mtime.secs\n    options.mtimeNsecs = mtime.nsecs\n  }\n\n  if (mode != null) {\n    options.mode = modeToString(mode)\n  }\n\n  if (options.timeout && !isNaN(options.timeout)) {\n    // server API expects timeouts as strings\n    options.timeout = `${options.timeout}ms`\n  }\n\n  if (arg === undefined || arg === null) {\n    arg = []\n  } else if (!Array.isArray(arg)) {\n    arg = [arg]\n  }\n\n  const urlSearchParams = new URLSearchParams(options)\n\n  arg.forEach((/** @type {any} */ arg) => urlSearchParams.append('arg', arg))\n\n  return urlSearchParams\n}\n"]},"metadata":{},"sourceType":"module"}