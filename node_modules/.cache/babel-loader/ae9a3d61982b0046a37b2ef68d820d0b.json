{"ast":null,"code":"import { objectToCamel } from './lib/object-to-camel.js';\nimport { configure } from './lib/configure.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createVersion = configure(api => {\n  /**\n   * @type {RootAPI[\"version\"]}\n   */\n  async function version() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await api.post('version', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    }); // @ts-expect-error server output is not typed\n\n    return { ...objectToCamel(await res.json()),\n      'ipfs-http-client': '1.0.0'\n    };\n  }\n\n  return version;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/version.js"],"names":["objectToCamel","configure","toUrlSearchParams","createVersion","api","version","options","res","post","signal","searchParams","headers","json"],"mappings":"AAAA,SAASA,aAAT,QAA8B,0BAA9B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAGF,SAAS,CAACG,GAAG,IAAI;AAC5C;AACF;AACA;AACE,iBAAeC,OAAf,GAAsC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACpC,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,SAAT,EAAoB;AACpCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADoB;AAEpCC,MAAAA,YAAY,EAAER,iBAAiB,CAACI,OAAD,CAFK;AAGpCK,MAAAA,OAAO,EAAEL,OAAO,CAACK;AAHmB,KAApB,CAAlB,CADoC,CAOpC;;AACA,WAAO,EACL,GAAGX,aAAa,CAAC,MAAMO,GAAG,CAACK,IAAJ,EAAP,CADX;AAEL,0BAAoB;AAFf,KAAP;AAID;;AAED,SAAOP,OAAP;AACD,CAnBqC,CAA/B","sourcesContent":["import { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createVersion = configure(api => {\n  /**\n   * @type {RootAPI[\"version\"]}\n   */\n  async function version (options = {}) {\n    const res = await api.post('version', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return {\n      ...objectToCamel(await res.json()),\n      'ipfs-http-client': '1.0.0'\n    }\n  }\n\n  return version\n})\n"]},"metadata":{},"sourceType":"module"}