{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/log').API<HTTPClientExtraOptions>} LogAPI\n */\n\nexport const createLs = configure(api => {\n  /**\n   * @type {LogAPI[\"ls\"]}\n   */\n  async function ls() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await api.post('log/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return data.Strings;\n  }\n\n  return ls;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/log/ls.js"],"names":["configure","toUrlSearchParams","createLs","api","ls","options","res","post","signal","searchParams","headers","data","json","Strings"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAACG,GAAG,IAAI;AACvC;AACF;AACA;AACE,iBAAeC,EAAf,GAAiC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC/B,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,QAAT,EAAmB;AACnCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADmB;AAEnCC,MAAAA,YAAY,EAAER,iBAAiB,CAACI,OAAD,CAFI;AAGnCK,MAAAA,OAAO,EAAEL,OAAO,CAACK;AAHkB,KAAnB,CAAlB;AAMA,UAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAJ,EAAnB;AACA,WAAOD,IAAI,CAACE,OAAZ;AACD;;AACD,SAAOT,EAAP;AACD,CAfgC,CAA1B","sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/log').API<HTTPClientExtraOptions>} LogAPI\n */\n\nexport const createLs = configure(api => {\n  /**\n   * @type {LogAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    const res = await api.post('log/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n    return data.Strings\n  }\n  return ls\n})\n"]},"metadata":{},"sourceType":"module"}