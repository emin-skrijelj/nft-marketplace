{"ast":null,"code":"// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE\n'use strict';\n\nvar Fetch = require(\"bs-fetch/lib/js/src/Fetch.js\");\n\nvar Caml_option = require(\"bs-platform/lib/js/caml_option.js\");\n\nvar Json_decode = require(\"@glennsl/bs-json/lib/js/src/Json_decode.bs.js\");\n\nfunction decodeResponse(response) {\n  return Promise.resolve(\n  /* record */\n  [\n  /* ipfsHash */\n  Json_decode.field(\"IpfsHash\", Json_decode.string, response)]);\n}\n\nfunction pinHashToIPFS(config, hash) {\n  var url = config.apiURL + \"/pinning/pinHashToIPFS\";\n  var payload = {};\n  payload[\"hashToPin\"] = hash;\n  return fetch(url, Fetch.RequestInit[\n  /* make */\n  0](\n  /* Post */\n  2, {\n    \"Content-Type\": \"application/json\",\n    pinata_api_key: config.apiKey,\n    pinata_secret_api_key: config.privateApiKey\n  }, Caml_option.some(JSON.stringify(payload)), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(\n  /* () */\n  0)).then(function (prim) {\n    return prim.json();\n  }).then(decodeResponse).then(function (response) {\n    return Promise.resolve({\n      ipfsHash: response[\n      /* ipfsHash */\n      0]\n    });\n  });\n}\n\nexports.decodeResponse = decodeResponse;\nexports.pinHashToIPFS = pinHashToIPFS;\n/* No side effect */","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/pinata-sdk/lib/js/src/PinHashToIPFS.bs.js"],"names":["Fetch","require","Caml_option","Json_decode","decodeResponse","response","Promise","resolve","field","string","pinHashToIPFS","config","hash","url","apiURL","payload","fetch","RequestInit","pinata_api_key","apiKey","pinata_secret_api_key","privateApiKey","some","JSON","stringify","undefined","then","prim","json","ipfsHash","exports"],"mappings":"AAAA;AACA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,8BAAD,CAAnB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,mCAAD,CAAzB;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,+CAAD,CAAzB;;AAEA,SAASG,cAAT,CAAwBC,QAAxB,EAAkC;AAChC,SAAOC,OAAO,CAACC,OAAR;AAAgB;AAAY;AAAC;AAAcJ,EAAAA,WAAW,CAACK,KAAZ,CAAkB,UAAlB,EAA8BL,WAAW,CAACM,MAA1C,EAAkDJ,QAAlD,CAAf,CAA5B,CAAP;AACD;;AAED,SAASK,aAAT,CAAuBC,MAAvB,EAA+BC,IAA/B,EAAqC;AACnC,MAAIC,GAAG,GAAGF,MAAM,CAACG,MAAP,GAAgB,wBAA1B;AACA,MAAIC,OAAO,GAAG,EAAd;AACAA,EAAAA,OAAO,CAAC,WAAD,CAAP,GAAuBH,IAAvB;AACA,SAAOI,KAAK,CAACH,GAAD,EAAMb,KAAK,CAACiB,WAAN;AAAkB;AAAU,GAA5B;AAA+B;AAAU,GAAzC,EAA4C;AACtC,oBAAgB,kBADsB;AAEtCC,IAAAA,cAAc,EAAEP,MAAM,CAACQ,MAFe;AAGtCC,IAAAA,qBAAqB,EAAET,MAAM,CAACU;AAHQ,GAA5C,EAIOnB,WAAW,CAACoB,IAAZ,CAAiBC,IAAI,CAACC,SAAL,CAAeT,OAAf,CAAjB,CAJP,EAIkDU,SAJlD,EAI6DA,SAJ7D,EAIwEA,SAJxE,EAImFA,SAJnF,EAI8FA,SAJ9F,EAIyGA,SAJzG,EAIoHA,SAJpH,EAI+HA,SAJ/H;AAI0I;AAAQ,GAJlJ,CAAN,CAAL,CAIiKC,IAJjK,CAIuK,UAAUC,IAAV,EAAgB;AAC5K,WAAOA,IAAI,CAACC,IAAL,EAAP;AACD,GANV,EAMaF,IANb,CAMkBtB,cANlB,EAMkCsB,IANlC,CAMwC,UAAUrB,QAAV,EAAoB;AACrD,WAAOC,OAAO,CAACC,OAAR,CAAgB;AACXsB,MAAAA,QAAQ,EAAExB,QAAQ;AAAC;AAAc,OAAf;AADP,KAAhB,CAAP;AAGD,GAVN,CAAP;AAWD;;AAEDyB,OAAO,CAAC1B,cAAR,GAAyBA,cAAzB;AACA0B,OAAO,CAACpB,aAAR,GAAwBA,aAAxB;AACA","sourcesContent":["// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE\n'use strict';\n\nvar Fetch = require(\"bs-fetch/lib/js/src/Fetch.js\");\nvar Caml_option = require(\"bs-platform/lib/js/caml_option.js\");\nvar Json_decode = require(\"@glennsl/bs-json/lib/js/src/Json_decode.bs.js\");\n\nfunction decodeResponse(response) {\n  return Promise.resolve(/* record */[/* ipfsHash */Json_decode.field(\"IpfsHash\", Json_decode.string, response)]);\n}\n\nfunction pinHashToIPFS(config, hash) {\n  var url = config.apiURL + \"/pinning/pinHashToIPFS\";\n  var payload = { };\n  payload[\"hashToPin\"] = hash;\n  return fetch(url, Fetch.RequestInit[/* make */0](/* Post */2, {\n                          \"Content-Type\": \"application/json\",\n                          pinata_api_key: config.apiKey,\n                          pinata_secret_api_key: config.privateApiKey\n                        }, Caml_option.some(JSON.stringify(payload)), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* () */0)).then((function (prim) {\n                    return prim.json();\n                  })).then(decodeResponse).then((function (response) {\n                return Promise.resolve({\n                            ipfsHash: response[/* ipfsHash */0]\n                          });\n              }));\n}\n\nexports.decodeResponse = decodeResponse;\nexports.pinHashToIPFS = pinHashToIPFS;\n/* No side effect */\n"]},"metadata":{},"sourceType":"script"}