{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../../lib/configure.js';\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js';\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createRmLink = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"rmLink\"]}\n   */\n  async function rmLink(cid, dLink) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const res = await api.post('object/patch/rm-link', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [`${cid}`, // @ts-expect-error loose types\n        dLink.Name || dLink.name || null],\n        ...options\n      }),\n      headers: options.headers\n    });\n    const {\n      Hash\n    } = await res.json();\n    return CID.parse(Hash);\n  }\n\n  return rmLink;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/object/patch/rm-link.js"],"names":["CID","configure","toUrlSearchParams","createRmLink","api","rmLink","cid","dLink","options","res","post","signal","searchParams","arg","Name","name","headers","Hash","json","parse"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,iBAAT,QAAkC,mCAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAGF,SAAS,CAACG,GAAG,IAAI;AAC3C;AACF;AACA;AACE,iBAAeC,MAAf,CAAuBC,GAAvB,EAA4BC,KAA5B,EAAiD;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC/C,UAAMC,GAAG,GAAG,MAAML,GAAG,CAACM,IAAJ,CAAS,sBAAT,EAAiC;AACjDC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADiC;AAEjDC,MAAAA,YAAY,EAAEV,iBAAiB,CAAC;AAC9BW,QAAAA,GAAG,EAAE,CACF,GAAEP,GAAI,EADJ,EAEH;AACAC,QAAAA,KAAK,CAACO,IAAN,IAAcP,KAAK,CAACQ,IAApB,IAA4B,IAHzB,CADyB;AAM9B,WAAGP;AAN2B,OAAD,CAFkB;AAUjDQ,MAAAA,OAAO,EAAER,OAAO,CAACQ;AAVgC,KAAjC,CAAlB;AAaA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,GAAG,CAACS,IAAJ,EAAvB;AAEA,WAAOlB,GAAG,CAACmB,KAAJ,CAAUF,IAAV,CAAP;AACD;;AACD,SAAOZ,MAAP;AACD,CAvBoC,CAA9B","sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createRmLink = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"rmLink\"]}\n   */\n  async function rmLink (cid, dLink, options = {}) {\n    const res = await api.post('object/patch/rm-link', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`,\n          // @ts-expect-error loose types\n          dLink.Name || dLink.name || null\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return rmLink\n})\n"]},"metadata":{},"sourceType":"module"}