{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {ConfigAPI[\"get\"]}\n   */\n  const get = async function (key) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!key) {\n      throw new Error('key argument is required');\n    }\n\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return data.Value;\n  };\n\n  return get;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/config/get.js"],"names":["configure","toUrlSearchParams","createGet","api","get","key","options","Error","res","post","signal","searchParams","arg","headers","data","json","Value"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAGF,SAAS,CAACG,GAAG,IAAI;AACxC;AACF;AACA;AACE,QAAMC,GAAG,GAAG,gBAAOC,GAAP,EAA6B;AAAA,QAAjBC,OAAiB,uEAAP,EAAO;;AACvC,QAAI,CAACD,GAAL,EAAU;AACR,YAAM,IAAIE,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAED,UAAMC,GAAG,GAAG,MAAML,GAAG,CAACM,IAAJ,CAAS,QAAT,EAAmB;AACnCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MADmB;AAEnCC,MAAAA,YAAY,EAAEV,iBAAiB,CAAC;AAC9BW,QAAAA,GAAG,EAAEP,GADyB;AAE9B,WAAGC;AAF2B,OAAD,CAFI;AAMnCO,MAAAA,OAAO,EAAEP,OAAO,CAACO;AANkB,KAAnB,CAAlB;AAQA,UAAMC,IAAI,GAAG,MAAMN,GAAG,CAACO,IAAJ,EAAnB;AAEA,WAAOD,IAAI,CAACE,KAAZ;AACD,GAhBD;;AAkBA,SAAOZ,GAAP;AACD,CAvBiC,CAA3B","sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {ConfigAPI[\"get\"]}\n   */\n  const get = async (key, options = {}) => {\n    if (!key) {\n      throw new Error('key argument is required')\n    }\n\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data.Value\n  }\n\n  return get\n})\n"]},"metadata":{},"sourceType":"module"}