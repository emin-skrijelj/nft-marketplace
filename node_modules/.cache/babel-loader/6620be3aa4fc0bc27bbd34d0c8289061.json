{"ast":null,"code":"import { configure } from './lib/configure.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {RootAPI[\"resolve\"]}\n   */\n  async function resolve(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const {\n      Path\n    } = await res.json();\n    return Path;\n  }\n\n  return resolve;\n});","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-http-client/src/resolve.js"],"names":["configure","toUrlSearchParams","createResolve","api","resolve","path","options","res","post","signal","searchParams","arg","headers","Path","json"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAGF,SAAS,CAACG,GAAG,IAAI;AAC5C;AACF;AACA;AACE,iBAAeC,OAAf,CAAwBC,IAAxB,EAA4C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC1C,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,SAAT,EAAoB;AACpCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADoB;AAEpCC,MAAAA,YAAY,EAAET,iBAAiB,CAAC;AAC9BU,QAAAA,GAAG,EAAEN,IADyB;AAE9B,WAAGC;AAF2B,OAAD,CAFK;AAMpCM,MAAAA,OAAO,EAAEN,OAAO,CAACM;AANmB,KAApB,CAAlB;AAQA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMN,GAAG,CAACO,IAAJ,EAAvB;AACA,WAAOD,IAAP;AACD;;AACD,SAAOT,OAAP;AACD,CAjBqC,CAA/B","sourcesContent":["import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {RootAPI[\"resolve\"]}\n   */\n  async function resolve (path, options = {}) {\n    const res = await api.post('resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Path } = await res.json()\n    return Path\n  }\n  return resolve\n})\n"]},"metadata":{},"sourceType":"module"}