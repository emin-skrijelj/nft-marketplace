{"ast":null,"code":"// Import browser version otherwise electron-renderer will end up with node\n// version and fail.\nimport { normaliseInput } from './files/normalise-input-multiple.browser.js';\nimport { modeToString } from './mode-to-string.js';\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidateStream} source\n * @param {AbortController} abortController\n * @param {Headers|Record<string, string>} [headers]\n */\n\nexport async function multipartRequest(source, abortController) {\n  let headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const parts = [];\n  const formData = new FormData();\n  let index = 0;\n  let total = 0;\n\n  for await (const {\n    content,\n    path,\n    mode,\n    mtime\n  } of normaliseInput(source)) {\n    let fileSuffix = '';\n    const type = content ? 'file' : 'dir';\n\n    if (index > 0) {\n      fileSuffix = `-${index}`;\n    }\n\n    let fieldName = type + fileSuffix;\n    const qs = [];\n\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${modeToString(mode)}`);\n    }\n\n    if (mtime != null) {\n      const {\n        secs,\n        nsecs\n      } = mtime;\n      qs.push(`mtime=${secs}`);\n\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${nsecs}`);\n      }\n    }\n\n    if (qs.length) {\n      fieldName = `${fieldName}?${qs.join('&')}`;\n    }\n\n    if (content) {\n      formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined);\n      const end = total + content.size;\n      parts.push({\n        name: path,\n        start: total,\n        end\n      });\n      total = end;\n    } else if (path != null) {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), {\n        type: 'application/x-directory'\n      }));\n    } else {\n      throw new Error('path or content or both must be set');\n    }\n\n    index++;\n  }\n\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  };\n}","map":{"version":3,"sources":["/home/legasi/nft-marketplace/node_modules/ipfs-core-utils/src/multipart-request.browser.js"],"names":["normaliseInput","modeToString","multipartRequest","source","abortController","headers","parts","formData","FormData","index","total","content","path","mode","mtime","fileSuffix","type","fieldName","qs","undefined","push","secs","nsecs","length","join","set","encodeURIComponent","end","size","name","start","File","Error","body"],"mappings":"AACA;AACA;AACA,SAASA,cAAT,QAA+B,6CAA/B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeC,gBAAf,CAAiCC,MAAjC,EAAyCC,eAAzC,EAAwE;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAC7E,QAAMC,KAAK,GAAG,EAAd;AACA,QAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,KAAK,GAAG,CAAZ;;AAEA,aAAW,MAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA,IAAjB;AAAuBC,IAAAA;AAAvB,GAAjB,IAAmDd,cAAc,CAACG,MAAD,CAAjE,EAA2E;AACzE,QAAIY,UAAU,GAAG,EAAjB;AACA,UAAMC,IAAI,GAAGL,OAAO,GAAG,MAAH,GAAY,KAAhC;;AAEA,QAAIF,KAAK,GAAG,CAAZ,EAAe;AACbM,MAAAA,UAAU,GAAI,IAAGN,KAAM,EAAvB;AACD;;AAED,QAAIQ,SAAS,GAAGD,IAAI,GAAGD,UAAvB;AACA,UAAMG,EAAE,GAAG,EAAX;;AAEA,QAAIL,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAKM,SAA9B,EAAyC;AACvCD,MAAAA,EAAE,CAACE,IAAH,CAAS,QAAOnB,YAAY,CAACY,IAAD,CAAO,EAAnC;AACD;;AAED,QAAKC,KAAD,IAAW,IAAf,EAAqB;AACnB,YAAM;AAAEO,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAmBR,KAAzB;AAEAI,MAAAA,EAAE,CAACE,IAAH,CAAS,SAAQC,IAAK,EAAtB;;AAEA,UAAIC,KAAK,IAAI,IAAb,EAAmB;AACjBJ,QAAAA,EAAE,CAACE,IAAH,CAAS,eAAcE,KAAM,EAA7B;AACD;AACF;;AAED,QAAIJ,EAAE,CAACK,MAAP,EAAe;AACbN,MAAAA,SAAS,GAAI,GAAEA,SAAU,IAAGC,EAAE,CAACM,IAAH,CAAQ,GAAR,CAAa,EAAzC;AACD;;AAED,QAAIb,OAAJ,EAAa;AACXJ,MAAAA,QAAQ,CAACkB,GAAT,CAAaR,SAAb,EAAwBN,OAAxB,EAAiCC,IAAI,IAAI,IAAR,GAAec,kBAAkB,CAACd,IAAD,CAAjC,GAA0CO,SAA3E;AACA,YAAMQ,GAAG,GAAGjB,KAAK,GAAGC,OAAO,CAACiB,IAA5B;AACAtB,MAAAA,KAAK,CAACc,IAAN,CAAW;AAAES,QAAAA,IAAI,EAAEjB,IAAR;AAAckB,QAAAA,KAAK,EAAEpB,KAArB;AAA4BiB,QAAAA;AAA5B,OAAX;AACAjB,MAAAA,KAAK,GAAGiB,GAAR;AACD,KALD,MAKO,IAAIf,IAAI,IAAI,IAAZ,EAAkB;AACvBL,MAAAA,QAAQ,CAACkB,GAAT,CAAaR,SAAb,EAAwB,IAAIc,IAAJ,CAAS,CAAC,EAAD,CAAT,EAAeL,kBAAkB,CAACd,IAAD,CAAjC,EAAyC;AAAEI,QAAAA,IAAI,EAAE;AAAR,OAAzC,CAAxB;AACD,KAFM,MAEA;AACL,YAAM,IAAIgB,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAEDvB,IAAAA,KAAK;AACN;;AAED,SAAO;AACLC,IAAAA,KADK;AAELJ,IAAAA,KAFK;AAGLD,IAAAA,OAHK;AAIL4B,IAAAA,IAAI,EAAE1B;AAJD,GAAP;AAMD","sourcesContent":["\n// Import browser version otherwise electron-renderer will end up with node\n// version and fail.\nimport { normaliseInput } from './files/normalise-input-multiple.browser.js'\nimport { modeToString } from './mode-to-string.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidateStream} source\n * @param {AbortController} abortController\n * @param {Headers|Record<string, string>} [headers]\n */\nexport async function multipartRequest (source, abortController, headers = {}) {\n  const parts = []\n  const formData = new FormData()\n  let index = 0\n  let total = 0\n\n  for await (const { content, path, mode, mtime } of normaliseInput(source)) {\n    let fileSuffix = ''\n    const type = content ? 'file' : 'dir'\n\n    if (index > 0) {\n      fileSuffix = `-${index}`\n    }\n\n    let fieldName = type + fileSuffix\n    const qs = []\n\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${modeToString(mode)}`)\n    }\n\n    if ((mtime) != null) {\n      const { secs, nsecs } = (mtime)\n\n      qs.push(`mtime=${secs}`)\n\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${nsecs}`)\n      }\n    }\n\n    if (qs.length) {\n      fieldName = `${fieldName}?${qs.join('&')}`\n    }\n\n    if (content) {\n      formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined)\n      const end = total + content.size\n      parts.push({ name: path, start: total, end })\n      total = end\n    } else if (path != null) {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), { type: 'application/x-directory' }))\n    } else {\n      throw new Error('path or content or both must be set')\n    }\n\n    index++\n  }\n\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  }\n}\n"]},"metadata":{},"sourceType":"module"}