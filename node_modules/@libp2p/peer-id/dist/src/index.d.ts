import { type PeerIdType, type PeerId } from '@libp2p/interface-peer-id';
import { CID } from 'multiformats/cid';
import type { MultibaseDecoder } from 'multiformats/bases/interface';
import type { MultihashDigest } from 'multiformats/hashes/interface';
interface PeerIdInit {
    type: PeerIdType;
    multihash: MultihashDigest;
    privateKey?: Uint8Array;
}
export declare function createPeerId(init: PeerIdInit): PeerId;
export declare function peerIdFromPeerId(other: any): PeerId;
export declare function peerIdFromString(str: string, decoder?: MultibaseDecoder<any>): PeerId;
export declare function peerIdFromBytes(buf: Uint8Array): PeerId;
export declare function peerIdFromCID(cid: CID): PeerId;
/**
 * @param publicKey - A marshalled public key
 * @param privateKey - A marshalled private key
 */
export declare function peerIdFromKeys(publicKey: Uint8Array, privateKey?: Uint8Array): Promise<PeerId>;
export {};
//# sourceMappingURL=index.d.ts.map